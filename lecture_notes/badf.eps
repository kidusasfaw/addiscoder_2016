%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 118 575 673
%%Creator: FreeHEP Graphics2D Driver
%%Producer: com.maplesoft.mathdoc.view.plot.paint.PlotPSGraphics2D Revision: 1.20 
%%For: 
%%Title: 
%%CreationDate: Friday, July 8, 2011 8:22:10 AM GMT+03:00
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Draw a line. (x0 y0 x1 y1 line)
/L {bias n m l S unbias} def

% Polyline primitive.
/polyline  {n m 1 exch 1 exch
           {pop currentfile token pop currentfile token pop l} for
           } def

% Draw a polyline (n x0 y0 OPL x1 y1 x2 y2 ... ... xn yn)
/OPL {bias polyline S unbias} def

% Draw a closed polyline (n x0 y0 CPL x1 y1 x2 y2 ... ... xn yn)
/CPL {bias polyline s unbias} def

% Draw a filled polyline (n x0 y0 FPL x1 y1 x2 y2 ... ... xn yn)
/FPL {polyline h f*} def

% Draw an oval. (x y w h OVL)
/OVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width currentlinewidth sub 2 div
      height currentlinewidth sub 2 div neg
      scale n 0 0 1 5 -2 roll arc
      smatrix setmatrix S} def

% Draw a filled oval. (x y w h FOVL)
/FOVL {matrix currentmatrix /smatrix exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      width 2 div xv add height 2 div yv add translate
      width 2 div
      height 2 div neg
      scale n 0 0 m 0 0 1 5 -2 roll arc
      h smatrix setmatrix f} def

% Draw a rounded rectangle. (x y w h arcwidth archeight RREC)
/RREC {matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      s} def

% Draw a filled rounded rectangle. (x y w h arcwidth archeight FRREC)
/FRREC{matrix currentmatrix /smatrix exch def
      2 div /ah exch def
      2 div /aw exch def
      /height exch def /width exch def
      /yv exch def /xv exch def
      aw ah scale matrix
      currentmatrix /nmatrix exch def
      smatrix setmatrix
      n xv width add aw sub yv m
      nmatrix setmatrix
      currentpoint exch 1 add exch
      currentpoint 1 add exch 1 add exch
      1 arct smatrix setmatrix
      xv width add yv height add ah sub l
      nmatrix setmatrix
      currentpoint 1 add
      currentpoint exch 1 sub exch 1 add
      1 arct smatrix setmatrix
      xv aw add yv height add l
      nmatrix setmatrix
      currentpoint exch 1 sub exch
      currentpoint exch 1 sub exch 1 sub
      1 arct smatrix setmatrix
      xv yv ah add l
      nmatrix setmatrix
      currentpoint 1 sub
      currentpoint exch 1 add exch 1 sub
      1 arct smatrix setmatrix
      h f} def

% Draw a string.  (string x y STR)
/STR {q m 1 -1 scale recshow Q} def

% Define basic plot symbols.
/xys   {/siz exch def /yv exch def /xv exch def} def
/hline {xys n xv siz 2. div sub yv m siz 0 rlineto S} def
/vline {xys n xv yv siz 2. div sub m 0 siz rlineto S} def
/plus  {xys n xv yv siz 2. div sub m 0 siz rlineto
                    xv siz 2. div sub yv m siz 0 rlineto S} def
/dot   {n 2. div 0 360 arc s} def
/fdot  {n 2. div 0 360 arc h f} def
/box   {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                    siz 2 sqrt div dup rs} def
/fbox  {xys n xv siz 2 sqrt div 2 div sub yv siz 2 sqrt div 2 div sub
                       siz 2 sqrt div dup rf} def
/tridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto s} def
/ftridn{xys n xv yv siz 3 sqrt div add m
                       siz 2. div neg 3 sqrt 2. div siz mul neg rlineto
                       siz 0 rlineto h f} def

% Symbols defined in terms of the others.
/star     {3 copy cross plus} def
/cross    {xys q xv yv translate 45 rotate 0 0 siz plus Q} def
/diamond  {xys q xv yv translate 45 rotate 0 0 siz box Q} def
/fdiamond {xys q xv yv translate 45 rotate 0 0 siz fbox Q} def
/triup    {xys q xv yv translate 180 rotate 0 0 siz tridn Q} def
/ftriup   {xys q xv yv translate 180 rotate 0 0 siz ftridn Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Helvetica 16#00 vg&newcompositefont
/DialogInput-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
400 400 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.0 0.0 0.0 RG
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] defaultmatrix matrix concatmatrix setmatrix
1.0 w
2 J
0 j
10.0 M
[ ] 0.0 d
1.0 1.0 1.0 RG
0.0 0.0 400.0 400.0 rf
0.0 0.0 0.0 RG
0 J
1 j
0.0 0.0 translate
0.0 0.0 translate
q
5.0 20.0 translate
0 0 390 375 rc
q
0.647059 0.647059 0.647059 RG
Q
q
0.647059 0.647059 0.647059 RG
Q
q
q
4.0 w
1.0 0.0 0.0 RG
35.0 3.003474 348.976562 366.996521 rc
3 39 366 OPL
209 366
209 8
379 8
newpath
0.0 0.0 m
0.0 375.0 l
390.0 375.0 l
390.0 0.0 l
h
W
Q
Q
q
q
1 39 187 OPL
379 187
1 56 187 OPL
56 189
1 73 187 OPL
73 189
1 90 187 OPL
90 189
1 107 187 OPL
107 189
1 141 187 OPL
141 189
1 158 187 OPL
158 189
1 175 187 OPL
175 189
1 192 187 OPL
192 189
1 226 187 OPL
226 189
1 243 187 OPL
243 189
1 260 187 OPL
260 189
1 277 187 OPL
277 189
1 311 187 OPL
311 189
1 328 187 OPL
328 189
1 345 187 OPL
345 189
1 362 187 OPL
362 189
Q
0.0 0.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
201 210 15 15 rc
205.0 223.0 moveto
q 1 -1 scale
9 dict begin
/FontType 3 def
/FontMatrix [0.0010 0 0 0.0010 0 0]def
/FontBBox [0 -213 1065 950 ] def
	/Encoding 256 array def
			0 1 255 {Encoding exch /.notdef put}for
		Encoding 32 /space put
		Encoding 33 /exclam put
		Encoding 34 /quotedbl put
		Encoding 35 /numbersign put
		Encoding 36 /dollar put
		Encoding 37 /percent put
		Encoding 38 /ampersand put
		Encoding 39 /quoteright put
		Encoding 40 /parenleft put
		Encoding 41 /parenright put
		Encoding 42 /asterisk put
		Encoding 43 /plus put
		Encoding 44 /comma put
		Encoding 45 /hyphen put
		Encoding 46 /period put
		Encoding 47 /slash put
		Encoding 48 /zero put
		Encoding 49 /one put
		Encoding 50 /two put
		Encoding 51 /three put
		Encoding 52 /four put
		Encoding 53 /five put
		Encoding 54 /six put
		Encoding 55 /seven put
		Encoding 56 /eight put
		Encoding 57 /nine put
		Encoding 58 /colon put
		Encoding 59 /semicolon put
		Encoding 60 /less put
		Encoding 61 /equal put
		Encoding 62 /greater put
		Encoding 63 /question put
		Encoding 64 /at put
		Encoding 65 /A put
		Encoding 66 /B put
		Encoding 67 /C put
		Encoding 68 /D put
		Encoding 69 /E put
		Encoding 70 /F put
		Encoding 71 /G put
		Encoding 72 /H put
		Encoding 73 /I put
		Encoding 74 /J put
		Encoding 75 /K put
		Encoding 76 /L put
		Encoding 77 /M put
		Encoding 78 /N put
		Encoding 79 /O put
		Encoding 80 /P put
		Encoding 81 /Q put
		Encoding 82 /R put
		Encoding 83 /S put
		Encoding 84 /T put
		Encoding 85 /U put
		Encoding 86 /V put
		Encoding 87 /W put
		Encoding 88 /X put
		Encoding 89 /Y put
		Encoding 90 /Z put
		Encoding 91 /bracketleft put
		Encoding 92 /backslash put
		Encoding 93 /bracketright put
		Encoding 94 /asciicircum put
		Encoding 95 /underscore put
		Encoding 96 /quoteleft put
		Encoding 97 /a put
		Encoding 98 /b put
		Encoding 99 /c put
		Encoding 100 /d put
		Encoding 101 /e put
		Encoding 102 /f put
		Encoding 103 /g put
		Encoding 104 /h put
		Encoding 105 /i put
		Encoding 106 /j put
		Encoding 107 /k put
		Encoding 108 /l put
		Encoding 109 /m put
		Encoding 110 /n put
		Encoding 111 /o put
		Encoding 112 /p put
		Encoding 113 /q put
		Encoding 114 /r put
		Encoding 115 /s put
		Encoding 116 /t put
		Encoding 117 /u put
		Encoding 118 /v put
		Encoding 119 /w put
		Encoding 120 /x put
		Encoding 121 /y put
		Encoding 122 /z put
		Encoding 123 /braceleft put
		Encoding 124 /bar put
		Encoding 125 /braceright put
		Encoding 126 /asciitilde put
		Encoding 161 /exclamdown put
		Encoding 162 /cent put
		Encoding 163 /sterling put
		Encoding 164 /fraction put
		Encoding 165 /yen put
		Encoding 166 /florin put
		Encoding 167 /section put
		Encoding 168 /currency put
		Encoding 169 /quotesingle put
		Encoding 170 /quotedblleft put
		Encoding 171 /guillemotleft put
		Encoding 172 /guilsinglleft put
		Encoding 173 /guilsinglright put
		Encoding 174 /fi put
		Encoding 175 /fl put
		Encoding 177 /endash put
		Encoding 178 /dagger put
		Encoding 179 /daggerdbl put
		Encoding 180 /periodcentered put
		Encoding 182 /paragraph put
		Encoding 183 /bullet put
		Encoding 184 /quotesinglbase put
		Encoding 185 /quotedblbase put
		Encoding 186 /quotedblright put
		Encoding 187 /guillemotright put
		Encoding 188 /ellipsis put
		Encoding 189 /perthousand put
		Encoding 191 /questiondown put
		Encoding 193 /grave put
		Encoding 194 /acute put
		Encoding 195 /circumflex put
		Encoding 196 /tilde put
		Encoding 197 /macron put
		Encoding 198 /breve put
		Encoding 199 /dotaccent put
		Encoding 200 /dieresis put
		Encoding 202 /ring put
		Encoding 203 /cedilla put
		Encoding 205 /hungarumlaut put
		Encoding 206 /ogonek put
		Encoding 207 /caron put
		Encoding 208 /emdash put
		Encoding 225 /AE put
		Encoding 227 /ordfeminine put
		Encoding 232 /Lslash put
		Encoding 233 /Oslash put
		Encoding 234 /OE put
		Encoding 235 /ordmasculine put
		Encoding 241 /ae put
		Encoding 245 /dotlessi put
		Encoding 248 /lslash put
		Encoding 249 /oslash put
		Encoding 250 /oe put
		Encoding 251 /germandbls put
	/BuildGlyph
		{ 2 copy exch /Metrics get exch 
			2 copy known {get}{pop pop 1000.0} ifelse
			0
			0 -213 1065 950
			setcachedevice
			exch /CharProcs get exch
			2 copy known not
					{pop /.notdef}
				if
			get exec
		} bind def

	/BuildChar
		{ 1 index /Encoding get exch get
		  1 index /BuildGlyph get exec
	  } bind def
	/Metrics 150 dict def
		Metrics begin
		/.notdef 1000 def
		/space 304.19921875 def
		/exclam 265.13671875 def
		/quotedbl 385.7421875 def
		/numbersign 608.3984375 def
		/dollar 608.3984375 def
		/percent 758.7890625 def
		/ampersand 727.5390625 def
		/quoteright 241.2109375 def
		/parenleft 310.05859375 def
		/parenright 310.05859375 def
		/asterisk 458.0078125 def
		/plus 794.921875 def
		/comma 265.13671875 def
		/hyphen 578.61328125 def
		/period 265.13671875 def
		/slash 524.4140625 def
		/zero 608.3984375 def
		/one 608.3984375 def
		/two 608.3984375 def
		/three 608.3984375 def
		/four 608.3984375 def
		/five 608.3984375 def
		/six 608.3984375 def
		/seven 608.3984375 def
		/eight 608.3984375 def
		/nine 608.3984375 def
		/colon 265.13671875 def
		/semicolon 265.13671875 def
		/less 794.921875 def
		/equal 794.921875 def
		/greater 794.921875 def
		/question 471.19140625 def
		/at 861.328125 def
		/A 747.0703125 def
		/B 605.95703125 def
		/C 714.35546875 def
		/D 770.01953125 def
		/E 568.359375 def
		/F 550.29296875 def
		/G 756.34765625 def
		/H 775.87890625 def
		/I 325.1953125 def
		/J 421.38671875 def
		/K 698.2421875 def
		/L 571.77734375 def
		/M 864.74609375 def
		/N 761.71875 def
		/O 783.203125 def
		/P 578.61328125 def
		/Q 787.59765625 def
		/R 686.03515625 def
		/S 549.31640625 def
		/T 662.59765625 def
		/U 727.05078125 def
		/V 656.25 def
		/W 877.9296875 def
		/X 624.0234375 def
		/Y 662.59765625 def
		/Z 632.32421875 def
		/bracketleft 310.05859375 def
		/backslash 524.4140625 def
		/bracketright 310.05859375 def
		/asciicircum 608.3984375 def
		/underscore 500.0 def
		/quoteleft 602.5390625 def
		/a 608.3984375 def
		/b 596.19140625 def
		/c 487.3046875 def
		/d 608.3984375 def
		/e 518.06640625 def
		/f 379.39453125 def
		/g 602.05078125 def
		/h 630.859375 def
		/i 289.0625 def
		/j 343.26171875 def
		/k 560.05859375 def
		/l 289.0625 def
		/m 944.3359375 def
		/n 630.859375 def
		/o 560.05859375 def
		/p 608.3984375 def
		/q 599.609375 def
		/r 469.7265625 def
		/s 439.94140625 def
		/t 355.46875 def
		/u 629.39453125 def
		/v 558.10546875 def
		/w 805.17578125 def
		/x 510.25390625 def
		/y 558.10546875 def
		/z 536.1328125 def
		/braceleft 337.40234375 def
		/bar 373.53515625 def
		/braceright 337.40234375 def
		/asciitilde 794.921875 def
		/exclamdown 265.13671875 def
		/cent 608.3984375 def
		/sterling 608.3984375 def
		/fraction 421.875 def
		/yen 608.3984375 def
		/florin 608.3984375 def
		/section 608.3984375 def
		/currency 608.3984375 def
		/quotesingle 241.2109375 def
		/quotedblleft 457.51953125 def
		/guillemotleft 524.90234375 def
		/guilsinglleft 330.078125 def
		/guilsinglright 330.078125 def
		/fi 750.0 def
		/fl 750.0 def
		/endash 578.61328125 def
		/dagger 608.3984375 def
		/daggerdbl 608.3984375 def
		/periodcentered 265.13671875 def
		/paragraph 608.3984375 def
		/bullet 608.3984375 def
		/quotesinglbase 265.13671875 def
		/quotedblbase 457.51953125 def
		/quotedblright 457.51953125 def
		/guillemotright 524.90234375 def
		/ellipsis 1000.0 def
		/perthousand 1065.4296875 def
		/questiondown 471.19140625 def
		/grave 602.5390625 def
		/acute 602.5390625 def
		/circumflex 602.5390625 def
		/tilde 602.5390625 def
		/macron 500.0 def
		/breve 602.5390625 def
		/dotaccent 602.5390625 def
		/dieresis 560.05859375 def
		/ring 602.5390625 def
		/cedilla 602.5390625 def
		/hungarumlaut 750.0 def
		/ogonek 602.5390625 def
		/caron 602.5390625 def
		/emdash 578.61328125 def
		/AE 906.73828125 def
		/ordfeminine 458.0078125 def
		/Lslash 571.77734375 def
		/Oslash 783.203125 def
		/OE 1005.37109375 def
		/ordmasculine 458.0078125 def
		/ae 881.34765625 def
		/dotlessi 289.0625 def
		/lslash 337.40234375 def
		/oslash 560.05859375 def
		/oe 892.08984375 def
		/germandbls 603.02734375 def
	end
	/CharProcs 150 dict def
	CharProcs begin
			%define Glyph dictionary and start filling
	/space
		{
fill
		} def

	/exclam
		{
84 0 moveto
103 96 lineto
200 96 lineto
180 0 lineto
84 0 lineto
closepath
156 192 moveto
199 578 lineto
228 722 lineto
324 722 lineto
295 578 lineto
186 192 lineto
156 192 lineto
closepath
fill
		} def

	/quotedbl
		{
197 530 moveto
197 771 lineto
293 771 lineto
227 530 lineto
197 530 lineto
closepath
360 530 moveto
360 771 lineto
456 771 lineto
390 530 lineto
360 530 lineto
closepath
fill
		} def

	/numbersign
		{
83 0 moveto
188 222 lineto
70 222 lineto
76 271 lineto
210 271 lineto
296 451 lineto
115 451 lineto
122 500 lineto
318 500 lineto
423 722 lineto
478 722 lineto
373 500 lineto
509 500 lineto
614 722 lineto
669 722 lineto
564 500 lineto
682 500 lineto
676 451 lineto
541 451 lineto
456 271 lineto
636 271 lineto
630 222 lineto
434 222 lineto
328 0 lineto
274 0 lineto
379 222 lineto
242 222 lineto
137 0 lineto
83 0 lineto
closepath
265 271 moveto
401 271 lineto
487 451 lineto
350 451 lineto
265 271 lineto
closepath
fill
		} def

	/dollar
		{
281 -60 moveto
293 0 lineto
233 3 181 13 139 27  curveto
164 150 lineto
212 150 lineto
211 141 lineto
208 114 lineto
206 101 205 92 205 87  curveto
205 56 237 38 300 33  curveto
361 339 lineto
340 354 lineto
296 386 266 414 250 437  curveto
234 461 226 490 226 524  curveto
226 578 247 625 289 666  curveto
331 706 381 726 437 726  curveto
449 783 lineto
479 783 lineto
467 722 lineto
524 719 580 708 635 688  curveto
612 572 lineto
563 572 lineto
565 581 lineto
567 597 568 606 568 607  curveto
570 618 571 628 571 635  curveto
571 651 560 664 540 675  curveto
519 685 493 690 462 690  curveto
405 409 lineto
445 378 lineto
488 346 517 318 532 295  curveto
548 272 555 245 555 214  curveto
555 158 533 109 489 69  curveto
446 28 390 5 323 0  curveto
312 -60 lineto
281 -60 lineto
closepath
330 33 moveto
423 48 470 101 470 193  curveto
470 234 442 276 387 319  curveto
330 33 lineto
closepath
379 431 moveto
431 689 lineto
394 683 364 667 341 640  curveto
319 614 307 582 307 545  curveto
307 508 331 470 379 431  curveto
closepath
fill
		} def

	/percent
		{
262 361 moveto
225 361 195 372 172 396  curveto
150 419 139 450 139 489  curveto
139 554 157 609 194 654  curveto
231 699 275 722 327 722  curveto
365 722 396 711 418 688  curveto
441 665 452 634 452 595  curveto
452 530 434 474 397 429  curveto
360 384 315 361 262 361  curveto
closepath
210 484 moveto
210 422 230 391 269 391  curveto
299 391 326 412 350 455  curveto
374 497 386 544 386 597  curveto
386 661 367 693 328 693  curveto
297 693 270 672 246 630  curveto
222 587 210 539 210 484  curveto
closepath
578 0 moveto
540 0 510 11 487 34  curveto
465 58 454 89 454 128  curveto
454 192 472 247 509 292  curveto
546 338 590 361 642 361  curveto
680 361 711 349 733 326  curveto
756 303 767 272 767 233  curveto
767 168 749 113 712 68  curveto
675 22 630 0 578 0  curveto
closepath
525 123 moveto
525 60 545 29 584 29  curveto
614 29 641 51 665 93  curveto
689 135 701 183 701 236  curveto
701 300 682 332 643 332  curveto
612 332 585 310 561 268  curveto
537 226 525 178 525 123  curveto
closepath
88 -18 moveto
753 740 lineto
817 740 lineto
152 -18 lineto
88 -18 lineto
closepath
fill
		} def

	/ampersand
		{
522 0 moveto
515 7 508 16 502 26  curveto
494 38 488 47 484 53  curveto
411 5 343 -19 280 -19  curveto
223 -19 175 0 136 38  curveto
97 77 78 124 78 181  curveto
78 298 154 383 308 436  curveto
293 480 286 517 286 545  curveto
286 599 306 645 346 683  curveto
386 721 434 740 490 740  curveto
530 740 562 729 587 707  curveto
611 684 624 654 624 618  curveto
624 530 553 463 411 415  curveto
442 328 487 236 545 139  curveto
597 192 624 255 624 328  curveto
624 338 620 345 613 348  curveto
606 350 585 353 550 354  curveto
540 355 lineto
545 385 lineto
792 385 lineto
787 355 lineto
777 354 lineto
759 353 748 353 744 353  curveto
728 353 717 350 710 344  curveto
704 337 696 322 687 297  curveto
683 285 lineto
659 221 620 163 564 111  curveto
574 95 lineto
601 55 629 34 660 32  curveto
697 30 lineto
704 30 lineto
698 0 lineto
522 0 lineto
closepath
469 82 moveto
404 187 353 295 316 406  curveto
225 364 180 298 180 209  curveto
180 159 194 119 222 87  curveto
250 56 287 41 332 41  curveto
381 41 427 54 469 82  curveto
closepath
401 442 moveto
493 487 539 550 539 630  curveto
539 682 518 708 476 708  curveto
447 708 423 696 405 670  curveto
386 644 377 611 377 570  curveto
377 536 385 493 401 442  curveto
closepath
fill
		} def

	/quoteright
		{
213 505 moveto
213 771 lineto
334 771 lineto
244 505 lineto
213 505 lineto
closepath
fill
		} def

	/parenleft
		{
239 -144 moveto
142 -70 93 42 93 197  curveto
93 310 122 417 180 518  curveto
238 619 318 703 421 771  curveto
415 740 lineto
364 697 324 651 297 604  curveto
269 557 244 494 223 415  curveto
190 295 174 189 174 97  curveto
174 4 196 -65 242 -114  curveto
239 -144 lineto
closepath
fill
		} def

	/parenright
		{
195 771 moveto
293 697 341 583 341 429  curveto
341 315 312 208 255 107  curveto
197 6 116 -77 13 -144  curveto
20 -114 lineto
91 -52 145 22 180 111  curveto
202 168 221 237 237 319  curveto
253 400 261 470 261 527  curveto
261 621 238 692 193 740  curveto
195 771 lineto
closepath
fill
		} def

	/asterisk
		{
167 413 moveto
298 525 lineto
302 516 309 509 319 504  curveto
224 361 lineto
167 413 lineto
closepath
187 624 moveto
309 568 lineto
300 560 295 549 295 533  curveto
151 553 lineto
187 624 lineto
closepath
401 722 moveto
353 572 lineto
344 575 338 577 333 577  curveto
330 577 324 575 317 572  curveto
328 722 lineto
401 722 lineto
closepath
522 548 moveto
369 530 lineto
370 534 370 538 370 542  curveto
370 548 367 556 360 564  curveto
510 619 lineto
522 548 lineto
closepath
363 363 moveto
331 502 lineto
344 502 355 507 363 517  curveto
435 404 lineto
363 363 lineto
closepath
fill
		} def

	/plus
		{
373 0 moveto
426 265 lineto
161 265 lineto
170 313 lineto
436 313 lineto
488 578 lineto
536 578 lineto
483 313 lineto
749 313 lineto
739 265 lineto
474 265 lineto
421 0 lineto
373 0 lineto
closepath
fill
		} def

	/comma
		{
117 0 moveto
71 0 lineto
97 120 lineto
217 120 lineto
195 11 lineto
173 -100 121 -156 39 -156  curveto
46 -126 lineto
80 -126 102 -96 111 -35  curveto
117 0 lineto
closepath
fill
		} def

	/hyphen
		{
125 265 moveto
137 325 lineto
570 325 lineto
558 265 lineto
125 265 lineto
closepath
fill
		} def

	/period
		{
72 0 moveto
96 120 lineto
216 120 lineto
192 0 lineto
72 0 lineto
closepath
fill
		} def

	/slash
		{
79 -144 moveto
509 723 lineto
560 723 lineto
130 -144 lineto
79 -144 lineto
closepath
fill
		} def

	/zero
		{
308 -18 moveto
248 -18 200 4 163 48  curveto
126 92 108 150 108 223  curveto
108 361 141 482 208 586  curveto
276 689 354 741 444 741  curveto
504 741 552 719 589 674  curveto
626 630 644 572 644 500  curveto
644 361 611 239 544 136  curveto
477 33 398 -18 308 -18  curveto
closepath
207 206 moveto
207 76 243 12 315 12  curveto
376 12 429 63 476 167  curveto
522 270 545 390 545 526  curveto
545 649 510 710 439 710  curveto
378 710 324 660 277 558  curveto
230 456 207 339 207 206  curveto
closepath
fill
		} def

	/one
		{
497 729 moveto
377 126 lineto
372 99 369 76 369 56  curveto
369 42 382 34 407 33  curveto
439 30 lineto
497 30 lineto
491 0 lineto
117 0 lineto
123 30 lineto
181 30 lineto
212 30 233 33 244 39  curveto
255 45 263 58 269 78  curveto
281 126 lineto
370 574 lineto
377 624 lineto
380 641 lineto
378 652 369 657 351 657  curveto
345 657 326 654 294 648  curveto
245 640 lineto
250 670 lineto
497 729 lineto
closepath
fill
		} def

	/two
		{
86 0 moveto
97 54 lineto
132 127 203 205 309 288  curveto
359 326 lineto
478 419 538 504 538 580  curveto
538 666 497 709 415 709  curveto
335 709 289 684 275 633  curveto
265 593 lineto
263 584 lineto
214 584 lineto
236 693 lineto
302 725 370 741 441 741  curveto
503 741 552 727 587 699  curveto
622 671 640 632 640 583  curveto
640 536 626 495 599 459  curveto
572 423 523 384 454 340  curveto
379 292 lineto
262 219 203 150 203 84  curveto
540 84 lineto
517 0 lineto
86 0 lineto
closepath
fill
		} def

	/three
		{
105 2 moveto
130 126 lineto
178 126 lineto
177 117 lineto
176 109 174 96 171 78  curveto
170 72 170 67 170 63  curveto
170 48 180 36 200 26  curveto
220 16 245 11 275 11  curveto
328 11 373 33 410 77  curveto
448 121 466 173 466 235  curveto
466 331 402 379 274 379  curveto
243 379 lineto
249 409 lineto
293 409 lineto
364 409 420 426 460 459  curveto
501 492 521 537 521 595  curveto
521 630 510 658 488 679  curveto
466 700 437 710 400 710  curveto
339 710 304 690 295 649  curveto
290 629 287 617 286 612  curveto
284 603 lineto
236 603 lineto
259 719 lineto
312 733 363 740 410 740  curveto
548 740 617 693 617 598  curveto
617 552 598 511 561 473  curveto
524 436 474 409 411 392  curveto
516 376 568 326 568 241  curveto
568 166 540 104 483 55  curveto
427 6 355 -18 267 -18  curveto
215 -18 161 -11 105 2  curveto
closepath
fill
		} def

	/four
		{
392 201 moveto
67 201 lineto
78 255 lineto
534 731 lineto
582 731 lineto
491 273 lineto
593 273 lineto
573 201 lineto
477 201 lineto
461 126 lineto
456 99 454 76 454 57  curveto
454 42 466 34 491 33  curveto
524 30 lineto
533 30 lineto
527 0 lineto
255 0 lineto
262 30 lineto
277 30 lineto
310 33 lineto
331 34 346 40 354 52  curveto
362 63 369 88 377 126  curveto
392 201 lineto
closepath
138 273 moveto
407 273 lineto
477 629 lineto
138 273 lineto
closepath
fill
		} def

	/five
		{
117 2 moveto
142 126 lineto
190 126 lineto
189 117 lineto
185 88 lineto
183 77 183 69 183 63  curveto
183 50 192 38 212 28  curveto
231 18 254 13 281 13  curveto
334 13 379 36 416 83  curveto
454 129 472 185 472 251  curveto
472 361 412 417 291 417  curveto
268 417 241 414 209 410  curveto
272 722 lineto
655 722 lineto
638 638 lineto
285 638 lineto
247 445 lineto
273 447 295 449 312 449  curveto
393 449 458 431 504 397  curveto
551 362 575 315 575 255  curveto
575 174 546 108 488 57  curveto
430 7 355 -18 263 -18  curveto
215 -18 166 -11 117 2  curveto
closepath
fill
		} def

	/six
		{
249 400 moveto
309 446 368 469 425 469  curveto
479 469 523 453 556 421  curveto
590 388 607 346 607 294  curveto
607 212 578 139 520 76  curveto
462 13 395 -18 320 -18  curveto
256 -18 207 3 170 47  curveto
134 91 116 152 116 229  curveto
116 298 129 369 154 441  curveto
178 513 211 573 252 623  curveto
318 701 396 740 488 740  curveto
544 740 601 728 656 703  curveto
633 587 lineto
585 587 lineto
587 599 lineto
591 636 lineto
593 645 593 651 593 655  curveto
593 669 582 681 558 693  curveto
535 704 509 710 481 710  curveto
429 710 382 683 341 628  curveto
299 573 269 497 249 400  curveto
closepath
212 200 moveto
212 76 252 14 332 14  curveto
379 14 421 42 457 98  curveto
493 155 511 219 511 293  curveto
511 384 473 430 397 430  curveto
341 430 296 409 262 368  curveto
229 326 212 271 212 200  curveto
closepath
fill
		} def

	/seven
		{
152 0 moveto
165 80 209 163 285 249  curveto
400 378 lineto
628 632 lineto
231 632 lineto
249 722 lineto
707 722 lineto
693 653 lineto
567 527 467 406 392 291  curveto
317 176 275 79 266 0  curveto
152 0 lineto
closepath
fill
		} def

	/eight
		{
301 387 moveto
248 424 221 469 221 524  curveto
221 584 245 635 292 677  curveto
339 720 396 741 462 741  curveto
518 741 562 729 596 704  curveto
629 680 646 647 646 607  curveto
646 528 585 459 464 398  curveto
555 343 601 280 601 208  curveto
601 146 574 92 520 48  curveto
466 4 401 -18 325 -18  curveto
259 -18 208 -3 171 26  curveto
134 55 116 96 116 149  curveto
116 239 177 319 301 387  curveto
closepath
340 359 moveto
325 367 lineto
248 315 209 245 209 157  curveto
209 60 250 12 333 12  curveto
379 12 418 28 450 61  curveto
482 93 499 132 499 179  curveto
499 212 487 242 464 268  curveto
441 294 400 324 340 359  curveto
closepath
436 417 moveto
520 456 562 515 562 594  curveto
562 672 525 710 451 710  curveto
413 710 380 696 354 668  curveto
328 640 314 605 314 564  curveto
314 514 355 465 436 417  curveto
closepath
fill
		} def

	/nine
		{
513 321 moveto
452 275 394 252 336 252  curveto
282 252 238 269 205 301  curveto
171 334 154 376 154 428  curveto
154 510 183 583 241 646  curveto
299 709 365 740 441 740  curveto
505 740 555 718 591 675  curveto
627 631 645 570 645 492  curveto
645 424 632 354 607 281  curveto
582 209 549 148 509 99  curveto
443 21 365 -18 273 -18  curveto
216 -18 160 -5 104 19  curveto
127 135 lineto
176 135 lineto
174 123 lineto
169 86 lineto
168 77 167 71 167 67  curveto
167 54 179 42 203 30  curveto
227 18 251 12 277 12  curveto
331 12 378 39 420 94  curveto
461 148 492 224 513 321  curveto
closepath
548 522 moveto
548 646 508 708 429 708  curveto
382 708 340 680 304 624  curveto
268 568 250 503 250 429  curveto
250 337 288 292 363 292  curveto
420 292 465 312 498 354  curveto
532 395 548 451 548 522  curveto
closepath
fill
		} def

	/colon
		{
72 0 moveto
96 120 lineto
216 120 lineto
192 0 lineto
72 0 lineto
closepath
153 409 moveto
177 530 lineto
298 530 lineto
274 409 lineto
153 409 lineto
closepath
fill
		} def

	/semicolon
		{
117 0 moveto
72 0 lineto
96 120 lineto
216 120 lineto
194 11 lineto
172 -100 121 -156 41 -156  curveto
46 -126 lineto
79 -126 98 -105 106 -62  curveto
110 -35 lineto
117 0 lineto
closepath
153 409 moveto
177 530 lineto
297 530 lineto
273 409 lineto
153 409 lineto
closepath
fill
		} def

	/less
		{
686 0 moveto
166 289 lineto
801 578 lineto
791 524 lineto
274 289 lineto
274 288 lineto
697 53 lineto
686 0 lineto
closepath
fill
		} def

	/equal
		{
143 174 moveto
152 222 lineto
730 222 lineto
721 174 lineto
143 174 lineto
closepath
179 355 moveto
188 403 lineto
767 403 lineto
757 355 lineto
179 355 lineto
closepath
fill
		} def

	/greater
		{
108 0 moveto
119 53 lineto
635 288 lineto
635 289 lineto
212 524 lineto
223 578 lineto
744 289 lineto
108 0 lineto
closepath
fill
		} def

	/question
		{
147 0 moveto
167 96 lineto
263 96 lineto
244 0 lineto
147 0 lineto
closepath
186 192 moveto
188 201 lineto
194 233 204 259 215 278  curveto
227 296 249 322 283 355  curveto
324 396 lineto
401 473 440 542 440 604  curveto
440 635 430 661 410 680  curveto
390 700 364 709 332 709  curveto
267 709 230 687 219 642  curveto
215 622 211 605 208 593  curveto
205 584 lineto
157 584 lineto
182 707 lineto
248 729 309 740 362 740  curveto
415 740 459 728 492 703  curveto
526 678 542 646 542 606  curveto
542 574 534 546 517 522  curveto
501 499 468 470 418 434  curveto
384 409 lineto
324 365 289 293 279 192  curveto
186 192 lineto
closepath
fill
		} def

	/at
		{
609 21 moveto
552 -4 496 -18 441 -18  curveto
347 -18 269 10 208 66  curveto
146 123 116 194 116 281  curveto
116 390 156 490 236 583  curveto
327 688 441 740 577 740  curveto
669 740 746 711 808 653  curveto
870 594 900 521 900 434  curveto
900 356 876 288 827 230  curveto
779 173 722 144 656 144  curveto
600 144 571 166 571 210  curveto
571 222 573 235 576 247  curveto
587 289 lineto
592 310 lineto
582 310 lineto
517 199 454 144 392 144  curveto
333 144 303 182 303 257  curveto
303 335 330 407 384 473  curveto
438 539 497 572 561 572  curveto
575 572 588 570 601 567  curveto
640 556 lineto
642 555 646 554 653 553  curveto
699 553 lineto
643 273 lineto
639 254 638 239 638 226  curveto
638 195 654 180 687 180  curveto
733 180 774 207 813 262  curveto
851 316 870 375 870 439  curveto
870 516 841 580 784 632  curveto
727 684 656 710 572 710  curveto
463 710 365 667 277 580  curveto
190 493 146 396 146 287  curveto
146 207 174 141 229 89  curveto
284 38 355 12 440 12  curveto
492 12 544 24 599 48  curveto
609 21 lineto
closepath
596 399 moveto
617 502 lineto
590 516 561 523 528 523  curveto
484 523 448 500 418 454  curveto
389 408 374 350 374 281  curveto
374 230 389 204 419 204  curveto
467 204 526 269 596 399  curveto
closepath
fill
		} def

	/A
		{
0 0 moveto
5 30 lineto
15 30 lineto
39 31 lineto
60 32 79 47 97 75  curveto
129 124 lineto
507 734 lineto
542 734 lineto
658 133 lineto
666 89 675 61 683 49  curveto
692 38 709 32 734 30  curveto
747 30 lineto
740 0 lineto
469 0 lineto
476 30 lineto
491 30 lineto
538 30 562 38 562 53  curveto
562 70 559 93 553 123  curveto
535 222 lineto
234 222 lineto
173 125 lineto
169 119 165 111 159 100  curveto
141 66 lineto
137 59 135 53 135 48  curveto
135 36 147 30 170 30  curveto
195 30 lineto
208 30 lineto
201 0 lineto
0 0 lineto
closepath
253 265 moveto
525 265 lineto
463 604 lineto
253 265 lineto
closepath
fill
		} def

	/B
		{
426 370 moveto
541 347 599 292 599 205  curveto
599 143 575 93 527 56  curveto
479 18 417 0 338 0  curveto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 622 240 646 240 666  curveto
240 680 227 688 202 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
397 722 lineto
482 722 544 712 581 690  curveto
619 669 638 635 638 587  curveto
638 537 619 492 580 453  curveto
542 413 491 386 426 370  curveto
closepath
287 358 moveto
238 129 lineto
231 86 lineto
227 68 lineto
229 46 252 35 295 35  curveto
352 35 400 52 437 86  curveto
475 121 494 164 494 215  curveto
494 259 478 294 445 320  curveto
413 345 369 358 313 358  curveto
287 358 lineto
closepath
292 391 moveto
319 391 lineto
386 391 439 408 478 442  curveto
517 476 536 522 536 582  curveto
536 621 524 649 499 665  curveto
474 681 432 689 372 689  curveto
352 689 lineto
292 391 lineto
closepath
fill
		} def

	/C
		{
647 43 moveto
548 2 455 -18 370 -18  curveto
290 -18 227 6 180 55  curveto
134 104 111 172 111 257  curveto
111 393 155 507 244 601  curveto
333 694 443 740 573 740  curveto
637 740 704 732 776 716  curveto
747 572 lineto
687 572 lineto
688 582 lineto
690 592 691 602 693 611  curveto
695 621 696 630 696 636  curveto
696 657 684 674 659 687  curveto
634 701 603 708 566 708  curveto
483 708 414 677 357 615  curveto
265 516 219 397 219 257  curveto
219 189 238 135 275 96  curveto
313 57 364 37 429 37  curveto
485 37 561 53 656 85  curveto
647 43 lineto
closepath
fill
		} def

	/D
		{
23 0 moveto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 622 240 646 240 666  curveto
240 680 227 688 202 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
391 722 lineto
454 723 lineto
503 724 lineto
522 724 lineto
708 724 800 639 800 471  curveto
800 334 759 222 676 133  curveto
594 44 489 0 362 0  curveto
23 0 lineto
closepath
353 689 moveto
241 126 lineto
235 88 lineto
232 71 lineto
235 45 263 32 316 32  curveto
450 32 549 84 614 187  curveto
667 270 693 364 693 470  curveto
693 551 672 608 630 641  curveto
587 673 513 689 408 689  curveto
353 689 lineto
closepath
fill
		} def

	/E
		{
544 0 moveto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 622 240 646 240 666  curveto
240 680 227 688 202 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
661 722 lineto
636 596 lineto
581 596 lineto
583 605 lineto
588 646 lineto
592 664 lineto
589 677 562 683 510 683  curveto
352 683 lineto
294 394 lineto
427 394 lineto
458 396 lineto
479 396 492 405 497 423  curveto
498 429 500 437 502 445  curveto
505 454 lineto
544 454 lineto
512 295 lineto
473 295 lineto
475 304 lineto
477 319 478 330 478 336  curveto
478 346 470 352 454 353  curveto
419 355 lineto
287 355 lineto
241 126 lineto
237 108 235 90 235 73  curveto
235 60 240 51 249 47  curveto
257 43 277 42 307 42  curveto
384 42 lineto
431 42 462 44 476 48  curveto
490 52 499 63 503 79  curveto
514 123 lineto
516 132 lineto
570 132 lineto
544 0 lineto
closepath
fill
		} def

	/F
		{
286 350 moveto
241 126 lineto
236 104 234 83 234 63  curveto
234 50 237 42 242 38  curveto
248 35 260 33 278 33  curveto
279 33 291 32 315 30  curveto
324 30 lineto
318 0 lineto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 622 240 646 240 666  curveto
240 680 227 688 202 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
661 722 lineto
636 596 lineto
581 596 lineto
583 605 lineto
588 646 lineto
592 664 lineto
589 677 562 683 510 683  curveto
352 683 lineto
293 389 lineto
426 389 lineto
457 390 lineto
471 390 481 392 485 395  curveto
489 398 493 406 496 418  curveto
496 420 498 428 501 440  curveto
504 449 lineto
543 449 lineto
511 290 lineto
472 290 lineto
474 299 lineto
476 314 477 325 477 331  curveto
477 341 469 347 453 348  curveto
418 350 lineto
286 350 lineto
closepath
fill
		} def

	/G
		{
646 32 moveto
540 -1 453 -18 382 -18  curveto
296 -18 230 5 182 53  curveto
135 101 111 169 111 256  curveto
111 393 155 508 244 601  curveto
332 694 441 741 571 741  curveto
639 741 708 732 776 716  curveto
743 584 lineto
689 584 lineto
690 594 lineto
695 623 lineto
697 634 698 643 698 651  curveto
698 688 654 707 566 707  curveto
470 707 388 662 321 572  curveto
253 483 219 374 219 247  curveto
219 177 237 122 274 83  curveto
310 45 361 25 427 25  curveto
463 25 503 33 546 48  curveto
573 184 lineto
578 211 581 234 581 253  curveto
581 268 569 276 543 277  curveto
511 279 lineto
502 280 lineto
508 310 lineto
788 310 lineto
782 280 lineto
773 279 lineto
726 276 701 269 695 257  curveto
684 229 676 205 672 184  curveto
646 32 lineto
closepath
fill
		} def

	/H
		{
286 354 moveto
241 126 lineto
236 99 233 76 233 57  curveto
233 42 245 34 271 33  curveto
303 30 lineto
312 30 lineto
306 0 lineto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 623 240 646 240 666  curveto
240 680 228 688 203 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
450 722 lineto
444 692 lineto
435 691 lineto
401 689 lineto
380 688 366 681 358 670  curveto
350 659 342 634 334 596  curveto
294 393 lineto
638 393 lineto
678 596 lineto
683 623 686 646 686 666  curveto
686 680 673 688 648 689  curveto
616 691 lineto
607 692 lineto
613 722 lineto
896 722 lineto
890 692 lineto
881 691 lineto
848 689 lineto
826 688 812 681 804 670  curveto
796 659 788 634 781 596  curveto
687 126 lineto
682 99 679 76 679 57  curveto
679 42 692 34 717 33  curveto
750 30 lineto
758 30 lineto
752 0 lineto
469 0 lineto
475 30 lineto
484 30 lineto
518 33 lineto
539 34 553 40 561 52  curveto
569 63 577 88 585 126  curveto
630 354 lineto
286 354 lineto
closepath
fill
		} def

	/I
		{
310 30 moveto
304 0 lineto
21 0 lineto
26 30 lineto
36 30 lineto
69 33 lineto
90 34 105 40 113 52  curveto
121 63 128 88 136 126  curveto
229 596 lineto
235 622 237 646 237 666  curveto
237 680 225 688 200 689  curveto
167 691 lineto
158 692 lineto
165 722 lineto
447 722 lineto
441 692 lineto
432 691 lineto
399 689 lineto
378 688 363 681 355 670  curveto
347 659 340 634 332 596  curveto
238 126 lineto
233 99 230 76 230 57  curveto
230 42 243 34 268 33  curveto
301 30 lineto
310 30 lineto
closepath
fill
		} def

	/J
		{
-21 -134 moveto
0 -22 lineto
58 -22 lineto
56 -34 lineto
54 -53 52 -67 52 -76  curveto
52 -97 70 -107 104 -107  curveto
159 -107 195 -70 211 3  curveto
225 72 lineto
329 596 lineto
334 623 337 646 337 666  curveto
337 680 324 688 299 689  curveto
267 691 lineto
258 692 lineto
264 722 lineto
547 722 lineto
541 692 lineto
532 691 lineto
498 689 lineto
477 688 463 681 455 670  curveto
447 659 439 634 432 596  curveto
339 131 lineto
319 30 288 -40 246 -82  curveto
203 -123 141 -144 60 -144  curveto
34 -144 7 -141 -21 -134  curveto
closepath
fill
		} def

	/K
		{
289 365 moveto
241 126 lineto
236 99 233 76 233 56  curveto
233 42 244 34 268 33  curveto
297 30 lineto
306 30 lineto
300 0 lineto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 622 240 646 240 666  curveto
240 680 227 688 202 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
450 722 lineto
444 692 lineto
435 691 lineto
401 689 lineto
380 688 366 681 358 670  curveto
350 659 342 634 334 596  curveto
289 368 lineto
553 596 lineto
571 611 585 625 597 638  curveto
616 660 628 673 633 677  curveto
637 680 639 682 639 684  curveto
639 689 631 692 615 692  curveto
576 692 lineto
564 692 lineto
570 722 lineto
780 722 lineto
773 692 lineto
765 691 lineto
744 691 lineto
723 691 704 683 685 667  curveto
602 592 lineto
380 404 lineto
572 124 lineto
608 69 lineto
624 45 649 33 684 30  curveto
693 30 lineto
687 0 lineto
421 0 lineto
427 30 lineto
437 30 lineto
466 30 lineto
485 30 495 35 495 44  curveto
495 48 488 61 475 83  curveto
449 127 lineto
289 365 lineto
closepath
fill
		} def

	/L
		{
553 0 moveto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 622 240 646 240 666  curveto
240 680 227 688 202 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
450 722 lineto
444 692 lineto
435 691 lineto
401 689 lineto
380 688 366 681 358 670  curveto
350 659 342 634 334 596  curveto
241 126 lineto
235 97 232 77 232 65  curveto
232 55 236 48 245 45  curveto
253 43 274 42 308 42  curveto
394 42 lineto
440 42 471 44 487 50  curveto
502 55 513 67 517 85  curveto
528 134 lineto
531 144 lineto
582 144 lineto
553 0 lineto
closepath
fill
		} def

	/M
		{
783 645 moveto
444 83 lineto
409 83 lineto
285 593 lineto
192 126 lineto
187 99 184 76 184 57  curveto
184 42 197 34 222 33  curveto
254 30 lineto
263 30 lineto
257 0 lineto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
91 34 103 37 109 42  curveto
116 47 121 59 126 78  curveto
139 126 lineto
234 596 lineto
240 622 242 645 242 666  curveto
242 680 230 688 205 689  curveto
172 691 lineto
163 692 lineto
169 722 lineto
353 722 lineto
478 206 lineto
793 722 lineto
984 722 lineto
978 692 lineto
969 691 lineto
936 689 lineto
914 688 900 681 892 670  curveto
884 659 876 634 869 596  curveto
775 126 lineto
770 99 767 76 767 57  curveto
767 42 780 34 805 33  curveto
837 30 lineto
846 30 lineto
840 0 lineto
565 0 lineto
571 30 lineto
580 30 lineto
614 33 lineto
635 34 649 40 657 52  curveto
665 63 673 88 681 126  curveto
783 645 lineto
closepath
fill
		} def

	/N
		{
651 -8 moveto
613 -8 lineto
277 593 lineto
184 126 lineto
179 99 176 76 176 57  curveto
176 42 188 34 213 33  curveto
246 30 lineto
255 30 lineto
249 0 lineto
22 0 lineto
28 30 lineto
38 30 lineto
71 33 lineto
92 34 107 40 114 52  curveto
122 63 130 88 138 126  curveto
231 596 lineto
236 623 239 646 239 666  curveto
239 680 227 688 202 689  curveto
169 691 lineto
160 692 lineto
166 722 lineto
318 722 lineto
638 146 lineto
727 596 lineto
732 623 735 646 735 666  curveto
735 680 722 688 697 689  curveto
665 691 lineto
656 692 lineto
662 722 lineto
887 722 lineto
881 692 lineto
872 691 lineto
838 689 lineto
817 688 803 681 795 670  curveto
787 659 779 634 771 596  curveto
651 -8 lineto
closepath
fill
		} def

	/O
		{
374 -18 moveto
293 -18 229 5 182 54  curveto
134 103 111 169 111 252  curveto
111 384 154 499 241 595  curveto
328 692 431 740 549 740  curveto
632 740 697 716 745 668  curveto
792 620 816 554 816 470  curveto
816 336 772 221 685 125  curveto
598 29 494 -18 374 -18  curveto
closepath
220 244 moveto
220 173 236 118 267 78  curveto
299 38 343 18 398 18  curveto
479 18 550 63 614 155  curveto
678 247 709 351 709 466  curveto
709 540 693 598 661 641  curveto
629 685 586 707 532 707  curveto
449 707 376 660 314 567  curveto
251 475 220 367 220 244  curveto
closepath
fill
		} def

	/P
		{
167 722 moveto
327 722 lineto
442 725 lineto
491 726 lineto
606 726 663 677 663 580  curveto
663 498 632 431 569 378  curveto
507 326 427 300 330 300  curveto
274 300 lineto
240 126 lineto
235 99 232 76 232 57  curveto
232 42 245 34 270 33  curveto
302 30 lineto
323 30 lineto
317 0 lineto
23 0 lineto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
232 596 lineto
237 622 240 646 240 666  curveto
240 680 227 688 202 689  curveto
170 691 lineto
161 692 lineto
167 722 lineto
closepath
281 334 moveto
323 334 lineto
390 334 446 357 489 402  curveto
533 447 555 505 555 576  curveto
555 652 509 689 417 689  curveto
352 689 lineto
281 334 lineto
closepath
fill
		} def

	/Q
		{
920 -95 moveto
840 -184 lineto
824 -188 810 -190 799 -190  curveto
736 -190 672 -173 605 -140  curveto
539 -107 485 -65 443 -12  curveto
426 -15 408 -17 391 -17  curveto
302 -17 234 6 187 52  curveto
139 98 116 164 116 250  curveto
116 382 159 497 246 594  curveto
333 692 435 740 553 740  curveto
636 740 700 716 747 669  curveto
793 621 816 554 816 469  curveto
816 358 784 257 721 168  curveto
657 78 577 21 481 -3  curveto
566 -76 670 -112 792 -112  curveto
836 -112 879 -106 920 -95  curveto
closepath
222 244 moveto
222 174 238 118 270 78  curveto
301 38 345 18 401 18  curveto
480 18 552 63 616 155  curveto
680 247 712 349 712 463  curveto
712 538 696 597 664 641  curveto
632 685 589 707 535 707  curveto
452 707 379 660 316 567  curveto
253 475 222 367 222 244  curveto
closepath
fill
		} def

	/R
		{
520 0 moveto
364 340 lineto
283 340 lineto
240 126 lineto
235 99 232 76 232 57  curveto
232 42 245 34 270 33  curveto
303 30 lineto
312 30 lineto
306 0 lineto
22 0 lineto
28 30 lineto
38 30 lineto
71 33 lineto
92 34 107 40 114 52  curveto
122 63 130 88 138 126  curveto
231 596 lineto
237 622 239 646 239 666  curveto
239 680 227 688 202 689  curveto
169 691 lineto
160 692 lineto
167 722 lineto
337 722 lineto
403 723 lineto
478 726 lineto
601 726 663 678 663 583  curveto
663 533 645 488 609 446  curveto
573 405 525 373 463 351  curveto
574 124 lineto
609 63 lineto
620 44 636 33 656 32  curveto
677 30 lineto
686 30 lineto
680 0 lineto
520 0 lineto
closepath
289 372 moveto
330 372 lineto
398 372 453 390 493 428  curveto
534 466 555 516 555 578  curveto
555 652 508 689 415 689  curveto
353 689 lineto
289 372 lineto
closepath
fill
		} def

	/S
		{
59 17 moveto
87 156 lineto
141 156 lineto
140 147 lineto
136 121 134 105 132 99  curveto
130 90 129 85 129 83  curveto
129 64 144 48 172 35  curveto
201 22 236 15 277 15  curveto
318 15 354 31 384 62  curveto
414 93 429 130 429 172  curveto
429 221 400 269 341 316  curveto
295 353 lineto
219 415 181 475 181 534  curveto
181 593 204 643 252 682  curveto
299 721 359 740 430 740  curveto
486 740 551 728 626 705  curveto
597 560 lineto
543 560 lineto
545 574 lineto
551 629 lineto
553 647 lineto
552 664 539 679 513 691  curveto
488 703 458 708 422 708  curveto
382 708 348 695 321 668  curveto
293 641 279 607 279 568  curveto
279 520 311 470 374 419  curveto
423 380 lineto
497 320 534 259 534 197  curveto
534 133 508 81 457 41  curveto
405 1 338 -18 255 -18  curveto
204 -18 145 -8 77 11  curveto
59 17 lineto
closepath
fill
		} def

	/T
		{
416 683 moveto
300 683 lineto
250 681 lineto
232 681 221 678 215 674  curveto
209 669 205 659 202 643  curveto
198 625 195 610 192 600  curveto
189 590 lineto
138 590 lineto
164 722 lineto
785 722 lineto
759 590 lineto
708 590 lineto
709 600 lineto
711 611 713 625 716 643  curveto
718 650 718 657 718 665  curveto
718 675 707 681 684 681  curveto
634 683 lineto
518 683 lineto
407 126 lineto
402 99 399 76 399 57  curveto
399 42 412 34 437 33  curveto
470 30 lineto
491 30 lineto
485 0 lineto
177 0 lineto
184 30 lineto
205 30 lineto
230 30 252 33 269 38  curveto
282 42 294 71 305 126  curveto
416 683 lineto
closepath
fill
		} def

	/U
		{
151 692 moveto
157 722 lineto
440 722 lineto
435 692 lineto
425 691 lineto
392 689 lineto
371 688 356 681 348 670  curveto
340 659 333 634 325 596  curveto
253 235 lineto
248 210 246 186 246 163  curveto
246 117 259 81 285 55  curveto
311 29 347 16 393 16  curveto
514 16 591 103 626 277  curveto
689 596 lineto
695 622 698 646 698 666  curveto
698 680 685 688 660 689  curveto
627 691 lineto
619 692 lineto
625 722 lineto
856 722 lineto
850 692 lineto
841 691 lineto
807 689 lineto
786 688 772 681 764 670  curveto
756 659 748 634 740 596  curveto
675 266 lineto
638 76 539 -18 380 -18  curveto
308 -18 251 -1 209 32  curveto
168 66 147 113 147 172  curveto
147 201 151 233 158 270  curveto
223 596 lineto
228 623 230 646 230 666  curveto
230 680 218 688 193 689  curveto
160 691 lineto
151 692 lineto
closepath
fill
		} def

	/V
		{
307 -9 moveto
190 595 lineto
178 643 lineto
173 664 168 677 162 682  curveto
156 687 143 690 124 691  curveto
115 692 lineto
121 722 lineto
371 722 lineto
365 692 lineto
356 692 lineto
328 691 lineto
300 691 287 680 287 658  curveto
287 656 287 653 288 650  curveto
292 622 lineto
297 588 lineto
386 117 lineto
669 593 lineto
673 599 677 608 683 620  curveto
691 636 698 648 702 657  curveto
706 664 708 669 708 674  curveto
708 686 697 692 675 692  curveto
648 692 lineto
639 692 lineto
646 722 lineto
826 722 lineto
820 692 lineto
811 691 lineto
789 690 775 688 769 684  curveto
762 681 755 671 745 655  curveto
700 579 lineto
350 -9 lineto
307 -9 lineto
closepath
fill
		} def

	/W
		{
221 -9 moveto
189 595 lineto
186 647 lineto
184 673 175 687 159 690  curveto
128 691 lineto
120 692 lineto
125 722 lineto
378 722 lineto
373 692 lineto
364 692 lineto
327 692 304 689 295 684  curveto
287 678 282 662 282 638  curveto
285 593 lineto
308 167 lineto
581 716 lineto
627 716 lineto
667 165 lineto
878 590 lineto
887 609 893 621 895 625  curveto
909 659 lineto
911 665 912 669 912 672  curveto
912 685 899 691 874 691  curveto
845 692 lineto
836 692 lineto
842 722 lineto
1042 722 lineto
1035 692 lineto
1026 691 lineto
998 690 lineto
983 689 972 687 967 682  curveto
961 678 954 666 946 649  curveto
916 590 lineto
617 -9 lineto
583 -9 lineto
544 565 lineto
259 -9 lineto
221 -9 lineto
closepath
fill
		} def

	/X
		{
-23 0 moveto
-17 30 lineto
-8 30 lineto
18 32 35 34 42 38  curveto
50 42 62 52 80 70  curveto
132 123 lineto
342 356 lineto
246 597 lineto
221 653 lineto
211 677 196 689 177 690  curveto
150 691 lineto
141 692 lineto
147 722 lineto
409 722 lineto
403 692 lineto
394 692 lineto
371 691 lineto
344 691 331 682 331 663  curveto
331 654 334 642 341 627  curveto
347 615 351 604 355 595  curveto
423 428 lineto
574 598 lineto
582 606 591 618 602 634  curveto
614 651 624 664 629 670  curveto
633 675 635 678 635 680  curveto
635 687 625 691 606 691  curveto
587 692 lineto
578 692 lineto
584 722 lineto
771 722 lineto
765 692 lineto
755 691 lineto
732 690 lineto
710 689 674 659 622 600  curveto
442 398 lineto
556 124 lineto
574 79 587 53 594 45  curveto
602 37 618 32 642 30  curveto
651 30 lineto
645 0 lineto
380 0 lineto
386 30 lineto
395 30 lineto
423 30 lineto
453 30 467 38 467 54  curveto
467 61 463 74 456 93  curveto
443 125 lineto
363 323 lineto
186 126 lineto
146 82 126 55 126 46  curveto
126 35 137 30 160 30  curveto
181 30 lineto
190 30 lineto
184 0 lineto
-23 0 lineto
closepath
fill
		} def

	/Y
		{
340 325 moveto
234 590 lineto
230 600 223 618 213 646  curveto
207 665 200 677 192 682  curveto
185 687 170 690 146 691  curveto
137 692 lineto
143 722 lineto
405 722 lineto
399 692 lineto
384 691 lineto
360 690 lineto
335 689 323 680 323 665  curveto
323 653 330 628 345 590  curveto
431 366 lineto
613 589 lineto
645 628 lineto
663 652 672 667 672 675  curveto
672 686 661 691 640 691  curveto
634 691 628 691 622 691  curveto
613 692 lineto
619 722 lineto
802 722 lineto
796 692 lineto
787 691 lineto
761 690 lineto
745 689 728 678 712 658  curveto
654 587 lineto
442 326 lineto
403 126 lineto
398 98 395 75 395 57  curveto
395 42 408 34 433 33  curveto
465 30 lineto
474 30 lineto
468 0 lineto
185 0 lineto
191 30 lineto
200 30 lineto
234 33 lineto
256 34 271 41 279 53  curveto
286 65 295 95 304 144  curveto
340 325 lineto
closepath
fill
		} def

	/Z
		{
55 0 moveto
63 39 lineto
579 683 lineto
359 683 lineto
305 681 lineto
288 681 276 679 271 675  curveto
265 671 260 661 257 645  curveto
251 619 247 601 244 590  curveto
241 578 lineto
187 578 lineto
216 722 lineto
702 722 lineto
695 689 lineto
181 45 lineto
412 45 lineto
493 48 lineto
514 48 527 59 532 80  curveto
544 129 lineto
546 138 lineto
601 138 lineto
573 0 lineto
55 0 lineto
closepath
fill
		} def

	/bracketleft
		{
46 -144 moveto
229 771 lineto
421 771 lineto
416 740 lineto
307 740 lineto
137 -114 lineto
245 -114 lineto
239 -144 lineto
46 -144 lineto
closepath
fill
		} def

	/backslash
		{
387 -144 moveto
336 -144 lineto
252 723 lineto
302 723 lineto
387 -144 lineto
closepath
fill
		} def

	/bracketright
		{
388 771 moveto
206 -144 lineto
13 -144 lineto
19 -114 lineto
127 -114 lineto
298 740 lineto
189 740 lineto
195 771 lineto
388 771 lineto
closepath
fill
		} def

	/asciicircum
		{
77 192 moveto
448 722 lineto
607 192 lineto
550 192 lineto
429 600 lineto
142 192 lineto
77 192 lineto
closepath
fill
		} def

	/underscore
		{
35 -63 moveto
48 0 lineto
452 0 lineto
439 -63 lineto
35 -63 lineto
closepath
fill
		} def

	/quoteleft
		{
513 626 moveto
467 626 lineto
311 783 lineto
434 783 lineto
513 626 lineto
closepath
fill
		} def

	/a
		{
413 0 moveto
457 222 lineto
417 151 371 94 322 51  curveto
272 9 225 -12 182 -12  curveto
151 -12 125 -1 106 21  curveto
88 43 78 72 78 109  curveto
78 215 115 314 190 405  curveto
264 496 345 542 432 542  curveto
449 542 473 539 503 533  curveto
518 530 lineto
614 530 lineto
534 126 lineto
529 99 526 76 526 57  curveto
526 42 538 34 563 33  curveto
596 30 lineto
605 30 lineto
599 0 lineto
413 0 lineto
closepath
472 295 moveto
506 465 lineto
469 485 429 495 386 495  curveto
338 495 298 472 268 428  curveto
244 393 223 346 206 287  curveto
189 229 180 176 180 129  curveto
180 82 195 59 226 59  curveto
289 59 371 138 472 295  curveto
closepath
fill
		} def

	/b
		{
87 -12 moveto
218 644 lineto
223 671 226 694 226 713  curveto
226 728 214 736 188 737  curveto
156 740 lineto
147 740 lineto
153 771 lineto
339 771 lineto
247 307 lineto
287 378 332 435 382 478  curveto
432 521 479 542 522 542  curveto
554 542 579 531 598 509  curveto
617 487 626 457 626 419  curveto
626 314 589 216 514 124  curveto
440 33 360 -12 274 -12  curveto
232 -12 193 -4 158 12  curveto
87 -12 lineto
closepath
232 233 moveto
198 64 lineto
237 44 278 35 319 35  curveto
367 35 406 57 437 102  curveto
460 136 481 183 498 242  curveto
515 301 523 354 523 401  curveto
523 447 508 470 479 470  curveto
415 470 333 391 232 233  curveto
closepath
fill
		} def

	/c
		{
455 46 moveto
384 7 314 -12 246 -12  curveto
196 -12 156 4 127 36  curveto
98 69 84 114 84 172  curveto
84 268 118 354 185 429  curveto
252 504 329 542 416 542  curveto
455 542 496 534 538 519  curveto
511 385 lineto
463 385 lineto
464 394 lineto
465 401 467 412 470 426  curveto
471 433 471 438 471 443  curveto
471 481 438 500 372 500  curveto
319 500 275 471 239 412  curveto
204 353 186 279 186 191  curveto
186 92 227 42 310 42  curveto
345 42 396 57 463 87  curveto
455 46 lineto
closepath
fill
		} def

	/d
		{
413 0 moveto
457 222 lineto
417 151 371 94 322 51  curveto
272 9 225 -12 182 -12  curveto
151 -12 125 -1 106 21  curveto
88 43 78 72 78 109  curveto
78 215 115 314 190 405  curveto
264 496 345 542 432 542  curveto
449 542 473 539 503 533  curveto
518 530 lineto
541 644 lineto
546 671 549 694 549 714  curveto
549 728 536 736 511 737  curveto
479 740 lineto
470 740 lineto
476 771 lineto
662 771 lineto
534 126 lineto
529 99 526 76 526 57  curveto
526 42 538 34 563 33  curveto
596 30 lineto
605 30 lineto
599 0 lineto
413 0 lineto
closepath
472 295 moveto
507 467 lineto
469 486 429 496 387 496  curveto
339 496 300 474 269 429  curveto
245 393 224 346 206 288  curveto
189 229 180 176 180 129  curveto
180 82 195 59 226 59  curveto
289 59 371 138 472 295  curveto
closepath
fill
		} def

	/e
		{
504 84 moveto
407 20 321 -12 247 -12  curveto
197 -12 158 4 128 38  curveto
99 71 84 116 84 173  curveto
84 268 117 353 183 428  curveto
250 504 324 542 408 542  curveto
440 542 466 532 487 513  curveto
507 494 518 470 518 441  curveto
518 375 487 321 427 279  curveto
367 237 286 213 185 208  curveto
184 184 lineto
184 90 223 43 302 43  curveto
367 43 437 71 513 127  curveto
504 84 lineto
closepath
187 237 moveto
261 242 319 261 361 294  curveto
403 327 424 369 424 421  curveto
424 473 403 499 360 499  curveto
317 499 279 474 247 425  curveto
214 376 194 313 187 237  curveto
closepath
fill
		} def

	/f
		{
70 -192 moveto
206 490 lineto
134 490 lineto
142 530 lineto
214 530 lineto
222 556 lineto
271 707 349 783 458 783  curveto
497 783 531 777 562 766  curveto
537 638 lineto
489 638 lineto
490 647 lineto
492 664 494 677 496 687  curveto
497 695 498 703 498 709  curveto
498 736 476 750 431 750  curveto
400 750 377 737 362 711  curveto
346 685 331 635 316 561  curveto
310 530 lineto
460 530 lineto
453 490 lineto
302 490 lineto
167 -192 lineto
70 -192 lineto
closepath
fill
		} def

	/g
		{
81 -178 moveto
45 -41 lineto
134 -120 218 -160 297 -160  curveto
331 -160 356 -146 374 -117  curveto
391 -89 408 -34 424 47  curveto
464 250 lineto
424 180 379 124 328 81  curveto
277 38 231 17 188 17  curveto
158 17 133 27 114 49  curveto
95 71 85 98 85 132  curveto
85 181 98 234 123 291  curveto
149 349 182 398 222 440  curveto
287 508 357 542 434 542  curveto
451 542 475 539 505 533  curveto
520 530 lineto
617 530 lineto
542 161 lineto
531 105 lineto
507 -7 472 -87 423 -134  curveto
375 -181 305 -205 213 -205  curveto
176 -205 132 -196 81 -178  curveto
closepath
481 328 moveto
508 466 lineto
471 484 433 494 393 494  curveto
343 494 304 474 274 434  curveto
217 356 188 263 188 154  curveto
188 110 203 88 233 88  curveto
294 88 371 160 465 303  curveto
481 328 lineto
closepath
fill
		} def

	/h
		{
102 0 moveto
230 644 lineto
236 671 238 694 238 714  curveto
238 728 226 736 201 737  curveto
168 740 lineto
159 740 lineto
165 771 lineto
352 771 lineto
261 313 lineto
303 383 348 439 398 480  curveto
447 521 493 542 536 542  curveto
593 542 621 511 621 450  curveto
621 435 618 412 612 381  curveto
561 126 lineto
556 99 553 76 553 57  curveto
553 42 566 34 591 33  curveto
624 30 lineto
632 30 lineto
626 0 lineto
439 0 lineto
518 395 lineto
521 412 523 425 523 436  curveto
523 458 511 469 488 469  curveto
436 469 361 400 261 260  curveto
247 240 lineto
198 0 lineto
102 0 lineto
closepath
fill
		} def

	/i
		{
102 0 moveto
183 403 lineto
188 430 190 453 190 473  curveto
190 487 178 495 153 497  curveto
120 499 lineto
111 500 lineto
117 530 lineto
304 530 lineto
224 126 lineto
218 99 216 76 216 57  curveto
216 42 228 34 253 33  curveto
286 30 lineto
295 30 lineto
289 0 lineto
102 0 lineto
closepath
227 626 moveto
246 722 lineto
342 722 lineto
323 626 lineto
227 626 lineto
closepath
fill
		} def

	/j
		{
-79 -186 moveto
-53 -57 lineto
-4 -57 lineto
-6 -66 lineto
-10 -100 lineto
-12 -112 -13 -121 -13 -127  curveto
-13 -154 8 -168 52 -168  curveto
87 -168 112 -157 126 -135  curveto
140 -114 155 -65 170 9  curveto
249 403 lineto
254 430 257 453 257 473  curveto
257 487 244 495 219 497  curveto
187 499 lineto
178 500 lineto
184 530 lineto
370 530 lineto
279 69 lineto
242 -113 156 -205 20 -205  curveto
-9 -205 -42 -198 -79 -186  curveto
closepath
293 626 moveto
312 722 lineto
409 722 lineto
390 626 lineto
293 626 lineto
closepath
fill
		} def

	/k
		{
90 0 moveto
218 644 lineto
223 671 226 694 226 714  curveto
226 728 214 736 188 737  curveto
156 740 lineto
147 740 lineto
153 771 lineto
340 771 lineto
245 295 lineto
252 295 lineto
411 376 491 445 491 500  curveto
491 512 486 522 476 530  curveto
573 536 lineto
578 527 580 519 580 512  curveto
580 463 498 396 333 309  curveto
398 201 457 118 509 60  curveto
524 42 549 32 583 31  curveto
594 30 lineto
588 0 lineto
427 0 lineto
362 78 303 169 248 273  curveto
241 273 lineto
186 0 lineto
90 0 lineto
closepath
fill
		} def

	/l
		{
90 0 moveto
218 644 lineto
223 671 226 694 226 714  curveto
226 728 214 736 188 737  curveto
156 740 lineto
147 740 lineto
153 771 lineto
340 771 lineto
211 126 lineto
206 99 204 76 204 57  curveto
204 42 216 34 241 33  curveto
274 30 lineto
283 30 lineto
277 0 lineto
90 0 lineto
closepath
fill
		} def

	/m
		{
102 0 moveto
183 403 lineto
188 430 190 453 190 473  curveto
190 487 178 495 153 497  curveto
120 499 lineto
111 500 lineto
117 530 lineto
304 530 lineto
261 313 lineto
358 465 447 542 528 542  curveto
581 542 608 511 608 451  curveto
608 439 606 426 604 413  curveto
597 380 lineto
583 313 lineto
686 466 776 542 854 542  curveto
906 542 933 509 933 444  curveto
933 429 930 406 924 377  curveto
874 126 lineto
869 99 866 76 866 57  curveto
866 42 879 34 904 33  curveto
936 30 lineto
945 30 lineto
939 0 lineto
752 0 lineto
833 406 lineto
836 417 837 427 837 433  curveto
837 458 828 470 811 470  curveto
784 470 747 447 698 401  curveto
650 355 608 303 574 246  curveto
524 0 lineto
427 0 lineto
508 406 lineto
511 418 512 427 512 433  curveto
512 458 503 470 485 470  curveto
459 470 421 447 373 401  curveto
325 355 283 303 247 243  curveto
198 0 lineto
102 0 lineto
closepath
fill
		} def

	/n
		{
102 0 moveto
183 403 lineto
188 430 190 453 190 473  curveto
190 487 178 495 153 497  curveto
120 499 lineto
111 500 lineto
117 530 lineto
304 530 lineto
261 313 lineto
303 383 348 439 398 480  curveto
447 521 493 542 536 542  curveto
593 542 621 511 621 450  curveto
621 435 618 412 612 381  curveto
561 126 lineto
556 99 553 76 553 57  curveto
553 42 566 34 591 33  curveto
624 30 lineto
632 30 lineto
626 0 lineto
439 0 lineto
518 395 lineto
521 412 523 425 523 436  curveto
523 458 511 469 488 469  curveto
436 469 361 400 261 260  curveto
247 240 lineto
198 0 lineto
102 0 lineto
closepath
fill
		} def

	/o
		{
256 -12 moveto
143 -12 86 48 86 170  curveto
86 268 119 355 184 429  curveto
249 504 325 542 410 542  curveto
524 542 582 481 582 359  curveto
582 261 549 174 483 100  curveto
418 25 342 -12 256 -12  curveto
closepath
283 24 moveto
333 24 378 59 417 129  curveto
456 199 475 280 475 372  curveto
475 460 445 504 386 504  curveto
335 504 290 469 250 399  curveto
211 329 192 249 192 157  curveto
192 69 222 24 283 24  curveto
closepath
fill
		} def

	/p
		{
63 -192 moveto
182 403 lineto
187 430 190 453 190 473  curveto
190 487 177 495 152 497  curveto
120 499 lineto
111 500 lineto
117 530 lineto
304 530 lineto
259 307 lineto
299 378 344 435 394 478  curveto
444 521 491 542 534 542  curveto
566 542 591 531 610 509  curveto
629 487 638 457 638 420  curveto
638 313 601 215 526 124  curveto
451 33 371 -12 284 -12  curveto
267 -12 243 -9 213 -2  curveto
198 0 lineto
160 -192 lineto
63 -192 lineto
closepath
245 233 moveto
210 64 lineto
250 44 290 35 332 35  curveto
379 35 418 57 449 102  curveto
472 136 493 183 510 242  curveto
527 301 536 354 536 400  curveto
536 447 521 470 491 470  curveto
427 470 345 391 245 233  curveto
closepath
fill
		} def

	/q
		{
374 -192 moveto
457 222 lineto
417 151 371 94 322 51  curveto
272 9 225 -12 182 -12  curveto
151 -12 125 -1 106 21  curveto
88 43 78 72 78 109  curveto
78 215 115 314 190 405  curveto
264 496 345 542 432 542  curveto
449 542 473 539 503 533  curveto
518 530 lineto
614 530 lineto
471 -192 lineto
374 -192 lineto
closepath
472 295 moveto
507 467 lineto
469 486 429 496 387 496  curveto
339 496 300 474 269 429  curveto
245 393 224 346 206 288  curveto
189 229 180 176 180 129  curveto
180 82 195 59 226 59  curveto
289 59 371 138 472 295  curveto
closepath
fill
		} def

	/r
		{
102 0 moveto
183 403 lineto
188 430 190 453 190 473  curveto
190 487 178 495 153 497  curveto
120 499 lineto
111 500 lineto
117 530 lineto
304 530 lineto
261 313 lineto
355 466 445 542 532 542  curveto
540 542 548 541 556 538  curveto
515 427 lineto
500 434 485 437 471 437  curveto
409 437 334 374 248 247  curveto
198 0 lineto
102 0 lineto
closepath
fill
		} def

	/s
		{
48 29 moveto
72 150 lineto
121 150 lineto
120 141 lineto
116 111 lineto
114 100 113 91 113 85  curveto
113 68 125 53 149 39  curveto
173 25 199 18 229 18  curveto
257 18 281 26 300 44  curveto
319 62 328 84 328 110  curveto
328 136 315 164 288 192  curveto
237 246 lineto
178 308 148 359 148 398  curveto
148 440 165 474 198 501  curveto
232 528 275 542 328 542  curveto
379 542 428 530 475 506  curveto
451 388 lineto
403 388 lineto
404 397 lineto
406 413 408 424 409 432  curveto
411 442 412 450 412 457  curveto
412 493 382 512 321 512  curveto
297 512 277 503 261 486  curveto
244 469 236 447 236 421  curveto
236 396 252 367 284 335  curveto
335 285 lineto
391 230 418 179 418 134  curveto
418 90 401 54 366 28  curveto
331 1 284 -12 226 -12  curveto
169 -12 110 1 48 29  curveto
closepath
fill
		} def

	/t
		{
317 5 moveto
290 -6 264 -12 240 -12  curveto
204 -12 174 -1 152 20  curveto
129 41 118 70 118 104  curveto
118 118 120 135 124 155  curveto
191 490 lineto
109 490 lineto
117 530 lineto
198 530 lineto
218 626 lineto
319 653 lineto
295 530 lineto
430 530 lineto
422 490 lineto
287 490 lineto
217 141 lineto
214 123 212 106 212 90  curveto
212 52 230 32 267 32  curveto
283 32 303 37 325 46  curveto
317 5 lineto
closepath
fill
		} def

	/u
		{
430 0 moveto
474 216 lineto
382 64 290 -12 198 -12  curveto
142 -12 113 18 113 79  curveto
113 94 116 117 123 148  curveto
173 403 lineto
179 430 181 453 181 473  curveto
181 487 169 495 144 497  curveto
111 499 lineto
102 500 lineto
108 530 lineto
295 530 lineto
217 141 lineto
214 116 lineto
213 107 212 102 212 99  curveto
212 77 224 66 247 66  curveto
295 66 370 135 474 273  curveto
488 292 lineto
511 403 lineto
516 430 519 453 519 473  curveto
519 487 506 495 481 497  curveto
448 499 lineto
439 500 lineto
445 530 lineto
632 530 lineto
552 126 lineto
547 99 544 76 544 57  curveto
544 42 556 34 582 33  curveto
614 30 lineto
623 30 lineto
617 0 lineto
430 0 lineto
closepath
fill
		} def

	/v
		{
237 -5 moveto
237 61 231 134 219 211  curveto
208 288 194 346 178 384  curveto
149 452 lineto
141 472 132 484 123 489  curveto
114 493 92 497 59 499  curveto
50 500 lineto
56 530 lineto
232 530 lineto
284 410 314 269 324 107  curveto
414 212 lineto
490 302 528 380 528 446  curveto
528 476 516 504 491 530  curveto
609 530 lineto
616 514 620 497 620 479  curveto
620 445 604 406 572 360  curveto
541 314 470 229 361 103  curveto
267 -5 lineto
237 -5 lineto
closepath
fill
		} def

	/w
		{
221 -5 moveto
223 32 225 60 225 78  curveto
225 125 220 183 210 250  curveto
201 317 191 366 179 396  curveto
158 455 lineto
152 472 143 484 133 490  curveto
122 496 105 499 81 499  curveto
72 500 lineto
78 530 lineto
236 530 lineto
278 405 303 276 313 143  curveto
410 306 468 434 489 527  curveto
520 527 lineto
570 402 600 270 610 132  curveto
657 202 lineto
732 310 770 392 770 447  curveto
770 479 759 507 738 530  curveto
856 530 lineto
858 520 859 512 859 504  curveto
859 462 826 392 759 295  curveto
646 130 575 29 548 -5  curveto
515 -5 lineto
518 26 520 49 520 62  curveto
520 171 503 274 469 370  curveto
419 264 377 185 343 133  curveto
268 18 lineto
266 16 262 8 253 -5  curveto
221 -5 lineto
closepath
fill
		} def

	/x
		{
259 269 moveto
199 403 lineto
175 453 lineto
166 472 159 483 153 488  curveto
147 493 137 496 121 497  curveto
92 499 lineto
83 500 lineto
88 530 lineto
247 530 lineto
344 322 lineto
366 339 lineto
429 391 461 434 461 468  curveto
461 486 454 507 440 530  curveto
536 530 lineto
539 518 541 508 541 500  curveto
541 472 531 446 511 423  curveto
492 401 448 363 379 312  curveto
355 294 lineto
436 125 lineto
465 71 lineto
478 47 494 33 515 32  curveto
546 30 lineto
555 30 lineto
549 0 lineto
389 0 lineto
275 241 lineto
233 204 lineto
166 144 133 93 133 49  curveto
133 32 138 15 150 0  curveto
46 0 lineto
44 9 43 15 43 20  curveto
43 62 74 109 135 163  curveto
210 227 lineto
259 269 lineto
closepath
fill
		} def

	/y
		{
-2 -192 moveto
57 -151 132 -88 222 -5  curveto
241 12 lineto
237 88 228 167 212 251  curveto
197 335 180 396 164 433  curveto
149 464 138 482 129 488  curveto
121 493 98 497 62 499  curveto
50 500 lineto
56 530 lineto
233 530 lineto
284 410 313 270 321 109  curveto
381 187 lineto
440 262 480 317 499 352  curveto
519 387 529 420 529 449  curveto
529 480 516 507 490 530  curveto
611 530 lineto
618 515 622 501 622 488  curveto
622 460 613 431 594 401  curveto
576 371 539 322 481 253  curveto
296 31 lineto
222 -56 167 -131 131 -192  curveto
-2 -192 lineto
closepath
fill
		} def

	/z
		{
50 0 moveto
57 36 lineto
455 494 lineto
303 494 lineto
254 492 lineto
238 492 227 489 221 485  curveto
216 480 211 469 207 453  curveto
205 444 202 432 198 417  curveto
195 409 lineto
144 409 lineto
168 530 lineto
574 530 lineto
567 497 lineto
163 36 lineto
347 36 lineto
395 36 424 38 434 41  curveto
443 45 450 58 456 79  curveto
456 82 459 93 464 111  curveto
466 120 lineto
514 120 lineto
490 0 lineto
50 0 lineto
closepath
fill
		} def

	/braceleft
		{
430 771 moveto
424 740 lineto
381 735 352 722 337 701  curveto
322 680 314 643 314 588  curveto
313 550 lineto
313 483 300 429 273 386  curveto
246 343 210 318 163 310  curveto
185 294 lineto
222 268 241 235 241 194  curveto
241 164 229 119 204 59  curveto
180 2 lineto
171 -19 167 -37 167 -51  curveto
167 -69 174 -83 189 -96  curveto
204 -108 222 -114 243 -114  curveto
246 -114 250 -114 253 -114  curveto
248 -144 lineto
143 -144 90 -105 90 -28  curveto
90 0 100 37 120 83  curveto
140 131 lineto
159 176 168 212 168 237  curveto
168 276 148 295 109 295  curveto
85 295 lineto
91 325 lineto
113 325 lineto
153 325 181 338 199 365  curveto
216 391 225 435 225 496  curveto
224 527 lineto
224 689 293 771 430 771  curveto
closepath
fill
		} def

	/bar
		{
133 -144 moveto
315 771 lineto
364 771 lineto
182 -144 lineto
133 -144 lineto
closepath
fill
		} def

	/braceright
		{
85 -144 moveto
91 -114 lineto
134 -109 163 -96 178 -75  curveto
193 -54 200 -16 200 38  curveto
201 76 lineto
201 142 215 197 241 239  curveto
268 282 305 308 352 316  curveto
330 331 lineto
292 357 273 391 273 432  curveto
273 461 286 506 311 566  curveto
334 623 lineto
344 646 348 664 348 678  curveto
348 695 341 710 326 722  curveto
311 735 293 741 272 741  curveto
268 741 265 741 261 740  curveto
267 771 lineto
372 771 424 732 424 655  curveto
424 626 415 589 395 542  curveto
375 495 lineto
356 449 347 414 347 388  curveto
347 350 366 331 405 331  curveto
430 331 lineto
424 301 lineto
401 301 lineto
362 301 333 287 316 261  curveto
298 234 290 190 290 129  curveto
291 99 lineto
291 -63 222 -144 85 -144  curveto
closepath
fill
		} def

	/asciitilde
		{
181 216 moveto
151 216 lineto
177 320 230 372 312 372  curveto
344 372 394 355 462 321  curveto
501 302 lineto
564 271 605 255 625 255  curveto
672 255 706 291 728 361  curveto
758 361 lineto
731 257 677 205 598 205  curveto
571 205 531 219 476 246  curveto
450 259 lineto
409 278 lineto
351 308 309 322 285 322  curveto
233 322 198 287 181 216  curveto
closepath
fill
		} def

	/exclamdown
		{
286 530 moveto
267 433 lineto
170 433 lineto
189 530 lineto
286 530 lineto
closepath
214 337 moveto
170 -48 lineto
142 -192 lineto
45 -192 lineto
74 -48 lineto
184 337 lineto
214 337 lineto
closepath
fill
		} def

	/cent
		{
314 0 moveto
333 92 lineto
272 92 227 107 197 137  curveto
167 168 152 213 152 273  curveto
152 363 178 442 230 509  curveto
283 576 353 622 442 646  curveto
458 722 lineto
488 722 lineto
473 648 lineto
489 648 lineto
528 648 570 642 615 628  curveto
592 512 lineto
544 512 lineto
545 521 lineto
548 542 lineto
550 559 551 569 551 573  curveto
551 597 525 610 471 610  curveto
466 610 lineto
372 141 lineto
429 141 486 156 542 187  curveto
535 150 lineto
478 123 421 104 363 94  curveto
344 0 lineto
314 0 lineto
closepath
343 146 moveto
435 608 lineto
377 590 331 554 298 501  curveto
264 448 248 384 248 311  curveto
248 262 256 225 271 197  curveto
287 170 311 153 343 146  curveto
closepath
fill
		} def

	/sterling
		{
110 0 moveto
125 72 lineto
160 79 187 94 205 117  curveto
222 140 236 179 248 234  curveto
274 370 lineto
184 370 lineto
190 400 lineto
280 400 lineto
290 445 lineto
309 544 340 617 383 666  curveto
425 716 480 740 546 740  curveto
581 740 622 730 668 708  curveto
645 593 lineto
603 593 lineto
604 602 lineto
607 622 608 638 608 650  curveto
608 686 580 704 525 704  curveto
494 704 469 690 449 662  curveto
430 634 414 589 402 527  curveto
377 400 lineto
500 400 lineto
494 370 lineto
371 370 lineto
355 292 lineto
342 227 327 182 309 157  curveto
291 133 253 104 196 72  curveto
538 72 lineto
523 0 lineto
110 0 lineto
closepath
fill
		} def

	/fraction
		{
-84 -18 moveto
597 740 lineto
645 740 lineto
-36 -18 lineto
-84 -18 lineto
closepath
fill
		} def

	/yen
		{
291 192 moveto
146 192 lineto
152 222 lineto
297 222 lineto
317 325 lineto
172 325 lineto
179 355 lineto
323 355 lineto
216 595 lineto
187 652 lineto
174 677 153 690 125 691  curveto
116 692 lineto
122 722 lineto
369 722 lineto
363 692 lineto
354 692 lineto
334 692 lineto
308 692 295 685 295 672  curveto
295 660 305 634 325 591  curveto
416 393 lineto
590 591 lineto
633 640 655 669 655 677  curveto
655 687 644 691 622 691  curveto
601 692 lineto
592 692 lineto
598 722 lineto
779 722 lineto
773 692 lineto
764 691 lineto
741 690 lineto
724 689 707 678 690 659  curveto
630 592 lineto
419 355 lineto
564 355 lineto
558 325 lineto
414 325 lineto
393 222 lineto
538 222 lineto
532 192 lineto
387 192 lineto
374 126 lineto
369 99 366 76 366 57  curveto
366 42 379 34 403 33  curveto
436 30 lineto
445 30 lineto
439 0 lineto
162 0 lineto
168 30 lineto
177 30 lineto
211 33 lineto
232 34 246 40 254 52  curveto
262 63 270 88 277 126  curveto
291 192 lineto
closepath
fill
		} def

	/florin
		{
182 -144 moveto
284 361 lineto
182 361 lineto
188 391 lineto
290 391 lineto
308 480 lineto
323 559 353 622 398 669  curveto
442 717 493 740 551 740  curveto
589 740 623 735 654 724  curveto
628 596 lineto
580 596 lineto
581 605 lineto
584 625 586 639 587 645  curveto
589 653 589 661 589 667  curveto
589 692 571 705 535 705  curveto
501 705 476 691 458 664  curveto
441 637 425 586 410 509  curveto
386 391 lineto
517 391 lineto
511 361 lineto
380 361 lineto
280 -144 lineto
182 -144 lineto
closepath
fill
		} def

	/section
		{
81 -127 moveto
103 -16 lineto
145 -16 lineto
143 -31 lineto
140 -49 lineto
139 -53 139 -58 139 -63  curveto
139 -83 153 -99 181 -112  curveto
209 -125 243 -132 284 -132  curveto
329 -132 367 -118 397 -91  curveto
428 -64 444 -31 444 7  curveto
444 42 417 72 363 97  curveto
306 124 lineto
248 150 209 174 188 195  curveto
168 216 158 242 158 275  curveto
158 330 194 386 265 442  curveto
228 475 209 511 209 549  curveto
209 605 234 652 283 687  curveto
332 723 396 741 474 741  curveto
527 741 579 732 630 715  curveto
607 602 lineto
565 602 lineto
567 611 lineto
570 628 572 643 572 656  curveto
572 669 560 681 536 690  curveto
512 699 482 704 446 704  curveto
401 704 364 692 336 668  curveto
308 644 293 612 293 574  curveto
293 538 321 507 375 479  curveto
435 449 lineto
489 421 525 398 543 378  curveto
561 358 570 332 570 298  curveto
570 249 536 194 469 136  curveto
510 105 531 69 531 27  curveto
531 -27 507 -73 457 -108  curveto
408 -144 346 -162 270 -162  curveto
210 -162 147 -151 81 -127  curveto
closepath
444 156 moveto
476 193 491 229 491 264  curveto
491 298 463 330 407 359  curveto
346 391 lineto
331 398 312 409 289 423  curveto
256 387 240 350 240 312  curveto
240 276 266 246 318 220  curveto
379 190 lineto
415 171 lineto
421 168 431 163 444 156  curveto
closepath
fill
		} def

	/currency
		{
506 218 moveto
581 125 lineto
555 104 lineto
480 197 lineto
428 162 377 145 326 145  curveto
276 145 233 162 195 197  curveto
83 104 lineto
65 125 lineto
178 218 lineto
159 252 149 285 149 318  curveto
149 383 178 444 235 503  curveto
160 598 lineto
186 619 lineto
260 525 lineto
312 560 363 578 415 578  curveto
464 578 508 560 546 525  curveto
658 619 lineto
675 598 lineto
562 503 lineto
582 470 592 436 592 404  curveto
592 340 563 278 506 218  curveto
closepath
539 394 moveto
539 433 526 465 501 489  curveto
475 514 443 526 403 526  curveto
351 526 304 506 263 466  curveto
222 425 202 380 202 329  curveto
202 290 214 258 240 233  curveto
265 208 297 195 336 195  curveto
389 195 436 215 477 256  curveto
518 296 539 342 539 394  curveto
closepath
fill
		} def

	/quotesingle
		{
213 505 moveto
213 771 lineto
334 771 lineto
244 505 lineto
213 505 lineto
closepath
fill
		} def

	/quotedblleft
		{
269 614 moveto
314 614 lineto
291 494 lineto
170 494 lineto
191 603 lineto
214 715 265 771 346 771  curveto
339 740 lineto
321 740 308 734 300 722  curveto
291 710 284 686 276 650  curveto
269 614 lineto
closepath
461 614 moveto
507 614 lineto
483 494 lineto
362 494 lineto
384 603 lineto
406 715 458 771 538 771  curveto
532 740 lineto
514 740 501 734 492 722  curveto
484 710 476 686 469 650  curveto
461 614 lineto
closepath
fill
		} def

	/guillemotleft
		{
351 454 moveto
182 265 lineto
268 72 lineto
243 54 lineto
83 265 lineto
330 476 lineto
351 454 lineto
closepath
547 454 moveto
378 265 lineto
464 72 lineto
439 54 lineto
280 265 lineto
526 476 lineto
547 454 lineto
closepath
fill
		} def

	/guilsinglleft
		{
352 454 moveto
183 265 lineto
269 72 lineto
244 54 lineto
84 265 lineto
331 476 lineto
352 454 lineto
closepath
fill
		} def

	/guilsinglright
		{
82 76 moveto
250 265 lineto
165 458 lineto
190 476 lineto
349 265 lineto
103 54 lineto
82 76 lineto
closepath
fill
		} def

	/fi
		{
125 0 moveto
125 625 lineto
625 625 lineto
625 0 lineto
125 0 lineto
closepath
156 31 moveto
593 31 lineto
593 593 lineto
156 593 lineto
156 31 lineto
closepath
fill
		} def

	/fl
		{
125 0 moveto
125 625 lineto
625 625 lineto
625 0 lineto
125 0 lineto
closepath
156 31 moveto
593 31 lineto
593 593 lineto
156 593 lineto
156 31 lineto
closepath
fill
		} def

	/endash
		{
125 265 moveto
137 325 lineto
570 325 lineto
558 265 lineto
125 265 lineto
closepath
fill
		} def

	/dagger
		{
227 -144 moveto
363 418 lineto
166 397 lineto
180 469 lineto
369 448 lineto
399 722 lineto
496 722 lineto
417 448 lineto
614 469 lineto
600 397 lineto
411 418 lineto
323 -144 lineto
227 -144 lineto
closepath
fill
		} def

	/daggerdbl
		{
227 -144 moveto
305 126 lineto
108 105 lineto
122 177 lineto
311 156 lineto
363 418 lineto
166 397 lineto
180 469 lineto
369 448 lineto
399 722 lineto
496 722 lineto
417 448 lineto
614 469 lineto
600 397 lineto
411 418 lineto
359 156 lineto
556 177 lineto
542 105 lineto
353 126 lineto
323 -144 lineto
227 -144 lineto
closepath
fill
		} def

	/periodcentered
		{
120 239 moveto
144 360 lineto
264 360 lineto
240 239 lineto
120 239 lineto
closepath
fill
		} def

	/paragraph
		{
239 -144 moveto
338 355 lineto
283 365 239 388 207 424  curveto
174 460 157 504 157 555  curveto
157 612 172 654 201 683  curveto
230 711 273 726 331 726  curveto
379 724 lineto
452 722 lineto
580 722 lineto
408 -144 lineto
372 -144 lineto
534 674 lineto
438 674 lineto
275 -144 lineto
239 -144 lineto
closepath
fill
		} def

	/bullet
		{
369 108 moveto
311 108 261 129 219 172  curveto
177 215 156 266 156 325  curveto
156 385 177 436 219 478  curveto
262 520 313 542 373 542  curveto
433 542 484 520 526 478  curveto
568 435 589 384 589 323  curveto
589 263 568 212 525 171  curveto
482 129 430 108 369 108  curveto
closepath
fill
		} def

	/quotesinglbase
		{
117 0 moveto
71 0 lineto
97 120 lineto
217 120 lineto
195 11 lineto
173 -100 121 -156 39 -156  curveto
46 -126 lineto
80 -126 102 -96 111 -35  curveto
117 0 lineto
closepath
fill
		} def

	/quotedblbase
		{
309 0 moveto
264 0 lineto
288 120 lineto
409 120 lineto
387 11 lineto
365 -100 313 -156 233 -156  curveto
239 -126 lineto
257 -126 270 -120 279 -108  curveto
287 -95 295 -71 302 -35  curveto
309 0 lineto
closepath
117 0 moveto
72 0 lineto
96 120 lineto
216 120 lineto
194 11 lineto
172 -100 121 -156 41 -156  curveto
46 -126 lineto
64 -126 78 -120 86 -108  curveto
95 -95 103 -71 110 -35  curveto
117 0 lineto
closepath
fill
		} def

	/quotedblright
		{
438 650 moveto
394 650 lineto
417 771 lineto
538 771 lineto
516 662 lineto
494 550 443 494 362 494  curveto
368 523 lineto
386 523 399 530 408 542  curveto
417 554 424 578 432 614  curveto
438 650 lineto
closepath
246 650 moveto
201 650 lineto
225 771 lineto
346 771 lineto
324 662 lineto
302 550 250 494 170 494  curveto
176 523 lineto
194 523 207 530 216 542  curveto
224 554 232 578 239 614  curveto
246 650 lineto
closepath
fill
		} def

	/guillemotright
		{
279 76 moveto
448 265 lineto
362 458 lineto
387 476 lineto
546 265 lineto
300 54 lineto
279 76 lineto
closepath
83 76 moveto
251 265 lineto
166 458 lineto
191 476 lineto
350 265 lineto
104 54 lineto
83 76 lineto
closepath
fill
		} def

	/ellipsis
		{
120 0 moveto
139 96 lineto
236 96 lineto
216 0 lineto
120 0 lineto
closepath
454 0 moveto
473 96 lineto
569 96 lineto
550 0 lineto
454 0 lineto
closepath
787 0 moveto
806 96 lineto
902 96 lineto
883 0 lineto
787 0 lineto
closepath
fill
		} def

	/perthousand
		{
262 361 moveto
225 361 195 372 172 396  curveto
150 419 139 450 139 489  curveto
139 554 157 609 194 654  curveto
231 699 275 722 327 722  curveto
365 722 396 711 418 688  curveto
441 665 452 634 452 595  curveto
452 530 434 474 397 429  curveto
360 384 315 361 262 361  curveto
closepath
210 484 moveto
210 422 230 391 269 391  curveto
299 391 326 412 350 455  curveto
374 497 386 544 386 597  curveto
386 661 367 693 328 693  curveto
297 693 270 672 246 630  curveto
222 587 210 539 210 484  curveto
closepath
578 0 moveto
540 0 510 11 487 34  curveto
465 58 454 89 454 128  curveto
454 192 472 247 509 292  curveto
546 338 590 361 642 361  curveto
680 361 711 349 733 326  curveto
756 303 767 272 767 233  curveto
767 168 749 113 712 68  curveto
675 22 630 0 578 0  curveto
closepath
525 123 moveto
525 60 545 29 584 29  curveto
614 29 641 51 665 93  curveto
689 135 701 183 701 236  curveto
701 300 682 332 643 332  curveto
612 332 585 310 561 268  curveto
537 226 525 178 525 123  curveto
closepath
88 -18 moveto
753 740 lineto
817 740 lineto
152 -18 lineto
88 -18 lineto
closepath
934 0 moveto
896 0 866 11 844 34  curveto
821 58 810 89 810 128  curveto
810 192 828 247 865 292  curveto
902 338 946 361 999 361  curveto
1037 361 1067 349 1090 326  curveto
1112 303 1124 272 1124 233  curveto
1124 168 1105 113 1068 68  curveto
1032 22 987 0 934 0  curveto
closepath
882 123 moveto
882 61 902 29 941 29  curveto
971 29 997 51 1021 93  curveto
1046 135 1058 183 1058 235  curveto
1058 299 1038 332 1000 332  curveto
969 332 941 310 917 268  curveto
894 226 882 178 882 123  curveto
closepath
fill
		} def

	/questiondown
		{
430 530 moveto
411 433 lineto
314 433 lineto
334 530 lineto
430 530 lineto
closepath
392 337 moveto
390 328 lineto
384 297 375 272 363 252  curveto
351 233 328 207 295 173  curveto
254 133 lineto
215 94 186 58 167 24  curveto
148 -10 138 -42 138 -73  curveto
138 -105 148 -130 168 -150  curveto
188 -170 214 -180 247 -180  curveto
311 -180 348 -157 358 -112  curveto
363 -91 367 -75 370 -63  curveto
373 -54 lineto
421 -54 lineto
396 -177 lineto
329 -199 269 -210 215 -210  curveto
163 -210 119 -198 86 -173  curveto
52 -148 36 -116 36 -76  curveto
36 -44 44 -16 61 7  curveto
78 30 111 60 159 95  curveto
194 121 lineto
224 142 247 171 265 207  curveto
282 243 294 286 299 337  curveto
392 337 lineto
closepath
fill
		} def

	/grave
		{
513 626 moveto
467 626 lineto
311 783 lineto
434 783 lineto
513 626 lineto
closepath
fill
		} def

	/acute
		{
338 626 moveto
495 783 lineto
618 783 lineto
383 626 lineto
338 626 lineto
closepath
fill
		} def

	/circumflex
		{
253 626 moveto
410 783 lineto
519 783 lineto
597 626 lineto
555 626 lineto
451 729 lineto
296 626 lineto
253 626 lineto
closepath
fill
		} def

	/tilde
		{
266 626 moveto
280 664 298 693 320 712  curveto
343 731 369 741 400 741  curveto
420 741 438 735 454 722  curveto
468 710 lineto
483 698 499 692 516 692  curveto
532 692 546 696 557 704  curveto
569 712 577 724 584 740  curveto
614 740 lineto
599 702 581 674 559 655  curveto
536 635 510 626 479 626  curveto
459 626 442 632 426 645  curveto
412 656 lineto
396 669 380 675 364 675  curveto
349 675 336 671 324 663  curveto
313 654 303 642 296 626  curveto
266 626 lineto
closepath
fill
		} def

	/macron
		{
191 722 moveto
203 783 lineto
607 783 lineto
595 722 lineto
191 722 lineto
closepath
fill
		} def

	/breve
		{
293 783 moveto
325 783 lineto
326 753 337 732 356 717  curveto
375 703 403 695 439 695  curveto
475 695 505 703 530 717  curveto
555 732 574 753 587 783  curveto
619 783 lineto
603 734 577 696 542 668  curveto
507 640 468 626 423 626  curveto
386 626 355 638 330 663  curveto
305 688 292 719 292 756  curveto
292 763 293 772 293 783  curveto
closepath
fill
		} def

	/dotaccent
		{
377 626 moveto
396 722 lineto
493 722 lineto
474 626 lineto
377 626 lineto
closepath
fill
		} def

	/dieresis
		{
283 626 moveto
299 710 lineto
384 710 lineto
367 626 lineto
283 626 lineto
closepath
476 626 moveto
492 710 lineto
577 710 lineto
560 626 lineto
476 626 lineto
closepath
fill
		} def

	/ring
		{
430 626 moveto
399 626 374 637 352 658  curveto
331 680 320 706 320 737  curveto
320 767 331 794 353 815  curveto
374 837 400 848 431 848  curveto
462 848 488 837 510 815  curveto
531 794 542 768 542 737  curveto
542 706 531 679 510 658  curveto
488 637 461 626 430 626  curveto
closepath
430 659 moveto
452 659 471 667 486 682  curveto
501 697 509 715 509 737  curveto
509 759 501 777 486 792  curveto
471 807 453 814 431 814  curveto
410 814 391 807 376 792  curveto
361 777 354 758 354 737  curveto
354 716 361 697 376 682  curveto
391 667 409 659 430 659  curveto
closepath
fill
		} def

	/cedilla
		{
176 -200 moveto
183 -167 lineto
201 -172 216 -175 229 -175  curveto
271 -175 292 -158 292 -125  curveto
292 -98 264 -85 209 -85  curveto
273 0 lineto
312 0 lineto
268 -58 lineto
330 -62 361 -82 361 -118  curveto
361 -142 349 -164 326 -182  curveto
303 -201 276 -210 246 -210  curveto
222 -210 199 -207 176 -200  curveto
closepath
fill
		} def

	/hungarumlaut
		{
125 0 moveto
125 625 lineto
625 625 lineto
625 0 lineto
125 0 lineto
closepath
156 31 moveto
593 31 lineto
593 593 lineto
156 593 lineto
156 31 lineto
closepath
fill
		} def

	/ogonek
		{
365 -133 moveto
358 -166 lineto
334 -175 310 -180 284 -180  curveto
253 -180 229 -175 213 -165  curveto
197 -154 189 -139 189 -118  curveto
189 -94 198 -73 214 -53  curveto
231 -33 255 -15 289 0  curveto
341 0 lineto
313 -14 293 -29 280 -46  curveto
266 -63 259 -81 259 -101  curveto
259 -114 264 -124 273 -131  curveto
282 -137 296 -141 314 -141  curveto
332 -141 349 -138 365 -133  curveto
closepath
fill
		} def

	/caron
		{
628 783 moveto
479 626 lineto
371 626 lineto
285 783 lineto
327 783 lineto
435 674 lineto
586 783 lineto
628 783 lineto
closepath
fill
		} def

	/emdash
		{
125 265 moveto
137 325 lineto
570 325 lineto
558 265 lineto
125 265 lineto
closepath
fill
		} def

	/AE
		{
882 0 moveto
361 0 lineto
367 30 lineto
376 30 lineto
409 33 lineto
430 34 445 40 453 52  curveto
461 63 469 88 476 126  curveto
496 226 lineto
250 226 lineto
173 125 lineto
156 103 146 89 143 84  curveto
126 57 lineto
123 52 122 48 122 45  curveto
122 36 132 31 152 31  curveto
176 30 lineto
191 30 lineto
185 0 lineto
1 0 lineto
7 30 lineto
17 30 lineto
39 32 62 47 85 75  curveto
129 127 lineto
585 722 lineto
999 722 lineto
974 596 lineto
919 596 lineto
920 605 lineto
926 646 lineto
930 664 lineto
927 677 899 683 847 683  curveto
689 683 lineto
632 394 lineto
771 394 lineto
802 396 lineto
823 396 836 405 841 423  curveto
841 426 843 433 847 445  curveto
849 454 lineto
894 454 lineto
862 295 lineto
817 295 lineto
818 304 lineto
820 319 821 330 821 335  curveto
821 346 813 352 798 353  curveto
763 355 lineto
624 355 lineto
579 126 lineto
575 108 573 90 573 73  curveto
573 60 578 51 586 47  curveto
595 43 615 42 645 42  curveto
722 42 lineto
769 42 800 44 814 48  curveto
828 52 837 63 841 79  curveto
850 114 lineto
852 123 lineto
906 123 lineto
882 0 lineto
closepath
279 265 moveto
504 265 lineto
582 656 lineto
279 265 lineto
closepath
fill
		} def

	/ordfeminine
		{
364 355 moveto
399 502 lineto
388 502 lineto
350 451 316 413 285 387  curveto
254 361 227 349 202 349  curveto
160 349 139 377 139 435  curveto
139 511 162 578 209 638  curveto
255 698 308 729 367 729  curveto
376 729 392 727 415 725  curveto
421 724 430 723 442 722  curveto
523 722 lineto
475 480 lineto
467 433 lineto
464 420 462 413 462 413  curveto
463 397 479 388 511 386  curveto
520 385 lineto
514 355 lineto
364 355 lineto
closepath
406 566 moveto
426 667 lineto
401 678 376 684 353 684  curveto
318 684 287 661 261 614  curveto
235 568 222 514 222 451  curveto
222 428 230 417 245 417  curveto
260 417 281 429 308 454  curveto
335 479 368 516 406 566  curveto
closepath
fill
		} def

	/Lslash
		{
23 0 moveto
29 30 lineto
38 30 lineto
72 33 lineto
93 34 107 40 115 52  curveto
123 63 131 88 139 126  curveto
186 365 lineto
85 312 lineto
93 354 lineto
194 406 lineto
232 596 lineto
237 623 240 646 240 666  curveto
240 680 227 688 202 689  curveto
169 691 lineto
161 692 lineto
167 722 lineto
450 722 lineto
444 692 lineto
435 691 lineto
401 689 lineto
380 688 366 681 358 670  curveto
350 659 342 634 334 596  curveto
308 465 lineto
456 542 lineto
448 500 lineto
300 424 lineto
241 126 lineto
235 97 232 77 232 65  curveto
232 55 236 48 245 45  curveto
253 43 274 42 308 42  curveto
394 42 lineto
440 42 471 44 487 50  curveto
502 55 513 67 517 85  curveto
528 134 lineto
531 144 lineto
582 144 lineto
553 0 lineto
23 0 lineto
closepath
fill
		} def

	/Oslash
		{
104 -18 moveto
50 -18 lineto
157 85 lineto
126 127 110 185 110 260  curveto
110 387 154 499 243 596  curveto
331 692 434 740 552 740  curveto
630 740 696 715 750 664  curveto
830 740 lineto
882 740 lineto
775 636 lineto
805 584 820 527 820 465  curveto
820 336 776 223 688 126  curveto
600 30 497 -18 380 -18  curveto
298 -18 232 7 181 57  curveto
104 -18 lineto
closepath
230 156 moveto
688 602 lineto
656 672 605 707 534 707  curveto
451 707 378 660 315 567  curveto
252 474 220 367 220 246  curveto
220 208 223 178 230 156  curveto
closepath
701 563 moveto
245 119 lineto
280 52 332 19 399 19  curveto
479 19 551 64 616 156  curveto
681 248 713 351 713 464  curveto
713 494 709 527 701 563  curveto
closepath
fill
		} def

	/OE
		{
981 0 moveto
547 0 lineto
556 42 lineto
502 1 440 -18 372 -18  curveto
292 -18 228 5 181 54  curveto
134 103 111 169 111 252  curveto
111 385 154 499 240 596  curveto
327 692 429 741 547 741  curveto
600 741 646 724 687 691  curveto
692 722 lineto
1098 722 lineto
1072 596 lineto
1018 596 lineto
1020 605 lineto
1025 646 lineto
1029 664 lineto
1026 677 998 683 946 683  curveto
789 683 lineto
731 394 lineto
870 394 lineto
900 396 lineto
922 396 935 405 939 423  curveto
941 429 943 437 945 445  curveto
948 454 lineto
993 454 lineto
961 295 lineto
916 295 lineto
917 304 lineto
919 319 920 330 920 336  curveto
920 346 913 352 897 353  curveto
862 355 lineto
723 355 lineto
678 126 lineto
674 108 672 90 672 73  curveto
672 60 677 51 686 47  curveto
694 43 714 42 744 42  curveto
821 42 lineto
868 42 899 44 913 48  curveto
927 52 936 63 940 79  curveto
949 114 lineto
951 123 lineto
1005 123 lineto
981 0 lineto
closepath
602 263 moveto
657 548 lineto
660 562 661 576 661 589  curveto
661 624 650 652 627 673  curveto
604 694 574 705 536 705  curveto
450 705 375 658 313 565  curveto
250 472 219 362 219 234  curveto
219 169 235 116 269 76  curveto
302 36 346 16 399 16  curveto
455 16 499 34 529 72  curveto
560 109 584 173 602 263  curveto
closepath
fill
		} def

	/ordmasculine
		{
265 349 moveto
225 349 195 359 175 377  curveto
155 396 146 425 146 462  curveto
146 533 173 597 227 654  curveto
282 712 343 740 411 740  curveto
451 740 481 731 501 712  curveto
521 693 531 665 531 627  curveto
531 556 504 492 449 435  curveto
395 378 333 349 265 349  curveto
closepath
308 386 moveto
343 386 375 408 404 452  curveto
434 496 448 544 448 597  curveto
448 632 442 658 429 675  curveto
416 693 397 702 371 702  curveto
336 702 303 680 274 637  curveto
245 593 230 545 230 493  curveto
230 457 236 431 249 413  curveto
262 395 282 386 308 386  curveto
closepath
fill
		} def

	/ae
		{
869 82 moveto
773 19 687 -12 610 -12  curveto
559 -12 520 3 495 33  curveto
470 63 457 109 457 170  curveto
458 220 lineto
412 142 365 83 318 44  curveto
270 5 222 -14 174 -14  curveto
147 -14 124 -2 105 20  curveto
87 44 78 73 78 107  curveto
78 214 115 313 190 404  curveto
264 495 345 540 433 540  curveto
458 540 487 537 520 530  curveto
609 530 lineto
599 472 lineto
662 519 720 542 772 542  curveto
804 542 830 532 850 513  curveto
871 494 881 470 881 441  curveto
881 375 851 321 791 279  curveto
730 237 650 213 548 208  curveto
548 184 lineto
548 137 558 102 577 78  curveto
597 55 626 43 665 43  curveto
730 43 801 71 876 127  curveto
869 82 lineto
closepath
473 295 moveto
507 465 lineto
469 484 429 494 387 494  curveto
339 494 299 472 269 427  curveto
245 392 224 345 207 287  curveto
190 228 181 175 181 128  curveto
181 81 196 58 227 58  curveto
258 58 294 78 335 117  curveto
376 157 422 216 473 295  curveto
closepath
550 233 moveto
624 239 682 258 724 291  curveto
767 323 788 366 788 417  curveto
788 443 782 463 771 476  curveto
761 489 745 495 723 495  curveto
680 495 642 470 610 421  curveto
577 372 557 309 550 233  curveto
closepath
fill
		} def

	/dotlessi
		{
102 0 moveto
183 403 lineto
188 430 190 453 190 473  curveto
190 487 178 495 153 497  curveto
120 499 lineto
111 500 lineto
117 530 lineto
304 530 lineto
224 126 lineto
218 99 216 76 216 57  curveto
216 42 228 34 253 33  curveto
286 30 lineto
295 30 lineto
289 0 lineto
102 0 lineto
closepath
fill
		} def

	/lslash
		{
207 423 moveto
251 644 lineto
256 671 259 694 259 714  curveto
259 728 246 736 221 737  curveto
189 740 lineto
180 740 lineto
186 771 lineto
373 771 lineto
314 479 lineto
436 542 lineto
427 500 lineto
306 437 lineto
245 126 lineto
239 99 236 76 236 57  curveto
236 42 249 34 274 33  curveto
307 30 lineto
315 30 lineto
310 0 lineto
123 0 lineto
199 382 lineto
78 319 lineto
86 361 lineto
207 423 lineto
closepath
fill
		} def

	/oslash
		{
94 -12 moveto
42 -12 lineto
114 59 lineto
95 95 86 132 86 169  curveto
86 266 120 353 187 428  curveto
255 504 333 542 419 542  curveto
462 542 500 527 533 497  curveto
574 542 lineto
625 542 lineto
557 467 lineto
574 432 582 396 582 360  curveto
582 262 548 176 481 100  curveto
414 25 337 -12 250 -12  curveto
207 -12 169 1 136 29  curveto
94 -12 lineto
closepath
191 139 moveto
471 432 lineto
452 480 423 504 382 504  curveto
332 504 287 470 248 403  curveto
209 335 189 258 189 172  curveto
189 164 190 153 191 139  curveto
closepath
479 386 moveto
199 95 lineto
217 46 247 21 289 21  curveto
339 21 383 56 422 124  curveto
461 192 480 270 480 358  curveto
480 364 480 373 479 386  curveto
closepath
fill
		} def

	/oe
		{
879 82 moveto
786 19 699 -12 620 -12  curveto
547 -12 498 22 474 91  curveto
404 22 329 -12 250 -12  curveto
201 -12 161 4 131 36  curveto
101 69 86 112 86 166  curveto
86 265 120 353 187 428  curveto
254 504 332 542 419 542  curveto
493 542 542 507 568 438  curveto
638 507 709 542 782 542  curveto
814 542 840 532 861 513  curveto
882 494 892 470 892 441  curveto
892 375 862 321 802 279  curveto
741 237 660 213 559 208  curveto
559 184 lineto
559 90 598 43 676 43  curveto
741 43 811 71 887 127  curveto
879 82 lineto
closepath
188 172 moveto
188 73 221 23 287 23  curveto
337 23 382 57 420 125  curveto
459 193 479 271 479 360  curveto
479 457 446 505 382 505  curveto
331 505 286 471 247 404  curveto
208 336 188 259 188 172  curveto
closepath
562 235 moveto
635 240 693 260 736 292  curveto
778 325 799 367 799 419  curveto
799 471 777 497 734 497  curveto
691 497 654 472 621 423  curveto
589 374 569 311 562 235  curveto
closepath
fill
		} def

	/germandbls
		{
64 -192 moveto
213 555 lineto
228 631 255 687 293 726  curveto
331 764 381 783 442 783  curveto
483 783 517 772 543 750  curveto
569 729 582 701 582 668  curveto
582 634 564 601 527 570  curveto
483 534 lineto
459 514 lineto
427 486 410 461 410 438  curveto
410 419 425 395 454 368  curveto
532 293 lineto
579 249 602 205 602 162  curveto
602 114 583 73 545 39  curveto
506 4 461 -12 408 -12  curveto
372 -12 331 -3 285 13  curveto
306 120 lineto
354 120 lineto
353 111 lineto
350 85 lineto
348 69 347 59 347 55  curveto
347 29 368 16 412 16  curveto
441 16 467 27 488 49  curveto
509 72 520 98 520 129  curveto
520 159 503 190 470 221  curveto
389 297 lineto
349 334 330 367 330 396  curveto
330 425 349 457 387 491  curveto
409 510 lineto
436 534 456 558 469 583  curveto
483 608 490 633 490 660  curveto
490 689 484 710 473 725  curveto
461 739 444 746 421 746  curveto
393 746 371 734 356 711  curveto
341 688 327 644 314 579  curveto
161 -192 lineto
64 -192 lineto
closepath
fill
		} def

	/.notdef
		{
0 0 moveto
1000 0 lineto
1000 1000 lineto
0 1000 lineto
0 0 lineto
closepath
50 50 moveto
950 50 lineto
950 950 lineto
50 950 lineto
50 50 lineto
closepath
fill
		} def

	end				% close glyph dict. 
	currentdict			% actually put dict on the stack
	end			% close the dictionary now
	/LucidaBright-Italic exch definefont pop
/LucidaBright-Italic findfont 13.0 scalefont setfont
(x) show
Q
Q
newpath
0.0 0.0 m
0.0 375.0 l
390.0 375.0 l
390.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 20.0 ] defaultmatrix matrix concatmatrix setmatrix
0.0 0.0 translate
q
q
1 39 187 OPL
39 192
Q
q
1 124 187 OPL
124 192
-5.0 -20.0 translate
119.0 227.0 moveto
q 1 -1 scale
9 dict begin
/FontType 3 def
/FontMatrix [0.0010 0 0 0.0010 0 0]def
/FontBBox [0 -213 1605 950 ] def
	/Encoding 256 array def
			0 1 255 {Encoding exch /.notdef put}for
		Encoding 32 /space put
		Encoding 33 /exclam put
		Encoding 34 /quotedbl put
		Encoding 35 /numbersign put
		Encoding 36 /dollar put
		Encoding 37 /percent put
		Encoding 38 /ampersand put
		Encoding 39 /quoteright put
		Encoding 40 /parenleft put
		Encoding 41 /parenright put
		Encoding 42 /asterisk put
		Encoding 43 /plus put
		Encoding 44 /comma put
		Encoding 45 /hyphen put
		Encoding 46 /period put
		Encoding 47 /slash put
		Encoding 48 /zero put
		Encoding 49 /one put
		Encoding 50 /two put
		Encoding 51 /three put
		Encoding 52 /four put
		Encoding 53 /five put
		Encoding 54 /six put
		Encoding 55 /seven put
		Encoding 56 /eight put
		Encoding 57 /nine put
		Encoding 58 /colon put
		Encoding 59 /semicolon put
		Encoding 60 /less put
		Encoding 61 /equal put
		Encoding 62 /greater put
		Encoding 63 /question put
		Encoding 64 /at put
		Encoding 65 /A put
		Encoding 66 /B put
		Encoding 67 /C put
		Encoding 68 /D put
		Encoding 69 /E put
		Encoding 70 /F put
		Encoding 71 /G put
		Encoding 72 /H put
		Encoding 73 /I put
		Encoding 74 /J put
		Encoding 75 /K put
		Encoding 76 /L put
		Encoding 77 /M put
		Encoding 78 /N put
		Encoding 79 /O put
		Encoding 80 /P put
		Encoding 81 /Q put
		Encoding 82 /R put
		Encoding 83 /S put
		Encoding 84 /T put
		Encoding 85 /U put
		Encoding 86 /V put
		Encoding 87 /W put
		Encoding 88 /X put
		Encoding 89 /Y put
		Encoding 90 /Z put
		Encoding 91 /bracketleft put
		Encoding 92 /backslash put
		Encoding 93 /bracketright put
		Encoding 94 /asciicircum put
		Encoding 95 /underscore put
		Encoding 96 /quoteleft put
		Encoding 97 /a put
		Encoding 98 /b put
		Encoding 99 /c put
		Encoding 100 /d put
		Encoding 101 /e put
		Encoding 102 /f put
		Encoding 103 /g put
		Encoding 104 /h put
		Encoding 105 /i put
		Encoding 106 /j put
		Encoding 107 /k put
		Encoding 108 /l put
		Encoding 109 /m put
		Encoding 110 /n put
		Encoding 111 /o put
		Encoding 112 /p put
		Encoding 113 /q put
		Encoding 114 /r put
		Encoding 115 /s put
		Encoding 116 /t put
		Encoding 117 /u put
		Encoding 118 /v put
		Encoding 119 /w put
		Encoding 120 /x put
		Encoding 121 /y put
		Encoding 122 /z put
		Encoding 123 /braceleft put
		Encoding 124 /bar put
		Encoding 125 /braceright put
		Encoding 126 /asciitilde put
		Encoding 161 /exclamdown put
		Encoding 162 /cent put
		Encoding 163 /sterling put
		Encoding 164 /fraction put
		Encoding 165 /yen put
		Encoding 166 /florin put
		Encoding 167 /section put
		Encoding 168 /currency put
		Encoding 169 /quotesingle put
		Encoding 170 /quotedblleft put
		Encoding 171 /guillemotleft put
		Encoding 172 /guilsinglleft put
		Encoding 173 /guilsinglright put
		Encoding 174 /fi put
		Encoding 175 /fl put
		Encoding 177 /endash put
		Encoding 178 /dagger put
		Encoding 179 /daggerdbl put
		Encoding 180 /periodcentered put
		Encoding 182 /paragraph put
		Encoding 183 /bullet put
		Encoding 184 /quotesinglbase put
		Encoding 185 /quotedblbase put
		Encoding 186 /quotedblright put
		Encoding 187 /guillemotright put
		Encoding 188 /ellipsis put
		Encoding 189 /perthousand put
		Encoding 191 /questiondown put
		Encoding 193 /grave put
		Encoding 194 /acute put
		Encoding 195 /circumflex put
		Encoding 196 /tilde put
		Encoding 197 /macron put
		Encoding 198 /breve put
		Encoding 199 /dotaccent put
		Encoding 200 /dieresis put
		Encoding 202 /ring put
		Encoding 203 /cedilla put
		Encoding 205 /hungarumlaut put
		Encoding 206 /ogonek put
		Encoding 207 /caron put
		Encoding 208 /emdash put
		Encoding 225 /AE put
		Encoding 227 /ordfeminine put
		Encoding 232 /Lslash put
		Encoding 233 /Oslash put
		Encoding 234 /OE put
		Encoding 235 /ordmasculine put
		Encoding 241 /ae put
		Encoding 245 /dotlessi put
		Encoding 248 /lslash put
		Encoding 249 /oslash put
		Encoding 250 /oe put
		Encoding 251 /germandbls put
	/BuildGlyph
		{ 2 copy exch /Metrics get exch 
			2 copy known {get}{pop pop 1000.0} ifelse
			0
			0 -213 1605 950
			setcachedevice
			exch /CharProcs get exch
			2 copy known not
					{pop /.notdef}
				if
			get exec
		} bind def

	/BuildChar
		{ 1 index /Encoding get exch get
		  1 index /BuildGlyph get exec
	  } bind def
	/Metrics 150 dict def
		Metrics begin
		/.notdef 1000 def
		/space 304.19921875 def
		/exclam 265.13671875 def
		/quotedbl 385.7421875 def
		/numbersign 608.3984375 def
		/dollar 608.3984375 def
		/percent 674.8046875 def
		/ampersand 689.94140625 def
		/quoteright 240.72265625 def
		/parenleft 316.40625 def
		/parenright 316.40625 def
		/asterisk 469.7265625 def
		/plus 794.921875 def
		/comma 265.13671875 def
		/hyphen 578.61328125 def
		/period 265.13671875 def
		/slash 524.4140625 def
		/zero 608.3984375 def
		/one 608.3984375 def
		/two 608.3984375 def
		/three 608.3984375 def
		/four 608.3984375 def
		/five 608.3984375 def
		/six 608.3984375 def
		/seven 608.3984375 def
		/eight 608.3984375 def
		/nine 608.3984375 def
		/colon 265.13671875 def
		/semicolon 265.13671875 def
		/less 794.921875 def
		/equal 794.921875 def
		/greater 794.921875 def
		/question 480.46875 def
		/at 873.53515625 def
		/A 744.140625 def
		/B 609.375 def
		/C 695.3125 def
		/D 768.06640625 def
		/E 566.40625 def
		/F 548.33984375 def
		/G 731.93359375 def
		/H 771.484375 def
		/I 325.1953125 def
		/J 421.875 def
		/K 708.0078125 def
		/L 557.12890625 def
		/M 860.3515625 def
		/N 751.46484375 def
		/O 776.85546875 def
		/P 572.75390625 def
		/Q 777.83203125 def
		/R 678.7109375 def
		/S 541.9921875 def
		/T 662.59765625 def
		/U 718.75 def
		/V 698.73046875 def
		/W 924.8046875 def
		/X 656.73828125 def
		/Y 677.734375 def
		/Z 632.32421875 def
		/bracketleft 316.40625 def
		/backslash 524.4140625 def
		/bracketright 316.40625 def
		/asciicircum 608.3984375 def
		/underscore 500.0 def
		/quoteleft 602.5390625 def
		/a 542.96875 def
		/b 611.328125 def
		/c 508.7890625 def
		/d 641.6015625 def
		/e 529.78515625 def
		/f 403.80859375 def
		/g 570.80078125 def
		/h 632.32421875 def
		/i 307.12890625 def
		/j 346.19140625 def
		/k 599.609375 def
		/l 313.4765625 def
		/m 945.80078125 def
		/n 632.32421875 def
		/o 602.5390625 def
		/p 641.6015625 def
		/q 617.67578125 def
		/r 439.94140625 def
		/s 503.90625 def
		/t 391.6015625 def
		/u 632.32421875 def
		/v 545.41015625 def
		/w 795.41015625 def
		/x 557.12890625 def
		/y 551.26953125 def
		/z 595.703125 def
		/braceleft 343.26171875 def
		/bar 373.53515625 def
		/braceright 343.26171875 def
		/asciitilde 794.921875 def
		/exclamdown 265.13671875 def
		/cent 608.3984375 def
		/sterling 608.3984375 def
		/fraction 36.1328125 def
		/yen 608.3984375 def
		/florin 608.3984375 def
		/section 608.3984375 def
		/currency 608.3984375 def
		/quotesingle 240.72265625 def
		/quotedblleft 458.0078125 def
		/guillemotleft 530.2734375 def
		/guilsinglleft 339.35546875 def
		/guilsinglright 339.35546875 def
		/fi 750.0 def
		/fl 750.0 def
		/endash 578.61328125 def
		/dagger 608.3984375 def
		/daggerdbl 608.3984375 def
		/periodcentered 265.13671875 def
		/paragraph 608.3984375 def
		/bullet 608.3984375 def
		/quotesinglbase 265.13671875 def
		/quotedblbase 458.0078125 def
		/quotedblright 458.0078125 def
		/guillemotright 530.2734375 def
		/ellipsis 1000.0 def
		/perthousand 1023.92578125 def
		/questiondown 480.46875 def
		/grave 602.5390625 def
		/acute 602.5390625 def
		/circumflex 602.5390625 def
		/tilde 602.5390625 def
		/macron 500.0 def
		/breve 602.5390625 def
		/dotaccent 602.5390625 def
		/dieresis 602.5390625 def
		/ring 602.5390625 def
		/cedilla 602.5390625 def
		/hungarumlaut 750.0 def
		/ogonek 602.5390625 def
		/caron 602.5390625 def
		/emdash 578.61328125 def
		/AE 918.45703125 def
		/ordfeminine 427.734375 def
		/Lslash 557.12890625 def
		/Oslash 776.85546875 def
		/OE 1013.671875 def
		/ordmasculine 427.734375 def
		/ae 818.84765625 def
		/dotlessi 307.12890625 def
		/lslash 337.40234375 def
		/oslash 602.5390625 def
		/oe 908.203125 def
		/germandbls 614.2578125 def
	end
	/CharProcs 150 dict def
	CharProcs begin
			%define Glyph dictionary and start filling
	/space
		{
fill
		} def

	/exclam
		{
84 0 moveto
84 96 lineto
180 96 lineto
180 0 lineto
84 0 lineto
closepath
117 192 moveto
84 578 lineto
84 722 lineto
180 722 lineto
180 578 lineto
147 192 lineto
117 192 lineto
closepath
fill
		} def

	/quotedbl
		{
93 530 moveto
60 771 lineto
156 771 lineto
123 530 lineto
93 530 lineto
closepath
261 530 moveto
228 771 lineto
325 771 lineto
292 530 lineto
261 530 lineto
closepath
fill
		} def

	/numbersign
		{
93 0 moveto
149 222 lineto
-2 222 lineto
5 271 lineto
161 271 lineto
206 451 lineto
42 451 lineto
51 500 lineto
218 500 lineto
274 722 lineto
324 722 lineto
268 500 lineto
409 500 lineto
465 722 lineto
515 722 lineto
459 500 lineto
611 500 lineto
602 451 lineto
447 451 lineto
402 271 lineto
566 271 lineto
557 222 lineto
390 222 lineto
334 0 lineto
284 0 lineto
340 222 lineto
199 222 lineto
143 0 lineto
93 0 lineto
closepath
211 271 moveto
352 271 lineto
397 451 lineto
256 451 lineto
211 271 lineto
closepath
fill
		} def

	/dollar
		{
295 -60 moveto
295 0 lineto
227 0 159 14 93 42  curveto
93 162 lineto
147 162 lineto
147 153 lineto
148 138 149 127 149 120  curveto
149 94 161 72 184 56  curveto
208 39 239 31 277 31  curveto
295 32 lineto
295 328 lineto
229 367 182 402 156 435  curveto
130 468 117 506 117 551  curveto
117 648 176 706 295 726  curveto
295 783 lineto
325 783 lineto
326 725 lineto
382 722 440 709 500 687  curveto
500 575 lineto
445 575 lineto
444 584 lineto
443 600 443 611 443 616  curveto
443 639 433 657 413 671  curveto
394 685 367 691 334 691  curveto
326 691 lineto
326 408 lineto
358 387 383 372 399 361  curveto
441 335 470 310 485 288  curveto
501 265 508 236 508 201  curveto
508 149 492 105 459 69  curveto
427 33 382 9 326 -1  curveto
326 -60 lineto
295 -60 lineto
closepath
326 38 moveto
391 58 424 105 424 178  curveto
424 223 399 262 348 296  curveto
326 311 lineto
326 38 lineto
closepath
295 429 moveto
295 688 lineto
232 679 201 638 201 568  curveto
201 517 232 470 295 429  curveto
closepath
fill
		} def

	/percent
		{
16 -18 moveto
597 740 lineto
658 740 lineto
77 -18 lineto
16 -18 lineto
closepath
162 361 moveto
118 361 81 378 53 412  curveto
24 446 10 489 10 542  curveto
10 595 25 638 53 672  curveto
82 705 119 722 164 722  curveto
209 722 246 705 274 672  curveto
303 638 317 595 317 542  curveto
317 488 303 444 274 411  curveto
246 378 208 361 162 361  curveto
closepath
162 391 moveto
217 391 245 442 245 543  curveto
245 643 218 692 164 692  curveto
110 692 83 642 83 542  curveto
83 442 109 391 162 391  curveto
closepath
508 0 moveto
464 0 428 17 399 51  curveto
371 85 356 128 356 180  curveto
356 233 371 277 399 310  curveto
428 344 465 361 510 361  curveto
555 361 592 344 621 311  curveto
650 277 664 234 664 181  curveto
664 127 650 83 621 50  curveto
592 16 554 0 508 0  curveto
closepath
509 29 moveto
564 29 592 80 592 182  curveto
592 281 565 331 510 331  curveto
456 331 429 281 429 181  curveto
429 80 455 29 509 29  curveto
closepath
fill
		} def

	/ampersand
		{
507 0 moveto
461 50 lineto
391 4 324 -18 261 -18  curveto
193 -18 135 4 88 49  curveto
41 94 18 149 18 214  curveto
18 321 78 394 200 433  curveto
163 491 144 541 144 583  curveto
144 628 160 665 192 696  curveto
225 726 265 741 314 741  curveto
365 741 407 727 438 701  curveto
469 674 484 639 484 596  curveto
484 515 430 455 321 416  curveto
330 402 336 392 340 385  curveto
381 317 425 251 471 190  curveto
508 139 lineto
537 182 552 234 552 294  curveto
551 322 lineto
551 341 541 351 521 351  curveto
517 351 503 351 478 353  curveto
468 354 lineto
468 383 lineto
697 383 lineto
697 354 lineto
687 353 lineto
648 351 lineto
636 350 628 347 625 342  curveto
621 337 620 325 620 306  curveto
620 255 590 191 530 115  curveto
536 108 541 103 544 99  curveto
562 81 572 71 574 68  curveto
594 47 616 35 640 33  curveto
685 30 lineto
691 30 lineto
691 0 lineto
507 0 lineto
closepath
440 75 moveto
404 122 lineto
340 206 277 301 214 407  curveto
147 368 114 312 114 241  curveto
114 182 132 134 170 95  curveto
207 56 253 36 309 36  curveto
355 36 398 49 440 75  curveto
closepath
306 440 moveto
365 481 395 537 395 610  curveto
395 677 369 710 319 710  curveto
266 710 240 677 240 611  curveto
240 576 256 529 288 473  curveto
292 466 298 455 306 440  curveto
closepath
fill
		} def

	/quoteright
		{
105 505 moveto
60 771 lineto
180 771 lineto
135 505 lineto
105 505 lineto
closepath
fill
		} def

	/parenleft
		{
274 -114 moveto
274 -144 lineto
204 -101 149 -38 109 43  curveto
68 126 48 216 48 314  curveto
48 409 69 498 110 582  curveto
152 666 206 729 274 771  curveto
274 740 lineto
224 684 190 626 172 565  curveto
153 504 144 420 144 312  curveto
144 205 153 121 172 61  curveto
190 0 224 -57 274 -114  curveto
closepath
fill
		} def

	/parenright
		{
41 -114 moveto
41 -144 lineto
111 -101 166 -38 206 43  curveto
247 126 267 216 267 314  curveto
267 409 246 498 205 582  curveto
163 666 109 729 41 771  curveto
41 740 lineto
91 684 125 626 143 565  curveto
162 504 171 420 171 312  curveto
171 205 162 121 143 61  curveto
125 0 91 -57 41 -114  curveto
closepath
fill
		} def

	/asterisk
		{
266 562 moveto
404 625 lineto
426 557 lineto
277 527 lineto
278 531 278 533 278 535  curveto
278 545 274 554 266 562  curveto
closepath
272 512 moveto
375 400 lineto
317 358 lineto
243 490 lineto
256 493 266 500 272 512  curveto
closepath
226 490 moveto
152 358 lineto
94 400 lineto
197 512 lineto
204 500 214 493 226 490  curveto
closepath
192 527 moveto
43 557 lineto
65 625 lineto
203 562 lineto
195 553 191 544 191 535  curveto
191 534 192 531 192 527  curveto
closepath
217 572 moveto
198 722 lineto
271 722 lineto
252 572 lineto
246 575 240 576 234 576  curveto
229 576 223 575 217 572  curveto
closepath
fill
		} def

	/plus
		{
373 0 moveto
373 265 lineto
108 265 lineto
108 313 lineto
373 313 lineto
373 578 lineto
421 578 lineto
421 313 lineto
686 313 lineto
686 265 lineto
421 265 lineto
421 0 lineto
373 0 lineto
closepath
fill
		} def

	/comma
		{
120 0 moveto
72 0 lineto
72 120 lineto
192 120 lineto
192 15 lineto
192 -25 190 -54 186 -69  curveto
181 -85 170 -101 154 -118  curveto
131 -142 104 -154 72 -156  curveto
72 -126 lineto
104 -123 120 -91 120 -31  curveto
120 0 lineto
closepath
fill
		} def

	/hyphen
		{
72 265 moveto
72 325 lineto
505 325 lineto
505 265 lineto
72 265 lineto
closepath
fill
		} def

	/period
		{
72 0 moveto
72 120 lineto
192 120 lineto
192 0 lineto
72 0 lineto
closepath
fill
		} def

	/slash
		{
108 -144 moveto
365 723 lineto
416 723 lineto
159 -144 lineto
108 -144 lineto
closepath
fill
		} def

	/zero
		{
300 -18 moveto
225 -18 165 16 119 85  curveto
74 154 51 246 51 359  curveto
51 475 74 568 119 637  curveto
165 706 227 740 304 740  curveto
381 740 442 706 488 637  curveto
534 568 557 476 557 360  curveto
557 244 534 152 488 83  curveto
441 15 379 -18 300 -18  curveto
closepath
301 12 moveto
403 7 455 125 455 366  curveto
455 596 404 710 304 710  curveto
203 710 153 594 153 361  curveto
153 133 203 16 301 12  curveto
closepath
fill
		} def

	/one
		{
352 729 moveto
352 126 lineto
355 78 lineto
356 58 362 45 372 39  curveto
382 33 402 30 434 30  curveto
491 30 lineto
491 0 lineto
117 0 lineto
117 30 lineto
174 30 lineto
205 30 226 33 236 39  curveto
246 45 252 58 253 78  curveto
256 126 lineto
256 574 lineto
253 624 lineto
253 647 246 658 232 658  curveto
223 658 200 655 166 648  curveto
117 640 lineto
117 670 lineto
352 729 lineto
closepath
fill
		} def

	/two
		{
78 0 moveto
78 48 lineto
105 129 149 197 208 252  curveto
260 300 lineto
320 356 360 400 379 433  curveto
399 466 409 504 409 547  curveto
409 596 397 635 373 665  curveto
349 695 316 709 276 709  curveto
232 709 195 698 165 674  curveto
153 665 146 632 143 577  curveto
142 565 lineto
94 565 lineto
94 696 lineto
164 726 228 741 288 741  curveto
353 741 407 722 448 686  curveto
490 649 511 603 511 546  curveto
511 470 464 400 370 334  curveto
311 294 lineto
217 229 166 159 157 84  curveto
508 84 lineto
508 0 lineto
78 0 lineto
closepath
fill
		} def

	/three
		{
90 4 moveto
90 132 lineto
138 132 lineto
139 121 lineto
140 87 lineto
140 66 152 48 177 33  curveto
202 19 232 11 268 11  curveto
310 11 344 28 370 62  curveto
396 95 409 140 409 195  curveto
409 250 392 293 358 324  curveto
324 355 276 370 216 370  curveto
156 370 lineto
156 400 lineto
188 400 lineto
325 400 393 455 393 564  curveto
393 662 350 710 264 710  curveto
226 710 193 702 165 687  curveto
155 681 148 655 144 609  curveto
144 602 lineto
95 602 lineto
95 712 lineto
147 731 206 741 272 741  curveto
339 741 392 726 431 696  curveto
469 666 489 626 489 574  curveto
489 488 438 427 337 390  curveto
399 374 444 351 470 322  curveto
497 292 510 251 510 198  curveto
510 132 489 79 445 40  curveto
402 1 343 -18 269 -18  curveto
200 -18 141 -10 90 4  curveto
closepath
fill
		} def

	/four
		{
361 204 moveto
30 204 lineto
30 252 lineto
391 734 lineto
445 734 lineto
445 277 lineto
542 277 lineto
542 204 lineto
445 204 lineto
445 126 lineto
445 88 448 63 454 52  curveto
460 40 473 34 494 33  curveto
527 30 lineto
536 30 lineto
536 0 lineto
259 0 lineto
259 30 lineto
268 30 lineto
318 33 lineto
336 34 347 40 353 52  curveto
359 65 361 89 361 126  curveto
361 204 lineto
closepath
84 277 moveto
361 277 lineto
361 645 lineto
84 277 lineto
closepath
fill
		} def

	/five
		{
114 -1 moveto
114 120 lineto
162 120 lineto
163 108 lineto
164 71 lineto
166 32 197 12 258 12  curveto
303 12 339 29 365 64  curveto
391 99 404 147 404 208  curveto
404 276 384 325 343 355  curveto
303 385 236 400 143 400  curveto
126 400 lineto
126 722 lineto
490 722 lineto
490 638 lineto
156 638 lineto
156 436 lineto
201 436 lineto
404 436 505 359 505 204  curveto
505 134 482 80 435 41  curveto
388 1 323 -18 241 -18  curveto
200 -18 158 -12 114 -1  curveto
closepath
fill
		} def

	/six
		{
162 369 moveto
207 432 265 463 336 463  curveto
399 463 451 442 491 400  curveto
531 358 551 304 551 237  curveto
551 165 528 104 483 55  curveto
437 6 381 -18 314 -18  curveto
233 -18 170 13 126 77  curveto
82 141 60 232 60 349  curveto
60 474 85 570 136 638  curveto
187 707 258 741 351 741  curveto
411 741 464 730 510 708  curveto
510 593 lineto
462 593 lineto
461 603 lineto
458 638 lineto
457 659 445 677 424 690  curveto
402 704 375 710 342 710  curveto
285 710 241 681 209 621  curveto
178 562 162 478 162 369  curveto
closepath
165 266 moveto
165 192 180 131 210 83  curveto
240 36 279 12 327 12  curveto
412 12 454 83 454 224  curveto
454 361 410 430 321 430  curveto
273 430 235 415 207 385  curveto
179 356 165 316 165 266  curveto
closepath
fill
		} def

	/seven
		{
137 0 moveto
151 78 174 146 206 204  curveto
239 262 315 372 435 534  curveto
507 632 lineto
101 632 lineto
101 722 lineto
564 722 lineto
564 659 lineto
366 393 262 173 251 0  curveto
137 0 lineto
closepath
fill
		} def

	/eight
		{
208 389 moveto
134 440 97 496 97 557  curveto
97 611 117 656 157 690  curveto
196 724 248 741 312 741  curveto
373 741 422 726 458 698  curveto
494 669 513 630 513 582  curveto
513 508 465 447 370 398  curveto
485 349 543 279 543 187  curveto
543 126 520 77 474 39  curveto
429 1 370 -18 297 -18  curveto
227 -18 170 0 126 35  curveto
83 71 61 117 61 175  curveto
61 272 110 343 208 389  curveto
closepath
344 415 moveto
400 456 429 511 429 581  curveto
429 620 417 651 394 675  curveto
371 699 340 710 303 710  curveto
269 710 240 699 217 675  curveto
193 651 181 623 181 588  curveto
181 555 192 527 213 504  curveto
235 481 278 451 344 415  curveto
closepath
230 368 moveto
182 323 157 263 157 187  curveto
157 133 170 91 197 59  curveto
223 27 258 12 303 12  curveto
344 12 378 26 406 54  curveto
433 82 447 117 447 159  curveto
447 194 436 224 416 248  curveto
395 272 356 299 298 331  curveto
230 368 lineto
closepath
fill
		} def

	/nine
		{
445 353 moveto
400 290 342 258 271 258  curveto
208 258 157 279 117 322  curveto
77 364 57 418 57 485  curveto
57 557 79 618 125 667  curveto
170 716 226 741 293 741  curveto
374 741 437 709 481 645  curveto
526 581 548 490 548 373  curveto
548 248 522 152 472 84  curveto
421 16 349 -18 256 -18  curveto
196 -18 143 -7 97 14  curveto
97 129 lineto
146 129 lineto
146 119 lineto
149 84 lineto
151 62 162 45 184 32  curveto
205 18 232 12 266 12  curveto
322 12 366 41 398 101  curveto
429 161 445 244 445 353  curveto
closepath
442 456 moveto
442 531 427 591 397 639  curveto
367 686 328 709 280 709  curveto
195 709 153 639 153 498  curveto
153 361 197 292 286 292  curveto
334 292 372 307 400 337  curveto
428 367 442 406 442 456  curveto
closepath
fill
		} def

	/colon
		{
72 0 moveto
72 120 lineto
192 120 lineto
192 0 lineto
72 0 lineto
closepath
72 409 moveto
72 530 lineto
192 530 lineto
192 409 lineto
72 409 lineto
closepath
fill
		} def

	/semicolon
		{
120 0 moveto
72 0 lineto
72 120 lineto
192 120 lineto
192 15 lineto
192 -25 190 -54 186 -69  curveto
181 -85 170 -101 154 -118  curveto
131 -142 104 -154 72 -156  curveto
72 -126 lineto
104 -123 120 -91 120 -31  curveto
120 0 lineto
closepath
72 409 moveto
72 530 lineto
192 530 lineto
192 409 lineto
72 409 lineto
closepath
fill
		} def

	/less
		{
686 0 moveto
108 289 lineto
686 578 lineto
686 524 lineto
217 289 lineto
217 288 lineto
686 53 lineto
686 0 lineto
closepath
fill
		} def

	/equal
		{
108 174 moveto
108 222 lineto
686 222 lineto
686 174 lineto
108 174 lineto
closepath
108 355 moveto
108 403 lineto
686 403 lineto
686 355 lineto
108 355 lineto
closepath
fill
		} def

	/greater
		{
108 0 moveto
686 289 lineto
108 578 lineto
108 524 lineto
577 289 lineto
577 288 lineto
108 53 lineto
108 0 lineto
closepath
fill
		} def

	/question
		{
150 0 moveto
150 96 lineto
247 96 lineto
247 0 lineto
150 0 lineto
closepath
150 192 moveto
150 201 lineto
150 268 173 324 220 370  curveto
239 389 lineto
300 450 331 512 331 577  curveto
331 666 288 710 201 710  curveto
132 710 97 686 94 637  curveto
92 584 lineto
91 574 lineto
43 574 lineto
43 708 lineto
104 729 163 740 220 740  curveto
284 740 336 726 375 697  curveto
414 667 434 629 434 581  curveto
434 528 402 478 337 428  curveto
319 414 307 404 300 397  curveto
282 381 lineto
258 359 247 319 247 259  curveto
247 192 lineto
150 192 lineto
closepath
fill
		} def

	/at
		{
537 21 moveto
480 -4 424 -18 369 -18  curveto
275 -18 197 10 135 66  curveto
74 123 43 194 43 281  curveto
43 390 83 490 164 583  curveto
255 688 368 740 505 740  curveto
597 740 674 711 736 653  curveto
797 594 828 521 828 434  curveto
828 356 804 288 755 230  curveto
706 173 649 144 584 144  curveto
527 144 499 166 499 210  curveto
499 222 500 235 503 247  curveto
515 289 lineto
520 310 lineto
509 310 lineto
444 199 381 144 320 144  curveto
261 144 231 182 231 257  curveto
231 335 258 407 312 473  curveto
366 539 425 572 488 572  curveto
503 572 516 570 528 567  curveto
568 556 lineto
570 555 574 554 581 553  curveto
627 553 lineto
571 273 lineto
567 254 565 239 565 226  curveto
565 195 582 180 615 180  curveto
660 180 702 207 740 262  curveto
779 316 798 375 798 439  curveto
798 516 769 580 712 632  curveto
655 684 584 710 500 710  curveto
391 710 293 667 205 580  curveto
118 493 74 396 74 287  curveto
74 207 101 141 157 89  curveto
212 38 283 12 368 12  curveto
419 12 472 24 526 48  curveto
537 21 lineto
closepath
524 399 moveto
544 502 lineto
518 516 489 523 456 523  curveto
412 523 375 500 346 454  curveto
316 408 302 350 302 281  curveto
302 230 317 204 347 204  curveto
395 204 454 269 524 399  curveto
closepath
fill
		} def

	/A
		{
182 222 moveto
141 126 lineto
119 65 lineto
117 60 116 55 116 50  curveto
116 37 129 30 154 30  curveto
179 30 lineto
187 30 lineto
187 0 lineto
0 0 lineto
0 30 lineto
10 30 lineto
33 31 lineto
51 32 66 47 78 75  curveto
101 126 lineto
355 731 lineto
389 731 lineto
643 123 lineto
667 72 lineto
676 53 684 42 690 38  curveto
696 34 710 32 732 30  curveto
744 30 lineto
744 0 lineto
476 0 lineto
476 30 lineto
484 30 lineto
514 30 lineto
540 30 552 36 552 49  curveto
552 68 546 94 532 126  curveto
492 222 lineto
182 222 lineto
closepath
198 262 moveto
474 262 lineto
337 591 lineto
198 262 lineto
closepath
fill
		} def

	/B
		{
358 374 moveto
419 364 466 342 500 308  curveto
534 274 551 232 551 181  curveto
551 120 531 74 490 44  curveto
450 14 387 0 304 0  curveto
21 0 lineto
21 30 lineto
30 30 lineto
62 33 lineto
81 34 93 37 98 42  curveto
103 47 107 59 108 78  curveto
111 126 lineto
111 596 lineto
108 644 lineto
107 663 103 674 98 680  curveto
93 685 81 688 62 689  curveto
30 691 lineto
21 692 lineto
21 722 lineto
317 722 lineto
384 722 434 708 469 681  curveto
504 654 521 614 521 562  curveto
521 477 467 414 358 374  curveto
closepath
212 358 moveto
212 126 lineto
213 83 lineto
213 64 219 50 230 43  curveto
241 36 263 32 295 32  curveto
340 32 376 46 404 73  curveto
431 99 445 134 445 177  curveto
445 298 368 358 212 358  curveto
closepath
212 391 moveto
242 391 lineto
358 391 417 444 417 551  curveto
417 602 403 638 376 658  curveto
349 679 303 689 237 689  curveto
212 689 lineto
212 391 lineto
closepath
fill
		} def

	/C
		{
638 38 moveto
572 0 496 -18 409 -18  curveto
298 -18 211 15 147 83  curveto
83 152 51 244 51 362  curveto
51 482 82 575 143 641  curveto
205 707 291 740 402 740  curveto
458 740 526 730 606 709  curveto
625 704 lineto
625 566 lineto
565 566 lineto
564 576 lineto
564 585 563 595 563 604  curveto
563 636 549 662 519 680  curveto
489 698 449 708 398 708  curveto
325 708 266 676 223 614  curveto
179 551 157 468 157 363  curveto
157 258 183 177 234 118  curveto
285 59 356 30 447 30  curveto
507 30 570 48 638 85  curveto
638 38 lineto
closepath
fill
		} def

	/D
		{
21 0 moveto
21 30 lineto
30 30 lineto
62 33 lineto
81 34 93 37 98 42  curveto
103 47 107 59 108 78  curveto
111 126 lineto
111 596 lineto
108 644 lineto
107 663 103 674 98 680  curveto
93 685 81 688 62 689  curveto
30 691 lineto
21 692 lineto
21 722 lineto
252 722 lineto
292 723 lineto
328 724 lineto
363 725 lineto
476 725 563 695 623 635  curveto
684 575 714 489 714 376  curveto
714 260 683 168 621 101  curveto
558 33 474 0 367 0  curveto
21 0 lineto
closepath
213 689 moveto
213 126 lineto
215 88 lineto
215 67 224 53 240 45  curveto
256 37 286 33 329 33  curveto
513 33 605 142 605 361  curveto
605 477 581 561 531 612  curveto
482 664 402 689 291 689  curveto
213 689 lineto
closepath
fill
		} def

	/E
		{
542 0 moveto
21 0 lineto
21 30 lineto
30 30 lineto
62 33 lineto
81 34 93 37 98 42  curveto
103 47 107 59 108 78  curveto
111 126 lineto
111 596 lineto
108 644 lineto
107 663 103 674 98 680  curveto
93 685 81 688 62 689  curveto
30 691 lineto
21 692 lineto
21 722 lineto
515 722 lineto
515 596 lineto
460 596 lineto
459 605 lineto
457 646 lineto
457 662 455 672 451 676  curveto
447 680 437 683 421 683  curveto
371 683 lineto
213 683 lineto
213 394 lineto
346 395 lineto
376 396 lineto
391 396 400 397 404 400  curveto
407 403 409 411 410 423  curveto
410 428 411 435 412 445  curveto
412 454 lineto
451 454 lineto
451 295 lineto
412 295 lineto
412 304 lineto
410 328 406 343 400 348  curveto
394 353 376 355 346 355  curveto
213 355 lineto
213 126 lineto
213 88 218 65 227 55  curveto
236 46 259 42 296 42  curveto
374 42 lineto
442 44 lineto
469 44 484 56 485 79  curveto
487 123 lineto
487 132 lineto
542 132 lineto
542 0 lineto
closepath
fill
		} def

	/F
		{
213 350 moveto
213 126 lineto
213 88 217 62 224 51  curveto
231 39 246 33 269 33  curveto
270 33 283 32 307 30  curveto
316 30 lineto
316 0 lineto
21 0 lineto
21 30 lineto
30 30 lineto
62 33 lineto
81 34 93 37 98 42  curveto
103 47 107 59 108 78  curveto
111 126 lineto
111 596 lineto
108 644 lineto
107 663 103 674 98 680  curveto
93 685 81 688 62 689  curveto
30 691 lineto
21 692 lineto
21 722 lineto
508 722 lineto
508 596 lineto
454 596 lineto
454 605 lineto
451 646 lineto
451 662 449 672 445 676  curveto
441 680 431 683 416 683  curveto
365 683 lineto
213 683 lineto
213 390 lineto
346 390 lineto
376 391 lineto
391 391 400 392 404 395  curveto
407 398 409 406 410 418  curveto
410 423 411 430 412 440  curveto
412 449 lineto
451 449 lineto
451 290 lineto
412 290 lineto
412 299 lineto
410 324 406 338 400 343  curveto
394 348 376 350 346 350  curveto
213 350 lineto
closepath
fill
		} def

	/G
		{
637 17 moveto
544 -6 466 -18 402 -18  curveto
295 -18 209 16 146 85  curveto
83 154 51 246 51 362  curveto
51 482 82 575 143 641  curveto
205 707 292 740 404 740  curveto
485 740 562 728 635 703  curveto
635 572 lineto
581 572 lineto
581 582 lineto
580 590 580 600 580 609  curveto
580 640 565 664 535 681  curveto
505 699 463 708 410 708  curveto
329 708 267 677 224 616  curveto
181 555 160 468 160 354  curveto
160 251 184 170 233 111  curveto
281 52 348 22 433 22  curveto
459 22 493 28 535 39  curveto
535 181 lineto
535 219 532 244 526 255  curveto
520 266 507 273 486 274  curveto
453 277 lineto
444 277 lineto
444 307 lineto
727 307 lineto
727 277 lineto
718 277 lineto
685 274 lineto
665 273 651 266 645 255  curveto
640 244 637 219 637 181  curveto
637 17 lineto
closepath
fill
		} def

	/H
		{
213 354 moveto
213 126 lineto
216 78 lineto
218 59 221 47 226 42  curveto
231 37 243 34 261 33  curveto
294 30 lineto
304 30 lineto
304 0 lineto
21 0 lineto
21 30 lineto
30 30 lineto
62 33 lineto
81 34 93 37 98 42  curveto
103 47 107 59 108 78  curveto
111 126 lineto
111 596 lineto
108 644 lineto
107 663 103 674 98 680  curveto
93 685 81 688 62 689  curveto
30 691 lineto
21 692 lineto
21 722 lineto
304 722 lineto
304 692 lineto
294 691 lineto
261 689 lineto
243 688 231 685 226 680  curveto
221 674 218 663 216 644  curveto
213 596 lineto
213 396 lineto
557 396 lineto
557 596 lineto
554 644 lineto
553 663 550 674 545 680  curveto
540 685 528 688 509 689  curveto
476 691 lineto
467 692 lineto
467 722 lineto
750 722 lineto
750 692 lineto
741 691 lineto
708 689 lineto
689 688 677 685 672 680  curveto
667 674 664 663 663 644  curveto
660 596 lineto
660 126 lineto
663 78 lineto
664 59 667 47 672 42  curveto
677 37 689 34 708 33  curveto
741 30 lineto
750 30 lineto
750 0 lineto
467 0 lineto
467 30 lineto
476 30 lineto
509 33 lineto
529 34 542 40 548 52  curveto
554 63 557 88 557 126  curveto
557 354 lineto
213 354 lineto
closepath
fill
		} def

	/I
		{
304 30 moveto
304 0 lineto
21 0 lineto
21 30 lineto
30 30 lineto
62 33 lineto
81 34 93 37 98 42  curveto
103 47 107 59 108 78  curveto
111 126 lineto
111 596 lineto
108 644 lineto
107 663 103 674 98 680  curveto
93 685 81 688 62 689  curveto
30 691 lineto
21 692 lineto
21 722 lineto
304 722 lineto
304 692 lineto
294 691 lineto
261 689 lineto
243 688 231 685 226 680  curveto
221 674 218 663 216 644  curveto
213 596 lineto
213 126 lineto
216 78 lineto
218 59 221 47 226 42  curveto
231 37 243 34 261 33  curveto
294 30 lineto
304 30 lineto
closepath
fill
		} def

	/J
		{
5 -134 moveto
5 -22 lineto
62 -22 lineto
63 -34 lineto
65 -57 lineto
68 -90 88 -107 126 -107  curveto
151 -107 171 -97 187 -76  curveto
203 -55 211 -29 211 3  curveto
210 72 lineto
210 596 lineto
208 644 lineto
206 663 203 674 198 680  curveto
193 685 181 688 163 689  curveto
129 691 lineto
120 692 lineto
120 722 lineto
403 722 lineto
403 692 lineto
394 691 lineto
361 689 lineto
342 688 330 685 325 680  curveto
320 674 317 663 316 644  curveto
313 596 lineto
313 131 lineto
313 30 296 -40 262 -82  curveto
228 -123 170 -144 88 -144  curveto
62 -144 35 -141 5 -134  curveto
closepath
fill
		} def

	/K
		{
213 365 moveto
213 126 lineto
216 78 lineto
216 57 219 45 226 40  curveto
232 36 251 32 283 30  curveto
292 30 lineto
292 0 lineto
21 0 lineto
21 30 lineto
30 30 lineto
62 33 lineto
81 34 93 37 98 42  curveto
103 47 107 59 108 78  curveto
111 126 lineto
111 596 lineto
108 644 lineto
107 663 103 674 98 680  curveto
93 685 81 688 62 689  curveto
30 691 lineto
21 692 lineto
21 722 lineto
304 722 lineto
304 692 lineto
294 691 lineto
261 689 lineto
243 688 231 685 226 680  curveto
221 674 218 663 216 644  curveto
213 596 lineto
213 368 lineto
432 596 lineto
480 646 504 675 504 683  curveto
504 688 495 691 477 691  curveto
433 692 lineto
424 692 lineto
424 722 lineto
647 722 lineto
647 692 lineto
639 691 lineto
609 691 lineto
593 691 578 686 564 676  curveto
550 665 522 638 479 595  curveto
295 407 lineto
548 125 lineto
599 73 lineto
617 54 630 43 639 39  curveto
648 35 668 32 697 30  curveto
708 30 lineto
708 0 lineto
412 0 lineto
412 30 lineto
421 30 lineto
461 30 481 34 481 42  curveto
481 53 461 81 421 127  curveto
213 365 lineto
closepath
fill
		} def

	/L
		{
539 0 moveto
21 0 lineto
21 30 lineto
30 30 lineto
62 33 lineto
81 34 93 37 98 42  curveto
103 47 107 59 108 78  curveto
111 126 lineto
111 596 lineto
108 644 lineto
107 663 103 674 98 680  curveto
93 685 81 688 62 689  curveto
30 691 lineto
21 692 lineto
21 722 lineto
304 722 lineto
304 692 lineto
294 691 lineto
261 689 lineto
243 688 231 685 226 680  curveto
221 674 218 663 216 644  curveto
213 596 lineto
213 126 lineto
213 83 217 58 223 51  curveto
230 45 254 42 297 42  curveto
371 42 lineto
417 42 447 44 462 50  curveto
477 56 484 67 485 85  curveto
487 134 lineto
487 144 lineto
539 144 lineto
539 0 lineto
closepath
fill
		} def

	/M
		{
21 692 moveto
21 722 lineto
228 722 lineto
444 196 lineto
657 722 lineto
838 722 lineto
838 692 lineto
829 691 lineto
796 689 lineto
778 688 766 685 760 680  curveto
755 674 752 663 751 644  curveto
748 596 lineto
748 126 lineto
751 78 lineto
752 59 755 47 760 42  curveto
766 37 778 34 796 33  curveto
829 30 lineto
838 30 lineto
838 0 lineto
563 0 lineto
563 30 lineto
572 30 lineto
605 33 lineto
623 34 635 37 640 42  curveto
645 47 648 59 649 78  curveto
652 126 lineto
652 623 lineto
425 57 lineto
389 57 lineto
165 630 lineto
165 126 lineto
167 78 lineto
169 59 172 47 177 42  curveto
182 37 194 34 212 33  curveto
246 30 lineto
255 30 lineto
255 0 lineto
21 0 lineto
21 30 lineto
30 30 lineto
62 33 lineto
81 34 93 37 98 42  curveto
103 47 107 59 108 78  curveto
111 126 lineto
111 596 lineto
108 644 lineto
107 663 103 674 98 680  curveto
93 685 81 688 62 689  curveto
30 691 lineto
21 692 lineto
closepath
fill
		} def

	/N
		{
605 -9 moveto
157 595 lineto
157 126 lineto
157 88 160 63 166 52  curveto
171 40 185 34 205 33  curveto
238 30 lineto
247 30 lineto
247 0 lineto
21 0 lineto
21 30 lineto
30 30 lineto
63 33 lineto
83 34 97 40 103 52  curveto
108 63 111 88 111 126  curveto
111 596 lineto
111 634 108 659 103 670  curveto
97 681 83 688 63 689  curveto
30 691 lineto
21 692 lineto
21 722 lineto
183 722 lineto
595 161 lineto
595 596 lineto
592 644 lineto
591 663 588 674 583 680  curveto
577 685 565 688 547 689  curveto
514 691 lineto
505 692 lineto
505 722 lineto
730 722 lineto
730 692 lineto
721 691 lineto
687 689 lineto
669 688 657 685 652 680  curveto
647 674 644 663 643 644  curveto
640 596 lineto
640 -9 lineto
605 -9 lineto
closepath
fill
		} def

	/O
		{
383 -18 moveto
281 -18 201 16 141 84  curveto
81 152 51 245 51 361  curveto
51 478 81 571 141 639  curveto
201 706 284 740 388 740  curveto
492 740 575 706 635 639  curveto
695 571 726 479 726 362  curveto
726 243 695 150 635 83  curveto
574 15 490 -18 383 -18  curveto
closepath
385 15 moveto
458 15 515 45 556 106  curveto
597 167 617 252 617 363  curveto
617 470 597 555 556 616  curveto
515 677 459 708 388 708  curveto
317 708 260 677 220 615  curveto
179 554 159 469 159 361  curveto
159 254 179 169 219 107  curveto
260 45 315 15 385 15  curveto
closepath
fill
		} def

	/P
		{
212 301 moveto
212 126 lineto
215 78 lineto
217 59 220 47 225 42  curveto
230 37 242 34 261 33  curveto
294 30 lineto
315 30 lineto
315 0 lineto
21 0 lineto
21 30 lineto
30 30 lineto
62 33 lineto
81 34 93 37 98 42  curveto
103 47 107 59 108 78  curveto
111 126 lineto
111 596 lineto
108 644 lineto
107 663 103 674 98 680  curveto
93 685 81 688 62 689  curveto
30 691 lineto
21 692 lineto
21 722 lineto
235 722 lineto
307 725 lineto
340 726 lineto
481 726 551 662 551 534  curveto
551 379 449 301 243 301  curveto
212 301 lineto
closepath
212 334 moveto
249 334 lineto
378 334 443 400 443 533  curveto
443 589 431 629 406 653  curveto
381 677 340 689 283 689  curveto
212 689 lineto
212 334 lineto
closepath
fill
		} def

	/Q
		{
503 0 moveto
580 -44 700 -72 863 -84  curveto
741 -145 lineto
659 -121 571 -80 479 -23  curveto
459 -11 lineto
435 -15 411 -18 388 -18  curveto
284 -18 201 15 141 83  curveto
81 151 51 244 51 361  curveto
51 478 81 571 141 639  curveto
201 706 284 740 389 740  curveto
493 740 575 707 636 639  curveto
696 572 727 480 727 364  curveto
727 172 652 51 503 0  curveto
closepath
618 356 moveto
618 468 598 554 558 615  curveto
518 677 461 708 388 708  curveto
316 708 260 677 220 616  curveto
180 555 160 470 160 361  curveto
160 252 180 167 220 106  curveto
260 45 316 15 389 15  curveto
460 15 516 45 557 106  curveto
597 166 618 250 618 356  curveto
closepath
fill
		} def

	/R
		{
212 317 moveto
212 126 lineto
215 78 lineto
215 57 219 45 225 40  curveto
232 36 250 32 282 30  curveto
291 30 lineto
291 0 lineto
21 0 lineto
21 30 lineto
30 30 lineto
62 33 lineto
81 34 93 37 98 42  curveto
103 47 107 59 108 78  curveto
111 126 lineto
111 596 lineto
108 644 lineto
107 663 103 674 98 680  curveto
93 685 81 688 62 689  curveto
30 691 lineto
21 692 lineto
21 722 lineto
194 722 lineto
242 723 lineto
282 725 lineto
321 726 lineto
471 726 545 665 545 543  curveto
545 442 496 374 396 340  curveto
538 127 lineto
583 64 lineto
598 42 616 32 636 32  curveto
640 32 651 31 668 30  curveto
678 30 lineto
678 0 lineto
494 0 lineto
297 317 lineto
212 317 lineto
closepath
213 351 moveto
250 351 lineto
377 351 441 411 441 532  curveto
441 589 429 630 405 654  curveto
381 677 340 689 283 689  curveto
213 689 lineto
213 351 lineto
closepath
fill
		} def

	/S
		{
58 14 moveto
58 153 lineto
109 153 lineto
109 145 lineto
110 128 111 116 111 108  curveto
111 81 125 59 152 43  curveto
179 26 215 18 258 18  curveto
349 18 395 64 395 157  curveto
395 193 387 222 372 243  curveto
356 265 326 288 280 313  curveto
229 343 lineto
118 405 63 473 63 547  curveto
63 603 83 649 123 686  curveto
163 722 213 740 273 740  curveto
325 740 386 730 456 709  curveto
456 581 lineto
401 581 lineto
401 589 lineto
400 607 399 620 399 628  curveto
399 655 389 675 370 688  curveto
350 701 320 708 278 708  curveto
243 708 214 696 193 673  curveto
172 650 161 620 161 583  curveto
161 551 169 524 183 503  curveto
198 483 225 461 264 439  curveto
315 410 lineto
386 369 434 334 459 304  curveto
484 274 496 236 496 191  curveto
496 131 474 81 429 41  curveto
385 1 329 -18 262 -18  curveto
183 -18 115 -7 58 14  curveto
closepath
fill
		} def

	/T
		{
279 683 moveto
164 683 lineto
114 681 lineto
97 681 85 678 81 674  curveto
76 669 73 659 73 643  curveto
73 626 73 612 72 600  curveto
72 590 lineto
21 590 lineto
21 722 lineto
641 722 lineto
641 590 lineto
590 590 lineto
589 600 lineto
588 612 588 626 588 643  curveto
588 659 586 669 581 674  curveto
576 678 565 681 548 681  curveto
498 683 lineto
382 683 lineto
382 126 lineto
385 78 lineto
386 59 389 47 394 42  curveto
399 37 411 34 430 33  curveto
463 30 lineto
484 30 lineto
484 0 lineto
177 0 lineto
177 30 lineto
198 30 lineto
231 33 lineto
250 34 262 37 267 42  curveto
272 47 275 59 276 78  curveto
279 126 lineto
279 683 lineto
closepath
fill
		} def

	/U
		{
7 692 moveto
7 722 lineto
292 722 lineto
292 692 lineto
283 691 lineto
250 689 lineto
229 688 216 681 210 670  curveto
205 659 202 634 202 596  curveto
202 287 lineto
202 212 204 163 208 140  curveto
211 117 221 96 237 75  curveto
268 34 316 14 378 14  curveto
437 14 485 32 520 67  curveto
540 88 553 110 559 134  curveto
565 159 568 202 568 265  curveto
568 596 lineto
564 644 lineto
563 663 560 674 555 680  curveto
550 685 538 688 520 689  curveto
486 691 lineto
478 692 lineto
478 722 lineto
709 722 lineto
709 692 lineto
700 691 lineto
667 689 lineto
646 688 633 681 627 670  curveto
621 659 619 634 619 596  curveto
619 293 lineto
619 226 615 177 607 146  curveto
600 114 585 85 562 58  curveto
520 7 454 -18 365 -18  curveto
187 -18 98 78 98 270  curveto
98 596 lineto
95 644 lineto
93 663 90 674 85 680  curveto
80 685 68 688 49 689  curveto
17 691 lineto
7 692 lineto
closepath
fill
		} def

	/V
		{
341 -9 moveto
94 593 lineto
65 655 lineto
59 671 53 681 47 684  curveto
41 688 29 690 10 691  curveto
0 692 lineto
0 722 lineto
262 722 lineto
262 692 lineto
251 692 lineto
201 692 176 686 176 673  curveto
176 668 186 641 205 593  curveto
392 138 lineto
568 594 lineto
585 638 593 664 593 671  curveto
593 685 582 691 559 691  curveto
522 692 lineto
512 692 lineto
512 722 lineto
698 722 lineto
698 692 lineto
687 691 lineto
660 690 643 680 635 661  curveto
608 594 lineto
375 -9 lineto
341 -9 lineto
closepath
fill
		} def

	/W
		{
246 -9 moveto
91 593 lineto
74 657 lineto
69 680 57 691 39 691  curveto
10 691 lineto
0 692 lineto
0 722 lineto
258 722 lineto
258 692 lineto
249 692 lineto
223 691 lineto
192 691 176 683 176 666  curveto
176 654 181 630 190 593  curveto
297 172 lineto
464 713 lineto
498 713 lineto
665 157 lineto
790 592 lineto
804 640 811 668 811 675  curveto
811 686 796 691 768 691  curveto
734 692 lineto
726 692 lineto
726 722 lineto
924 722 lineto
924 692 lineto
916 691 lineto
886 690 lineto
867 689 854 679 848 660  curveto
827 593 lineto
650 -9 lineto
617 -9 lineto
447 546 lineto
279 -9 lineto
246 -9 lineto
closepath
fill
		} def

	/X
		{
276 355 moveto
132 596 lineto
97 652 lineto
83 677 66 690 46 690  curveto
21 691 lineto
12 692 lineto
12 722 lineto
292 722 lineto
292 692 lineto
283 692 lineto
251 692 lineto
225 692 211 687 211 679  curveto
211 671 225 643 253 597  curveto
358 419 lineto
480 597 lineto
512 642 527 670 527 680  curveto
527 687 517 691 496 691  curveto
472 692 lineto
463 692 lineto
463 722 lineto
644 722 lineto
644 692 lineto
633 691 lineto
606 690 587 680 574 662  curveto
525 597 lineto
384 397 lineto
542 127 lineto
585 58 lineto
594 41 606 33 619 32  curveto
646 30 lineto
656 30 lineto
656 0 lineto
385 0 lineto
385 30 lineto
393 30 lineto
423 30 lineto
451 30 465 36 465 47  curveto
465 53 452 80 424 126  curveto
304 330 lineto
165 127 lineto
134 82 119 55 119 46  curveto
119 35 132 30 157 30  curveto
187 30 lineto
198 30 lineto
198 0 lineto
0 0 lineto
0 30 lineto
6 30 lineto
28 32 lineto
48 33 67 46 83 70  curveto
122 127 lineto
276 355 lineto
closepath
fill
		} def

	/Y
		{
283 320 moveto
118 593 lineto
80 655 lineto
67 678 53 689 38 690  curveto
9 691 lineto
0 692 lineto
0 722 lineto
280 722 lineto
280 692 lineto
270 692 lineto
236 691 lineto
212 691 200 686 200 676  curveto
200 666 213 638 240 593  curveto
375 365 lineto
516 592 lineto
544 638 558 666 558 677  curveto
558 687 545 691 518 691  curveto
490 692 lineto
481 692 lineto
481 722 lineto
677 722 lineto
677 692 lineto
668 691 lineto
641 690 lineto
623 689 608 679 598 662  curveto
554 593 lineto
385 320 lineto
385 126 lineto
385 88 388 63 394 52  curveto
399 40 413 34 433 33  curveto
466 30 lineto
476 30 lineto
476 0 lineto
192 0 lineto
192 30 lineto
201 30 lineto
234 33 lineto
255 34 268 40 274 52  curveto
280 63 283 88 283 126  curveto
283 320 lineto
closepath
fill
		} def

	/Z
		{
55 0 moveto
55 39 lineto
443 683 lineto
223 683 lineto
170 681 lineto
152 681 141 679 136 675  curveto
131 671 128 661 128 645  curveto
128 632 128 614 127 590  curveto
126 578 lineto
72 578 lineto
72 722 lineto
558 722 lineto
558 689 lineto
172 45 lineto
391 45 lineto
472 48 lineto
493 48 503 59 504 80  curveto
506 129 lineto
507 138 lineto
562 138 lineto
562 0 lineto
55 0 lineto
closepath
fill
		} def

	/bracketleft
		{
84 -144 moveto
84 771 lineto
277 771 lineto
277 740 lineto
168 740 lineto
168 -114 lineto
277 -114 lineto
277 -144 lineto
84 -144 lineto
closepath
fill
		} def

	/backslash
		{
415 -144 moveto
158 723 lineto
107 723 lineto
364 -144 lineto
415 -144 lineto
closepath
fill
		} def

	/bracketright
		{
231 -144 moveto
231 771 lineto
38 771 lineto
38 740 lineto
147 740 lineto
147 -114 lineto
38 -114 lineto
38 -144 lineto
231 -144 lineto
closepath
fill
		} def

	/asciicircum
		{
39 192 moveto
304 722 lineto
569 192 lineto
507 192 lineto
304 597 lineto
101 192 lineto
39 192 lineto
closepath
fill
		} def

	/underscore
		{
48 -60 moveto
48 0 lineto
452 0 lineto
452 -60 lineto
48 -60 lineto
closepath
fill
		} def

	/quoteleft
		{
388 626 moveto
343 626 lineto
144 783 lineto
271 783 lineto
388 626 lineto
closepath
fill
		} def

	/a
		{
375 72 moveto
318 16 262 -12 206 -12  curveto
161 -12 123 2 93 30  curveto
63 59 48 94 48 137  curveto
48 254 143 313 333 313  curveto
354 313 lineto
354 379 lineto
354 463 322 504 258 504  curveto
195 504 160 473 154 409  curveto
154 400 lineto
88 400 lineto
88 497 lineto
156 527 219 542 276 542  curveto
392 542 450 489 450 383  curveto
450 146 lineto
450 70 466 31 499 31  curveto
505 31 514 33 525 36  curveto
528 0 lineto
505 -8 484 -12 465 -12  curveto
418 -12 388 16 375 72  curveto
closepath
354 83 moveto
354 283 lineto
331 283 lineto
211 283 150 239 150 151  curveto
150 120 160 95 180 75  curveto
200 55 224 44 254 44  curveto
282 44 315 57 354 83  curveto
closepath
fill
		} def

	/b
		{
78 -5 moveto
78 644 lineto
75 692 lineto
73 711 70 723 65 728  curveto
60 733 48 736 29 737  curveto
-2 740 lineto
-12 740 lineto
-12 771 lineto
174 771 lineto
174 430 lineto
222 504 284 542 360 542  curveto
420 542 468 518 503 471  curveto
539 423 557 360 557 280  curveto
557 192 536 121 496 67  curveto
455 14 401 -12 333 -12  curveto
271 -12 218 11 174 60  curveto
168 60 lineto
156 -5 lineto
78 -5 lineto
closepath
174 98 moveto
225 60 274 41 321 41  curveto
410 41 454 112 454 254  curveto
454 404 411 479 325 479  curveto
267 479 216 452 174 396  curveto
174 98 lineto
closepath
fill
		} def

	/c
		{
458 18 moveto
407 -2 357 -12 309 -12  curveto
231 -12 168 13 120 65  curveto
72 117 48 184 48 267  curveto
48 350 71 416 117 466  curveto
163 516 225 542 301 542  curveto
341 542 394 534 458 518  curveto
458 391 lineto
397 391 lineto
397 400 lineto
397 473 365 509 302 509  curveto
255 509 217 488 190 446  curveto
162 403 148 346 148 274  curveto
148 200 165 142 197 99  curveto
230 56 274 35 330 35  curveto
378 35 421 43 458 60  curveto
458 18 lineto
closepath
fill
		} def

	/d
		{
436 0 moveto
436 99 lineto
389 25 327 -12 250 -12  curveto
190 -12 142 11 107 58  curveto
71 106 54 169 54 249  curveto
54 338 74 408 115 462  curveto
155 515 209 542 277 542  curveto
339 542 392 517 436 469  curveto
436 644 lineto
436 682 433 707 427 719  curveto
422 730 409 736 388 737  curveto
355 740 lineto
346 740 lineto
346 771 lineto
533 771 lineto
533 126 lineto
533 88 536 63 541 52  curveto
547 40 560 34 581 33  curveto
614 30 lineto
623 30 lineto
623 0 lineto
436 0 lineto
closepath
436 432 moveto
386 469 337 488 290 488  curveto
200 488 156 417 156 275  curveto
156 125 199 50 286 50  curveto
312 50 340 58 369 73  curveto
397 89 420 109 436 133  curveto
436 432 lineto
closepath
fill
		} def

	/e
		{
478 23 moveto
417 0 361 -12 311 -12  curveto
233 -12 170 14 121 66  curveto
72 118 48 186 48 270  curveto
48 350 70 415 113 466  curveto
157 516 213 542 281 542  curveto
345 542 393 520 427 478  curveto
461 435 478 374 478 295  curveto
478 286 lineto
154 286 lineto
154 119 211 36 326 36  curveto
385 36 436 48 478 73  curveto
478 23 lineto
closepath
156 316 moveto
376 316 lineto
376 337 lineto
376 454 343 512 275 512  curveto
238 512 210 494 188 458  curveto
167 423 156 375 156 316  curveto
closepath
fill
		} def

	/f
		{
120 487 moveto
42 487 lineto
42 530 lineto
120 530 lineto
120 555 lineto
120 636 133 694 159 729  curveto
185 765 227 783 285 783  curveto
331 783 374 771 416 747  curveto
416 632 lineto
355 632 lineto
354 641 lineto
354 661 353 676 353 687  curveto
353 730 329 751 282 751  curveto
257 751 239 742 230 723  curveto
221 704 216 668 216 613  curveto
216 530 lineto
349 530 lineto
349 490 lineto
216 490 lineto
216 126 lineto
216 88 219 63 226 52  curveto
232 40 246 34 269 33  curveto
304 30 lineto
319 30 lineto
319 0 lineto
30 0 lineto
30 30 lineto
39 30 lineto
72 33 lineto
91 34 103 37 108 42  curveto
113 47 116 59 117 78  curveto
120 126 lineto
120 487 lineto
closepath
fill
		} def

	/g
		{
138 20 moveto
101 37 83 60 83 89  curveto
83 123 113 155 175 186  curveto
103 217 67 274 67 355  curveto
67 412 86 457 122 491  curveto
158 525 207 542 268 542  curveto
304 542 338 535 368 521  curveto
554 536 lineto
530 477 lineto
402 498 lineto
444 458 465 410 465 356  curveto
465 302 447 257 410 221  curveto
373 186 327 168 270 168  curveto
249 168 226 171 202 178  curveto
179 160 167 140 167 119  curveto
167 96 187 84 228 84  curveto
312 84 lineto
394 84 450 75 480 58  curveto
511 41 526 9 526 -36  curveto
526 -87 503 -127 457 -158  curveto
410 -189 349 -204 274 -204  curveto
201 -204 142 -194 98 -173  curveto
53 -152 31 -125 31 -91  curveto
31 -47 67 -10 138 20  curveto
closepath
164 361 moveto
164 252 198 198 267 198  curveto
335 198 369 251 369 357  curveto
369 460 335 512 267 512  curveto
198 512 164 461 164 361  curveto
closepath
163 12 moveto
139 -11 127 -40 127 -75  curveto
127 -142 177 -175 276 -175  curveto
324 -175 362 -165 390 -144  curveto
418 -123 432 -95 432 -60  curveto
432 -11 398 12 330 12  curveto
163 12 lineto
closepath
fill
		} def

	/h
		{
204 430 moveto
253 504 317 542 396 542  curveto
441 542 477 527 503 497  curveto
529 467 542 425 542 373  curveto
542 126 lineto
545 78 lineto
546 59 549 47 554 42  curveto
559 37 571 34 590 33  curveto
623 30 lineto
632 30 lineto
632 0 lineto
355 0 lineto
355 30 lineto
364 30 lineto
397 33 lineto
416 34 427 37 433 42  curveto
438 47 441 59 442 78  curveto
445 126 lineto
445 358 lineto
445 403 439 435 427 453  curveto
416 471 395 479 364 479  curveto
321 479 267 452 204 398  curveto
204 126 lineto
204 88 207 63 213 52  curveto
219 40 232 34 252 33  curveto
286 30 lineto
295 30 lineto
295 0 lineto
18 0 lineto
18 30 lineto
27 30 lineto
60 33 lineto
78 34 90 37 95 42  curveto
100 47 104 59 105 78  curveto
108 126 lineto
108 644 lineto
105 692 lineto
104 711 100 723 95 728  curveto
90 733 78 736 60 737  curveto
27 740 lineto
18 740 lineto
18 771 lineto
204 771 lineto
204 430 lineto
closepath
fill
		} def

	/i
		{
204 530 moveto
204 126 lineto
204 88 207 63 213 52  curveto
219 40 232 34 252 33  curveto
286 30 lineto
295 30 lineto
295 0 lineto
18 0 lineto
18 30 lineto
27 30 lineto
60 33 lineto
78 34 90 37 95 42  curveto
100 47 104 59 105 78  curveto
108 126 lineto
108 403 lineto
105 451 lineto
104 470 100 482 95 487  curveto
90 492 78 495 60 497  curveto
27 499 lineto
18 500 lineto
18 530 lineto
204 530 lineto
closepath
108 626 moveto
108 722 lineto
204 722 lineto
204 626 lineto
108 626 lineto
closepath
fill
		} def

	/j
		{
153 626 moveto
153 722 lineto
250 722 lineto
250 626 lineto
153 626 lineto
closepath
250 530 moveto
250 5 lineto
250 -134 190 -204 72 -204  curveto
40 -204 4 -198 -36 -185  curveto
-36 -66 lineto
18 -66 lineto
18 -75 lineto
18 -112 23 -139 31 -153  curveto
40 -167 57 -174 80 -174  curveto
129 -174 153 -146 153 -90  curveto
153 -40 lineto
153 403 lineto
153 442 150 467 145 478  curveto
139 489 125 495 105 497  curveto
72 499 lineto
63 500 lineto
63 530 lineto
250 530 lineto
closepath
fill
		} def

	/k
		{
204 260 moveto
204 126 lineto
207 78 lineto
207 57 210 45 217 40  curveto
224 36 243 32 273 30  curveto
283 30 lineto
283 0 lineto
18 0 lineto
18 30 lineto
27 30 lineto
60 33 lineto
78 34 90 37 95 42  curveto
100 47 104 59 105 78  curveto
108 126 lineto
108 644 lineto
105 692 lineto
104 711 100 723 95 728  curveto
90 733 78 736 60 737  curveto
27 740 lineto
18 740 lineto
18 771 lineto
204 771 lineto
204 284 lineto
227 284 lineto
350 402 lineto
422 477 lineto
427 481 429 486 429 489  curveto
429 495 423 498 412 498  curveto
365 500 lineto
355 500 lineto
355 530 lineto
562 530 lineto
562 500 lineto
552 499 lineto
518 497 496 493 486 487  curveto
476 481 446 452 395 401  curveto
302 310 lineto
461 123 lineto
514 65 lineto
528 49 538 40 545 37  curveto
552 34 567 32 590 30  curveto
600 30 lineto
600 0 lineto
451 0 lineto
227 260 lineto
204 260 lineto
closepath
fill
		} def

	/l
		{
204 771 moveto
204 126 lineto
204 88 207 63 213 52  curveto
219 40 232 34 252 33  curveto
286 30 lineto
295 30 lineto
295 0 lineto
18 0 lineto
18 30 lineto
27 30 lineto
60 33 lineto
78 34 90 37 95 42  curveto
100 47 104 59 105 78  curveto
108 126 lineto
108 644 lineto
105 692 lineto
104 711 100 723 95 728  curveto
90 733 78 736 60 737  curveto
27 740 lineto
18 740 lineto
18 771 lineto
204 771 lineto
closepath
fill
		} def

	/m
		{
204 430 moveto
260 504 321 542 388 542  curveto
465 542 510 504 523 430  curveto
585 504 648 542 712 542  curveto
807 542 855 489 855 385  curveto
855 126 lineto
855 88 858 63 864 52  curveto
869 40 882 34 903 33  curveto
936 30 lineto
945 30 lineto
945 0 lineto
668 0 lineto
668 30 lineto
677 30 lineto
710 33 lineto
731 34 744 40 750 52  curveto
755 63 758 88 758 126  curveto
758 368 lineto
758 409 753 438 742 455  curveto
731 471 712 479 684 479  curveto
637 479 585 452 530 397  curveto
530 126 lineto
533 78 lineto
534 59 537 47 542 42  curveto
547 37 559 34 578 33  curveto
611 30 lineto
620 30 lineto
620 0 lineto
343 0 lineto
343 30 lineto
352 30 lineto
385 33 lineto
406 34 419 40 425 52  curveto
430 63 433 88 433 126  curveto
433 368 lineto
433 409 428 438 417 454  curveto
406 471 387 479 360 479  curveto
309 479 257 452 204 397  curveto
204 126 lineto
204 88 207 63 213 52  curveto
219 40 232 34 252 33  curveto
286 30 lineto
295 30 lineto
295 0 lineto
18 0 lineto
18 30 lineto
27 30 lineto
60 33 lineto
78 34 90 37 95 42  curveto
100 47 104 59 105 78  curveto
108 126 lineto
108 403 lineto
105 451 lineto
104 470 100 482 95 487  curveto
90 492 78 495 60 497  curveto
27 499 lineto
18 500 lineto
18 530 lineto
204 530 lineto
204 430 lineto
closepath
fill
		} def

	/n
		{
204 430 moveto
253 504 317 542 396 542  curveto
441 542 477 527 503 497  curveto
529 467 542 425 542 373  curveto
542 126 lineto
545 78 lineto
546 59 549 47 554 42  curveto
559 37 571 34 590 33  curveto
623 30 lineto
632 30 lineto
632 0 lineto
355 0 lineto
355 30 lineto
364 30 lineto
397 33 lineto
416 34 427 37 433 42  curveto
438 47 441 59 442 78  curveto
445 126 lineto
445 358 lineto
445 403 439 435 427 453  curveto
416 471 395 479 364 479  curveto
321 479 267 452 204 398  curveto
204 126 lineto
204 88 207 63 213 52  curveto
219 40 232 34 252 33  curveto
286 30 lineto
295 30 lineto
295 0 lineto
18 0 lineto
18 30 lineto
27 30 lineto
60 33 lineto
78 34 90 37 95 42  curveto
100 47 104 59 105 78  curveto
108 126 lineto
108 403 lineto
105 451 lineto
104 470 100 482 95 487  curveto
90 492 78 495 60 497  curveto
27 499 lineto
18 500 lineto
18 530 lineto
204 530 lineto
204 430 lineto
closepath
fill
		} def

	/o
		{
297 -12 moveto
221 -12 160 12 115 62  curveto
70 112 48 180 48 265  curveto
48 350 70 418 116 467  curveto
161 517 223 542 301 542  curveto
379 542 441 517 486 467  curveto
531 418 554 351 554 266  curveto
554 179 531 111 486 61  curveto
440 12 377 -12 297 -12  curveto
closepath
299 18 moveto
343 18 380 41 409 87  curveto
437 134 452 193 452 266  curveto
452 336 437 394 408 441  curveto
380 488 344 512 301 512  curveto
258 512 222 488 193 441  curveto
165 394 150 335 150 265  curveto
150 194 165 136 193 88  curveto
221 41 257 18 299 18  curveto
closepath
fill
		} def

	/p
		{
204 60 moveto
204 -66 lineto
204 -104 207 -129 213 -140  curveto
219 -152 232 -158 252 -159  curveto
286 -162 lineto
295 -162 lineto
295 -192 lineto
18 -192 lineto
18 -162 lineto
27 -162 lineto
60 -159 lineto
78 -158 90 -155 95 -150  curveto
100 -145 104 -133 105 -114  curveto
108 -66 lineto
108 403 lineto
105 451 lineto
104 470 100 482 95 487  curveto
90 492 78 495 60 497  curveto
27 499 lineto
18 500 lineto
18 530 lineto
204 530 lineto
204 430 lineto
252 504 314 542 391 542  curveto
451 542 498 518 534 471  curveto
569 423 587 360 587 280  curveto
587 192 567 121 526 67  curveto
485 14 431 -12 364 -12  curveto
302 -12 248 11 204 60  curveto
closepath
204 98 moveto
255 60 304 41 351 41  curveto
440 41 484 112 484 254  curveto
484 404 441 479 355 479  curveto
297 479 247 452 204 396  curveto
204 98 lineto
closepath
fill
		} def

	/q
		{
436 99 moveto
389 25 327 -12 250 -12  curveto
190 -12 142 11 107 58  curveto
71 106 54 169 54 249  curveto
54 338 74 408 115 462  curveto
155 515 209 542 277 542  curveto
339 542 392 517 436 469  curveto
436 530 lineto
533 530 lineto
533 -66 lineto
533 -104 536 -129 541 -140  curveto
547 -152 560 -158 581 -159  curveto
614 -162 lineto
623 -162 lineto
623 -192 lineto
346 -192 lineto
346 -162 lineto
355 -162 lineto
388 -159 lineto
409 -158 422 -152 427 -140  curveto
433 -129 436 -104 436 -66  curveto
436 99 lineto
closepath
436 432 moveto
386 469 337 488 290 488  curveto
200 488 156 417 156 275  curveto
156 125 199 50 286 50  curveto
345 50 395 77 436 133  curveto
436 432 lineto
closepath
fill
		} def

	/r
		{
204 385 moveto
204 126 lineto
204 88 207 63 213 52  curveto
219 40 232 34 252 33  curveto
286 30 lineto
307 30 lineto
307 0 lineto
18 0 lineto
18 30 lineto
27 30 lineto
60 33 lineto
78 34 90 37 95 42  curveto
100 47 104 59 105 78  curveto
108 126 lineto
108 403 lineto
105 451 lineto
104 470 100 482 95 487  curveto
90 492 78 495 60 497  curveto
27 499 lineto
18 500 lineto
18 530 lineto
204 530 lineto
204 430 lineto
248 504 305 542 376 542  curveto
386 542 397 540 409 536  curveto
409 391 lineto
355 391 lineto
354 400 lineto
350 437 lineto
348 454 339 462 323 462  curveto
275 462 235 437 204 385  curveto
closepath
fill
		} def

	/s
		{
67 27 moveto
67 162 lineto
122 162 lineto
123 152 lineto
126 102 lineto
129 76 142 56 166 41  curveto
189 25 219 18 255 18  curveto
285 18 309 26 328 44  curveto
347 62 356 85 356 113  curveto
356 157 327 190 271 212  curveto
221 231 lineto
121 270 70 324 70 393  curveto
70 436 87 472 122 500  curveto
156 528 200 542 253 542  curveto
305 542 358 532 414 512  curveto
414 385 lineto
359 385 lineto
359 394 lineto
355 438 lineto
350 487 319 512 259 512  curveto
231 512 207 503 189 485  curveto
170 467 161 444 161 416  curveto
161 393 168 375 183 361  curveto
198 347 229 331 274 312  curveto
319 294 lineto
368 274 403 253 422 231  curveto
441 210 451 182 451 147  curveto
451 101 432 62 395 32  curveto
358 2 309 -12 250 -12  curveto
185 -12 124 0 67 27  curveto
closepath
fill
		} def

	/t
		{
352 2 moveto
327 -7 304 -12 282 -12  curveto
225 -12 184 1 158 30  curveto
133 58 120 103 120 165  curveto
120 490 lineto
42 490 lineto
42 530 lineto
120 530 lineto
120 626 lineto
216 650 lineto
216 530 lineto
364 530 lineto
364 490 lineto
216 490 lineto
216 152 lineto
216 103 222 70 233 52  curveto
244 35 265 26 296 26  curveto
311 26 330 31 352 42  curveto
352 2 lineto
closepath
fill
		} def

	/u
		{
427 0 moveto
427 99 lineto
378 25 315 -12 236 -12  curveto
191 -12 155 2 129 32  curveto
103 63 90 104 90 156  curveto
90 403 lineto
87 451 lineto
86 470 82 482 77 487  curveto
72 492 60 495 42 497  curveto
9 499 lineto
0 500 lineto
0 530 lineto
186 530 lineto
186 171 lineto
186 90 215 49 273 49  curveto
326 49 377 77 427 131  curveto
427 403 lineto
424 451 lineto
423 470 420 482 415 487  curveto
410 492 398 495 379 497  curveto
346 499 lineto
337 500 lineto
337 530 lineto
523 530 lineto
523 126 lineto
527 78 lineto
528 59 531 47 536 42  curveto
541 37 553 34 572 33  curveto
605 30 lineto
614 30 lineto
614 0 lineto
427 0 lineto
closepath
fill
		} def

	/v
		{
250 -5 moveto
79 400 lineto
61 443 48 469 40 481  curveto
32 492 21 498 8 499  curveto
0 500 lineto
0 530 lineto
229 530 lineto
229 500 lineto
220 500 lineto
194 499 lineto
168 499 156 492 156 478  curveto
156 472 166 445 186 399  curveto
305 116 lineto
428 398 lineto
447 443 457 470 457 478  curveto
457 492 446 499 423 499  curveto
398 500 lineto
388 500 lineto
388 530 lineto
545 530 lineto
545 500 lineto
535 499 lineto
515 498 500 482 487 453  curveto
463 398 lineto
280 -5 lineto
250 -5 lineto
closepath
fill
		} def

	/w
		{
205 -5 moveto
74 403 lineto
61 444 51 470 43 481  curveto
36 492 25 498 9 499  curveto
0 500 lineto
0 530 lineto
238 530 lineto
238 500 lineto
228 500 lineto
192 499 lineto
166 499 153 492 153 478  curveto
153 463 158 438 169 403  curveto
252 138 lineto
406 527 lineto
435 527 lineto
592 128 lineto
687 403 lineto
701 442 708 467 708 477  curveto
708 492 691 499 658 499  curveto
632 500 lineto
621 500 lineto
621 530 lineto
794 530 lineto
794 500 lineto
784 499 lineto
769 498 759 493 753 484  curveto
747 474 736 448 720 403  curveto
576 -5 lineto
549 -5 lineto
389 397 lineto
234 -5 lineto
205 -5 lineto
closepath
fill
		} def

	/x
		{
1 0 moveto
1 30 lineto
9 30 lineto
27 32 46 43 64 64  curveto
118 125 lineto
229 256 lineto
116 402 lineto
68 461 lineto
49 485 29 497 7 499  curveto
0 500 lineto
0 530 lineto
239 530 lineto
239 500 lineto
229 500 lineto
209 499 lineto
187 499 176 494 176 484  curveto
176 478 194 451 230 402  curveto
306 300 lineto
379 400 lineto
412 444 428 472 428 481  curveto
428 493 419 499 400 499  curveto
382 500 lineto
371 500 lineto
371 530 lineto
540 530 lineto
540 500 lineto
530 499 lineto
509 498 489 485 471 461  curveto
424 402 lineto
326 275 lineto
441 125 lineto
488 64 525 32 550 30  curveto
558 30 lineto
558 0 lineto
317 0 lineto
317 30 lineto
326 30 lineto
348 30 lineto
372 30 384 34 384 43  curveto
384 49 366 77 329 125  curveto
246 232 lineto
164 125 lineto
126 76 107 49 107 45  curveto
107 35 119 30 144 30  curveto
163 30 lineto
174 30 lineto
174 0 lineto
1 0 lineto
closepath
fill
		} def

	/y
		{
81 -192 moveto
254 0 lineto
87 401 lineto
70 444 57 471 48 482  curveto
40 492 27 498 9 499  curveto
0 500 lineto
0 530 lineto
242 530 lineto
242 500 lineto
231 500 lineto
200 499 lineto
177 499 165 493 165 481  curveto
165 477 166 472 168 466  curveto
193 401 lineto
312 117 lineto
438 403 lineto
457 445 466 470 466 479  curveto
466 493 454 499 430 499  curveto
407 500 lineto
394 500 lineto
394 530 lineto
551 530 lineto
551 500 lineto
542 499 lineto
521 498 504 479 490 444  curveto
487 438 481 424 471 402  curveto
202 -192 lineto
81 -192 lineto
closepath
fill
		} def

	/z
		{
66 0 moveto
66 30 lineto
402 500 lineto
229 500 lineto
182 499 lineto
160 499 147 497 141 492  curveto
135 487 132 476 132 459  curveto
132 445 132 434 131 424  curveto
131 414 lineto
80 414 lineto
80 530 lineto
514 530 lineto
514 500 lineto
182 36 lineto
375 36 lineto
435 38 lineto
462 38 475 50 475 73  curveto
475 110 lineto
476 122 lineto
527 122 lineto
527 0 lineto
66 0 lineto
closepath
fill
		} def

	/braceleft
		{
104 313 moveto
175 282 211 225 211 143  curveto
211 116 208 87 202 55  curveto
195 21 lineto
189 0 lineto
187 -11 186 -22 186 -33  curveto
186 -87 218 -114 281 -114  curveto
294 -114 lineto
294 -144 lineto
281 -144 lineto
231 -144 189 -130 157 -101  curveto
124 -72 108 -36 108 7  curveto
108 28 111 55 117 89  curveto
126 136 lineto
131 161 lineto
135 184 138 202 138 215  curveto
138 270 108 298 49 298  curveto
23 298 lineto
23 328 lineto
49 328 lineto
108 328 138 355 138 411  curveto
138 423 135 441 131 465  curveto
126 489 lineto
117 537 lineto
111 570 108 598 108 618  curveto
108 662 124 699 157 728  curveto
189 756 231 771 281 771  curveto
294 771 lineto
294 740 lineto
281 740 lineto
218 740 186 713 186 659  curveto
186 648 187 638 189 627  curveto
195 604 lineto
202 570 lineto
208 539 211 510 211 482  curveto
211 400 175 344 104 313  curveto
closepath
fill
		} def

	/bar
		{
162 -144 moveto
162 771 lineto
210 771 lineto
210 -144 lineto
162 -144 lineto
closepath
fill
		} def

	/braceright
		{
239 313 moveto
167 282 131 225 131 143  curveto
131 116 134 87 140 55  curveto
147 21 lineto
153 0 lineto
155 -11 156 -22 156 -33  curveto
156 -87 124 -114 61 -114  curveto
48 -114 lineto
48 -144 lineto
61 -144 lineto
111 -144 153 -130 185 -101  curveto
218 -72 234 -36 234 7  curveto
234 28 231 55 225 89  curveto
216 136 lineto
211 161 lineto
207 184 204 202 204 215  curveto
204 270 234 298 293 298  curveto
319 298 lineto
319 328 lineto
293 328 lineto
234 328 204 355 204 411  curveto
204 423 207 441 211 465  curveto
216 489 lineto
225 537 lineto
231 570 234 598 234 618  curveto
234 662 218 699 185 728  curveto
153 756 111 771 61 771  curveto
48 771 lineto
48 740 lineto
61 740 lineto
124 740 156 713 156 659  curveto
156 648 155 638 153 627  curveto
147 604 lineto
140 570 lineto
134 539 131 510 131 482  curveto
131 400 167 344 239 313  curveto
closepath
fill
		} def

	/asciitilde
		{
138 216 moveto
108 216 lineto
113 320 156 372 236 372  curveto
269 372 323 355 398 321  curveto
441 302 lineto
510 271 555 255 574 255  curveto
621 255 648 291 656 361  curveto
686 361 lineto
680 257 637 205 557 205  curveto
530 205 487 219 427 246  curveto
398 259 lineto
354 278 lineto
289 308 245 322 220 322  curveto
197 322 178 312 162 292  curveto
146 271 138 246 138 216  curveto
closepath
fill
		} def

	/exclamdown
		{
180 530 moveto
180 433 lineto
84 433 lineto
84 530 lineto
180 530 lineto
closepath
147 337 moveto
180 -48 lineto
180 -192 lineto
84 -192 lineto
84 -48 lineto
117 337 lineto
147 337 lineto
closepath
fill
		} def

	/cent
		{
313 0 moveto
313 85 lineto
244 92 188 120 145 171  curveto
102 222 81 287 81 364  curveto
81 526 158 617 313 638  curveto
313 722 lineto
343 722 lineto
343 641 lineto
396 636 445 626 491 611  curveto
491 487 lineto
437 487 lineto
436 497 lineto
435 515 434 526 434 530  curveto
434 557 428 575 415 586  curveto
402 597 378 603 343 606  curveto
343 133 lineto
353 132 361 131 366 131  curveto
397 131 439 141 491 161  curveto
491 114 lineto
445 97 396 86 343 83  curveto
343 0 lineto
313 0 lineto
closepath
313 136 moveto
313 606 lineto
227 588 184 503 184 353  curveto
184 229 227 157 313 136  curveto
closepath
fill
		} def

	/sterling
		{
123 0 moveto
123 72 lineto
163 83 191 101 205 128  curveto
219 154 226 201 226 267  curveto
226 361 lineto
141 361 lineto
141 391 lineto
226 391 lineto
226 500 lineto
226 656 286 734 406 734  curveto
451 734 495 723 539 700  curveto
539 596 lineto
491 596 lineto
490 605 lineto
488 641 lineto
486 683 460 705 411 705  curveto
376 705 353 694 341 673  curveto
328 652 322 613 322 555  curveto
322 391 lineto
437 391 lineto
437 361 lineto
322 361 lineto
322 286 lineto
322 194 276 123 184 72  curveto
539 72 lineto
539 0 lineto
123 0 lineto
closepath
fill
		} def

	/fraction
		{
-268 -18 moveto
262 740 lineto
304 740 lineto
-226 -18 lineto
-268 -18 lineto
closepath
fill
		} def

	/yen
		{
264 192 moveto
114 192 lineto
114 222 lineto
264 222 lineto
264 325 lineto
114 325 lineto
114 355 lineto
264 355 lineto
119 577 lineto
69 649 lineto
57 668 47 679 40 683  curveto
33 687 18 690 -4 691  curveto
-15 692 lineto
-15 722 lineto
258 722 lineto
258 692 lineto
249 692 lineto
222 692 lineto
199 692 187 686 187 675  curveto
187 665 194 650 207 630  curveto
343 417 lineto
489 640 lineto
502 660 508 672 508 678  curveto
508 687 499 692 481 692  curveto
448 692 lineto
436 692 lineto
436 722 lineto
644 722 lineto
644 692 lineto
635 691 lineto
610 690 lineto
591 689 575 678 562 657  curveto
506 575 lineto
361 355 lineto
511 355 lineto
511 325 lineto
361 325 lineto
361 222 lineto
511 222 lineto
511 192 lineto
361 192 lineto
361 126 lineto
361 88 364 63 369 52  curveto
375 40 388 34 409 33  curveto
442 30 lineto
451 30 lineto
451 0 lineto
174 0 lineto
174 30 lineto
183 30 lineto
216 33 lineto
237 34 250 40 256 52  curveto
261 63 264 88 264 126  curveto
264 192 lineto
closepath
fill
		} def

	/florin
		{
114 -144 moveto
214 361 lineto
116 361 lineto
116 391 lineto
220 391 lineto
232 450 lineto
270 639 356 734 492 734  curveto
520 734 550 729 581 720  curveto
581 596 lineto
533 596 lineto
532 605 lineto
531 618 531 631 531 644  curveto
531 684 508 705 461 705  curveto
428 705 403 690 386 661  curveto
370 631 352 570 334 478  curveto
317 391 lineto
439 391 lineto
439 361 lineto
311 361 lineto
210 -144 lineto
114 -144 lineto
closepath
fill
		} def

	/section
		{
84 -125 moveto
84 -18 lineto
132 -18 lineto
133 -27 lineto
134 -50 lineto
136 -72 151 -91 182 -105  curveto
212 -119 250 -126 295 -126  curveto
338 -126 372 -116 399 -94  curveto
425 -72 438 -44 438 -8  curveto
438 15 431 33 417 47  curveto
402 60 372 76 325 96  curveto
272 118 lineto
205 146 159 173 133 198  curveto
108 223 95 255 95 292  curveto
95 342 123 389 179 434  curveto
124 462 97 504 97 560  curveto
97 615 118 659 160 692  curveto
202 724 259 740 331 740  curveto
388 740 444 731 500 713  curveto
500 602 lineto
452 602 lineto
451 611 lineto
450 641 lineto
449 660 436 677 410 690  curveto
385 704 354 710 317 710  curveto
277 710 245 699 220 676  curveto
194 653 182 623 182 588  curveto
182 541 215 505 282 480  curveto
334 461 lineto
454 416 514 356 514 280  curveto
514 233 487 187 435 142  curveto
493 110 522 65 522 5  curveto
522 -44 502 -84 460 -113  curveto
419 -142 362 -156 289 -156  curveto
225 -156 156 -146 84 -125  curveto
closepath
409 160 moveto
429 187 438 217 438 250  curveto
438 289 416 319 373 341  curveto
270 386 lineto
202 416 lineto
185 386 176 358 176 332  curveto
176 301 188 276 212 254  curveto
235 233 278 211 338 187  curveto
409 160 lineto
closepath
fill
		} def

	/currency
		{
161 197 moveto
67 104 lineto
46 125 lineto
140 218 lineto
104 264 86 312 86 361  curveto
86 410 104 458 140 503  curveto
46 598 lineto
67 619 lineto
161 525 lineto
206 560 253 578 303 578  curveto
354 578 401 560 446 525  curveto
540 619 lineto
561 598 lineto
467 503 lineto
502 458 520 410 520 361  curveto
520 312 502 264 467 218  curveto
561 125 lineto
540 104 lineto
446 197 lineto
401 162 354 145 303 145  curveto
253 145 206 162 161 197  curveto
closepath
301 195 moveto
348 195 388 211 420 244  curveto
453 276 469 315 469 361  curveto
469 407 453 446 420 478  curveto
388 510 349 526 303 526  curveto
258 526 219 510 186 478  curveto
154 446 138 407 138 361  curveto
138 316 154 277 186 244  curveto
218 212 257 195 301 195  curveto
closepath
fill
		} def

	/quotesingle
		{
105 505 moveto
60 771 lineto
180 771 lineto
135 505 lineto
105 505 lineto
closepath
fill
		} def

	/quotedblleft
		{
144 614 moveto
192 614 lineto
192 494 lineto
72 494 lineto
72 598 lineto
72 639 74 668 78 684  curveto
83 699 93 716 110 733  curveto
133 756 160 769 192 771  curveto
192 740 lineto
160 738 144 706 144 646  curveto
144 614 lineto
closepath
337 614 moveto
385 614 lineto
385 494 lineto
265 494 lineto
265 598 lineto
265 640 267 668 271 684  curveto
276 699 286 715 303 733  curveto
326 756 353 769 385 771  curveto
385 740 lineto
353 738 337 706 337 646  curveto
337 614 lineto
closepath
fill
		} def

	/guillemotleft
		{
279 457 moveto
145 265 lineto
279 73 lineto
254 54 lineto
48 265 lineto
254 476 lineto
279 457 lineto
closepath
470 457 moveto
336 265 lineto
470 73 lineto
445 54 lineto
239 265 lineto
445 476 lineto
470 457 lineto
closepath
fill
		} def

	/guilsinglleft
		{
279 457 moveto
145 265 lineto
279 73 lineto
254 54 lineto
48 265 lineto
254 476 lineto
279 457 lineto
closepath
fill
		} def

	/guilsinglright
		{
59 457 moveto
193 265 lineto
59 73 lineto
84 54 lineto
290 265 lineto
84 476 lineto
59 457 lineto
closepath
fill
		} def

	/fi
		{
125 0 moveto
125 625 lineto
625 625 lineto
625 0 lineto
125 0 lineto
closepath
156 31 moveto
593 31 lineto
593 593 lineto
156 593 lineto
156 31 lineto
closepath
fill
		} def

	/fl
		{
125 0 moveto
125 625 lineto
625 625 lineto
625 0 lineto
125 0 lineto
closepath
156 31 moveto
593 31 lineto
593 593 lineto
156 593 lineto
156 31 lineto
closepath
fill
		} def

	/endash
		{
72 265 moveto
72 325 lineto
505 325 lineto
505 265 lineto
72 265 lineto
closepath
fill
		} def

	/dagger
		{
255 -144 moveto
279 418 lineto
93 397 lineto
93 469 lineto
279 448 lineto
255 722 lineto
352 722 lineto
328 448 lineto
515 469 lineto
515 397 lineto
328 418 lineto
352 -144 lineto
255 -144 lineto
closepath
fill
		} def

	/daggerdbl
		{
255 -144 moveto
279 129 lineto
93 108 lineto
93 180 lineto
279 159 lineto
279 418 lineto
93 397 lineto
93 469 lineto
279 448 lineto
255 722 lineto
352 722 lineto
328 448 lineto
515 469 lineto
515 397 lineto
328 418 lineto
328 159 lineto
515 180 lineto
515 108 lineto
328 129 lineto
352 -144 lineto
255 -144 lineto
closepath
fill
		} def

	/periodcentered
		{
72 239 moveto
72 360 lineto
192 360 lineto
192 239 lineto
72 239 lineto
closepath
fill
		} def

	/paragraph
		{
271 -144 moveto
271 361 lineto
202 361 147 380 105 417  curveto
63 454 42 504 42 564  curveto
42 672 97 726 209 726  curveto
245 725 lineto
296 723 lineto
353 722 lineto
463 722 lineto
463 -144 lineto
427 -144 lineto
427 674 lineto
307 674 lineto
307 -144 lineto
271 -144 lineto
closepath
fill
		} def

	/bullet
		{
300 108 moveto
242 108 192 129 150 172  curveto
108 215 87 266 87 325  curveto
87 385 108 436 150 478  curveto
193 520 244 542 304 542  curveto
364 542 415 520 457 478  curveto
499 435 521 384 521 323  curveto
521 263 499 212 456 171  curveto
413 129 361 108 300 108  curveto
closepath
fill
		} def

	/quotesinglbase
		{
120 0 moveto
72 0 lineto
72 120 lineto
192 120 lineto
192 15 lineto
192 -25 190 -54 186 -69  curveto
181 -85 170 -101 154 -118  curveto
131 -142 104 -154 72 -156  curveto
72 -126 lineto
104 -123 120 -91 120 -31  curveto
120 0 lineto
closepath
fill
		} def

	/quotedblbase
		{
312 0 moveto
265 0 lineto
265 120 lineto
385 120 lineto
385 15 lineto
385 -25 383 -54 378 -69  curveto
374 -85 363 -101 346 -118  curveto
324 -142 297 -154 265 -156  curveto
265 -126 lineto
297 -123 312 -91 312 -31  curveto
312 0 lineto
closepath
120 0 moveto
72 0 lineto
72 120 lineto
192 120 lineto
192 15 lineto
192 -25 190 -54 186 -69  curveto
181 -85 170 -101 154 -118  curveto
131 -142 104 -154 72 -156  curveto
72 -126 lineto
104 -123 120 -91 120 -31  curveto
120 0 lineto
closepath
fill
		} def

	/quotedblright
		{
312 650 moveto
265 650 lineto
265 771 lineto
385 771 lineto
385 666 lineto
385 625 383 596 378 581  curveto
374 565 363 548 346 531  curveto
324 508 297 496 265 494  curveto
265 523 lineto
297 526 312 558 312 619  curveto
312 650 lineto
closepath
120 650 moveto
72 650 lineto
72 771 lineto
192 771 lineto
192 666 lineto
192 625 190 596 186 581  curveto
181 565 170 548 154 531  curveto
131 508 104 496 72 494  curveto
72 523 lineto
104 526 120 558 120 619  curveto
120 650 lineto
closepath
fill
		} def

	/guillemotright
		{
250 457 moveto
384 265 lineto
250 73 lineto
275 54 lineto
481 265 lineto
275 476 lineto
250 457 lineto
closepath
59 457 moveto
193 265 lineto
59 73 lineto
84 54 lineto
290 265 lineto
84 476 lineto
59 457 lineto
closepath
fill
		} def

	/ellipsis
		{
118 0 moveto
118 96 lineto
214 96 lineto
214 0 lineto
118 0 lineto
closepath
452 0 moveto
452 96 lineto
548 96 lineto
548 0 lineto
452 0 lineto
closepath
785 0 moveto
785 96 lineto
881 96 lineto
881 0 lineto
785 0 lineto
closepath
fill
		} def

	/perthousand
		{
16 -18 moveto
597 740 lineto
658 740 lineto
77 -18 lineto
16 -18 lineto
closepath
162 361 moveto
118 361 81 378 53 412  curveto
24 446 10 489 10 542  curveto
10 595 25 638 53 672  curveto
82 705 119 722 164 722  curveto
209 722 246 705 274 672  curveto
303 638 317 595 317 542  curveto
317 488 303 444 274 411  curveto
246 378 208 361 162 361  curveto
closepath
162 391 moveto
217 391 245 442 245 543  curveto
245 643 218 692 164 692  curveto
110 692 83 642 83 542  curveto
83 442 109 391 162 391  curveto
closepath
508 0 moveto
464 0 428 17 399 51  curveto
371 85 356 128 356 180  curveto
356 233 371 277 399 310  curveto
428 344 465 361 510 361  curveto
555 361 592 344 621 311  curveto
650 277 664 234 664 181  curveto
664 127 650 83 621 50  curveto
592 16 554 0 508 0  curveto
closepath
509 29 moveto
564 29 592 80 592 182  curveto
592 281 565 331 510 331  curveto
456 331 429 281 429 181  curveto
429 80 455 29 509 29  curveto
closepath
857 0 moveto
813 0 777 17 749 51  curveto
720 85 706 128 706 180  curveto
706 233 720 277 749 310  curveto
778 344 815 361 860 361  curveto
905 361 942 344 970 311  curveto
999 277 1013 234 1013 181  curveto
1013 127 999 83 970 50  curveto
942 16 904 0 857 0  curveto
closepath
858 29 moveto
913 29 941 80 941 182  curveto
941 281 914 331 860 331  curveto
805 331 778 281 778 181  curveto
778 80 805 29 858 29  curveto
closepath
fill
		} def

	/questiondown
		{
330 530 moveto
330 433 lineto
233 433 lineto
233 530 lineto
330 530 lineto
closepath
330 337 moveto
330 328 lineto
330 261 306 205 260 159  curveto
240 140 lineto
179 80 149 17 149 -47  curveto
149 -136 192 -180 279 -180  curveto
347 -180 383 -156 386 -106  curveto
388 -55 lineto
389 -44 lineto
437 -44 lineto
437 -178 lineto
375 -200 316 -210 259 -210  curveto
195 -210 144 -196 105 -167  curveto
66 -138 46 -99 46 -50  curveto
46 1 78 52 143 101  curveto
161 115 173 125 180 132  curveto
198 148 lineto
221 170 233 211 233 270  curveto
233 337 lineto
330 337 lineto
closepath
fill
		} def

	/grave
		{
388 626 moveto
343 626 lineto
144 783 lineto
271 783 lineto
388 626 lineto
closepath
fill
		} def

	/acute
		{
213 626 moveto
331 783 lineto
458 783 lineto
259 626 lineto
213 626 lineto
closepath
fill
		} def

	/circumflex
		{
129 626 moveto
247 783 lineto
355 783 lineto
472 626 lineto
430 626 lineto
301 734 lineto
171 626 lineto
129 626 lineto
closepath
fill
		} def

	/tilde
		{
141 626 moveto
154 702 191 741 253 741  curveto
273 741 292 735 310 722  curveto
327 710 lineto
344 698 361 692 378 692  curveto
410 692 430 708 437 740  curveto
466 740 lineto
454 664 416 626 354 626  curveto
335 626 316 632 298 645  curveto
281 656 lineto
263 669 246 675 229 675  curveto
199 675 180 659 171 626  curveto
141 626 lineto
closepath
fill
		} def

	/macron
		{
48 722 moveto
48 783 lineto
452 783 lineto
452 722 lineto
48 722 lineto
closepath
fill
		} def

	/breve
		{
138 783 moveto
170 783 lineto
185 724 229 695 301 695  curveto
373 695 417 724 432 783  curveto
463 783 lineto
457 735 439 697 410 668  curveto
381 640 344 626 301 626  curveto
257 626 221 640 191 668  curveto
162 697 144 735 138 783  curveto
closepath
fill
		} def

	/dotaccent
		{
252 626 moveto
252 722 lineto
349 722 lineto
349 626 lineto
252 626 lineto
closepath
fill
		} def

	/dieresis
		{
162 626 moveto
162 710 lineto
247 710 lineto
247 626 lineto
162 626 lineto
closepath
355 626 moveto
355 710 lineto
439 710 lineto
439 626 lineto
355 626 lineto
closepath
fill
		} def

	/ring
		{
299 626 moveto
269 626 243 637 222 658  curveto
201 680 190 706 190 737  curveto
190 767 201 794 222 815  curveto
244 837 270 848 301 848  curveto
331 848 357 837 379 815  curveto
401 794 412 768 412 737  curveto
412 706 401 679 379 658  curveto
357 637 331 626 299 626  curveto
closepath
300 659 moveto
322 659 341 667 356 682  curveto
371 697 378 715 378 737  curveto
378 759 371 777 356 792  curveto
341 807 322 814 301 814  curveto
279 814 261 807 246 792  curveto
231 777 223 758 223 737  curveto
223 716 231 697 246 682  curveto
261 667 279 659 300 659  curveto
closepath
fill
		} def

	/cedilla
		{
216 -200 moveto
216 -167 lineto
236 -172 251 -175 264 -175  curveto
300 -175 318 -161 318 -134  curveto
318 -101 287 -85 227 -85  curveto
273 0 lineto
312 0 lineto
279 -58 lineto
350 -62 385 -86 385 -129  curveto
385 -152 376 -171 357 -187  curveto
338 -203 315 -210 288 -210  curveto
264 -210 240 -207 216 -200  curveto
closepath
fill
		} def

	/hungarumlaut
		{
125 0 moveto
125 625 lineto
625 625 lineto
625 0 lineto
125 0 lineto
closepath
156 31 moveto
593 31 lineto
593 593 lineto
156 593 lineto
156 31 lineto
closepath
fill
		} def

	/ogonek
		{
391 -133 moveto
391 -166 lineto
368 -175 345 -180 319 -180  curveto
247 -180 210 -154 210 -103  curveto
210 -62 236 -28 288 0  curveto
340 0 lineto
298 -25 277 -54 277 -88  curveto
277 -123 298 -141 342 -141  curveto
359 -141 375 -138 391 -133  curveto
closepath
fill
		} def

	/caron
		{
472 783 moveto
355 626 lineto
247 626 lineto
129 783 lineto
171 783 lineto
301 674 lineto
430 783 lineto
472 783 lineto
closepath
fill
		} def

	/emdash
		{
72 265 moveto
72 325 lineto
505 325 lineto
505 265 lineto
72 265 lineto
closepath
fill
		} def

	/AE
		{
894 0 moveto
371 0 lineto
371 30 lineto
380 30 lineto
413 33 lineto
432 34 444 37 449 42  curveto
454 47 457 59 458 78  curveto
461 126 lineto
461 222 lineto
199 222 lineto
139 125 lineto
130 111 123 99 116 87  curveto
107 71 102 61 100 58  curveto
97 53 96 48 96 45  curveto
96 37 107 33 131 33  curveto
136 33 146 32 162 31  curveto
173 31 lineto
173 0 lineto
0 0 lineto
0 31 lineto
10 31 lineto
30 32 48 46 64 73  curveto
97 125 lineto
459 722 lineto
865 722 lineto
865 596 lineto
811 596 lineto
810 605 lineto
808 646 lineto
808 661 805 671 801 676  curveto
797 680 787 683 771 683  curveto
722 683 lineto
564 683 lineto
564 394 lineto
702 395 lineto
733 396 lineto
747 396 756 397 760 400  curveto
764 403 766 411 767 423  curveto
767 426 767 433 768 445  curveto
769 454 lineto
814 454 lineto
814 295 lineto
769 295 lineto
768 304 lineto
766 328 763 343 757 348  curveto
751 353 732 355 702 355  curveto
564 355 lineto
564 126 lineto
564 88 568 65 577 55  curveto
586 46 610 42 647 42  curveto
724 42 lineto
792 44 lineto
819 44 834 56 835 79  curveto
837 114 lineto
838 123 lineto
892 123 lineto
894 0 lineto
closepath
224 262 moveto
461 262 lineto
461 653 lineto
224 262 lineto
closepath
fill
		} def

	/ordfeminine
		{
273 403 moveto
235 367 192 349 145 349  curveto
113 349 86 359 65 378  curveto
43 397 33 421 33 450  curveto
33 531 102 572 240 572  curveto
273 572 lineto
273 607 lineto
273 676 245 710 189 710  curveto
132 710 103 695 102 664  curveto
100 630 lineto
99 620 lineto
57 620 lineto
57 708 lineto
102 730 151 741 202 741  curveto
259 741 300 731 323 711  curveto
346 691 358 656 358 607  curveto
358 459 lineto
358 418 369 397 390 397  curveto
398 397 407 399 418 403  curveto
418 372 lineto
384 356 358 349 341 349  curveto
311 349 289 367 273 403  curveto
closepath
273 439 moveto
273 543 lineto
247 543 lineto
160 543 117 515 117 460  curveto
117 418 139 397 184 397  curveto
214 397 244 411 273 439  curveto
closepath
fill
		} def

	/Lslash
		{
21 0 moveto
21 30 lineto
29 30 lineto
62 33 lineto
83 34 96 40 102 52  curveto
108 63 111 88 111 126  curveto
111 365 lineto
21 312 lineto
21 354 lineto
111 406 lineto
111 596 lineto
111 634 108 659 102 670  curveto
96 681 83 688 62 689  curveto
29 691 lineto
21 692 lineto
21 722 lineto
304 722 lineto
304 692 lineto
294 691 lineto
261 689 lineto
241 688 228 681 222 670  curveto
216 659 213 634 213 596  curveto
213 465 lineto
346 542 lineto
346 500 lineto
213 424 lineto
213 126 lineto
213 83 216 58 223 52  curveto
229 45 254 42 297 42  curveto
371 42 lineto
417 42 447 44 462 50  curveto
477 55 484 67 485 85  curveto
487 128 lineto
487 138 lineto
539 138 lineto
539 0 lineto
21 0 lineto
closepath
fill
		} def

	/Oslash
		{
167 60 moveto
99 -18 lineto
51 -18 lineto
140 86 lineto
80 156 51 250 51 370  curveto
51 481 81 571 143 638  curveto
204 706 285 740 385 740  curveto
472 740 549 713 616 658  curveto
682 740 lineto
726 740 lineto
642 631 lineto
698 561 726 469 726 354  curveto
726 240 695 150 633 83  curveto
571 15 489 -18 385 -18  curveto
302 -18 229 7 167 60  curveto
closepath
196 154 moveto
567 600 lineto
527 672 467 708 388 708  curveto
317 708 261 677 220 615  curveto
180 554 159 471 159 365  curveto
159 281 172 211 196 154  curveto
closepath
215 117 moveto
253 49 310 15 387 15  curveto
459 15 515 45 556 106  curveto
597 167 617 251 617 359  curveto
617 436 607 504 586 563  curveto
215 117 lineto
closepath
fill
		} def

	/OE
		{
989 0 moveto
549 0 lineto
549 31 lineto
500 -1 445 -18 382 -18  curveto
281 -18 201 16 141 84  curveto
81 153 51 245 51 361  curveto
51 476 80 568 140 637  curveto
199 706 278 741 376 741  curveto
441 741 499 723 551 687  curveto
551 722 lineto
962 722 lineto
962 596 lineto
908 596 lineto
907 605 lineto
906 630 905 643 905 646  curveto
905 662 903 672 898 676  curveto
894 680 884 683 869 683  curveto
818 683 lineto
661 683 lineto
661 394 lineto
799 395 lineto
830 396 lineto
844 396 853 397 857 400  curveto
861 403 863 411 864 423  curveto
864 426 864 433 865 445  curveto
866 454 lineto
911 454 lineto
911 295 lineto
866 295 lineto
865 304 lineto
863 328 859 343 854 348  curveto
848 353 830 355 799 355  curveto
661 355 lineto
661 126 lineto
661 88 665 65 674 55  curveto
683 46 707 42 744 42  curveto
821 42 lineto
890 44 lineto
917 44 931 56 933 79  curveto
934 114 lineto
935 123 lineto
989 123 lineto
989 0 lineto
closepath
551 292 moveto
551 424 lineto
551 531 539 605 514 646  curveto
490 687 447 708 384 708  curveto
314 708 259 677 219 615  curveto
180 554 160 469 160 361  curveto
160 255 180 171 219 108  curveto
259 45 313 14 380 14  curveto
440 14 484 36 510 80  curveto
537 124 551 194 551 292  curveto
closepath
fill
		} def

	/ordmasculine
		{
211 349 moveto
157 349 114 367 82 403  curveto
49 438 33 486 33 545  curveto
33 604 49 652 82 687  curveto
114 723 158 740 213 740  curveto
268 740 312 723 345 687  curveto
378 652 394 605 394 545  curveto
394 485 378 437 345 402  curveto
312 367 268 349 211 349  curveto
closepath
212 379 moveto
273 379 304 434 304 543  curveto
304 655 274 710 213 710  curveto
153 710 123 655 123 543  curveto
123 434 153 379 212 379  curveto
closepath
fill
		} def

	/ae
		{
767 21 moveto
697 0 641 -12 600 -12  curveto
508 -12 435 24 382 97  curveto
317 24 255 -12 197 -12  curveto
151 -12 113 2 83 30  curveto
54 59 39 94 39 137  curveto
39 254 134 313 324 313  curveto
344 313 lineto
344 379 lineto
344 463 312 504 249 504  curveto
185 504 151 473 145 409  curveto
144 400 lineto
79 400 lineto
79 497 lineto
142 527 200 542 251 542  curveto
326 542 380 521 416 479  curveto
458 521 509 542 567 542  curveto
631 542 680 520 714 477  curveto
748 434 765 372 765 291  curveto
765 282 lineto
441 282 lineto
441 116 500 33 617 33  curveto
664 33 713 45 764 69  curveto
767 21 lineto
closepath
344 97 moveto
344 283 lineto
321 283 lineto
201 283 141 239 141 151  curveto
141 120 150 95 170 75  curveto
190 55 215 44 244 44  curveto
273 44 306 62 344 97  curveto
closepath
443 312 moveto
663 312 lineto
663 334 lineto
663 450 629 508 561 508  curveto
525 508 496 491 475 456  curveto
454 420 443 373 443 312  curveto
closepath
fill
		} def

	/dotlessi
		{
204 530 moveto
204 126 lineto
204 88 207 63 213 52  curveto
219 40 232 34 252 33  curveto
286 30 lineto
295 30 lineto
295 0 lineto
18 0 lineto
18 30 lineto
27 30 lineto
60 33 lineto
78 34 90 37 95 42  curveto
100 47 104 59 105 78  curveto
108 126 lineto
108 403 lineto
105 451 lineto
104 470 100 482 95 487  curveto
90 492 78 495 60 497  curveto
27 499 lineto
18 500 lineto
18 530 lineto
204 530 lineto
closepath
fill
		} def

	/lslash
		{
219 771 moveto
219 479 lineto
328 542 lineto
328 500 lineto
219 437 lineto
219 126 lineto
219 88 222 63 228 52  curveto
234 40 247 34 268 33  curveto
301 30 lineto
310 30 lineto
310 0 lineto
33 0 lineto
33 30 lineto
42 30 lineto
75 33 lineto
94 34 106 37 111 42  curveto
116 47 119 59 120 78  curveto
123 126 lineto
123 382 lineto
15 319 lineto
15 361 lineto
123 423 lineto
123 644 lineto
120 692 lineto
119 711 116 723 111 728  curveto
106 733 94 736 75 737  curveto
42 740 lineto
33 740 lineto
33 771 lineto
219 771 lineto
closepath
fill
		} def

	/oslash
		{
139 38 moveto
95 -12 lineto
48 -12 lineto
112 63 lineto
69 121 48 188 48 265  curveto
48 349 70 416 115 466  curveto
160 516 220 542 294 542  curveto
352 542 407 523 459 487  curveto
504 542 lineto
554 542 lineto
485 460 lineto
531 408 554 342 554 265  curveto
554 180 531 112 486 62  curveto
441 12 381 -12 305 -12  curveto
239 -12 184 4 139 38  curveto
closepath
174 137 moveto
413 430 lineto
386 485 349 512 302 512  curveto
259 512 223 488 194 440  curveto
165 392 150 333 150 262  curveto
150 219 158 177 174 137  curveto
closepath
193 97 moveto
221 44 256 18 299 18  curveto
342 18 378 41 407 88  curveto
437 135 452 192 452 261  curveto
452 308 444 352 427 391  curveto
193 97 lineto
closepath
fill
		} def

	/oe
		{
856 22 moveto
791 0 735 -12 690 -12  curveto
645 -12 607 -4 577 9  curveto
546 24 513 51 477 90  curveto
424 21 362 -12 292 -12  curveto
219 -12 161 13 115 64  curveto
70 115 48 182 48 264  curveto
48 349 70 416 115 466  curveto
161 516 221 542 297 542  curveto
375 542 434 509 473 443  curveto
523 508 585 541 660 541  curveto
723 541 771 520 805 477  curveto
839 434 856 373 856 294  curveto
856 285 lineto
533 285 lineto
533 119 590 36 704 36  curveto
763 36 814 47 856 71  curveto
856 22 lineto
closepath
151 266 moveto
151 194 165 135 194 87  curveto
223 40 260 17 304 17  curveto
387 17 429 102 429 273  curveto
429 431 388 511 305 511  curveto
261 511 225 487 195 441  curveto
166 394 151 336 151 266  curveto
closepath
533 316 moveto
753 316 lineto
753 337 lineto
753 454 719 512 651 512  curveto
615 512 586 494 565 459  curveto
544 423 533 376 533 316  curveto
closepath
fill
		} def

	/germandbls
		{
304 1 moveto
304 111 lineto
352 111 lineto
353 102 lineto
354 67 lineto
357 34 376 18 412 18  curveto
438 18 459 26 475 42  curveto
491 59 500 81 500 108  curveto
500 144 480 179 441 212  curveto
349 293 lineto
305 332 283 371 283 411  curveto
283 435 296 463 321 496  curveto
334 513 lineto
360 546 373 585 373 630  curveto
373 712 345 752 289 752  curveto
258 752 236 741 223 717  curveto
210 693 204 652 204 593  curveto
204 126 lineto
207 77 lineto
207 58 209 46 215 41  curveto
221 35 235 32 255 30  curveto
265 30 lineto
265 0 lineto
18 0 lineto
18 30 lineto
27 30 lineto
60 33 lineto
78 34 90 37 95 42  curveto
100 47 104 59 105 78  curveto
108 126 lineto
108 542 lineto
108 632 121 695 148 730  curveto
174 765 221 783 289 783  curveto
340 783 382 771 415 746  curveto
447 722 463 691 463 653  curveto
463 624 442 586 398 541  curveto
380 521 lineto
355 495 343 472 343 454  curveto
343 433 362 406 400 373  curveto
486 300 lineto
547 248 578 195 578 142  curveto
578 98 562 61 531 31  curveto
499 2 460 -12 413 -12  curveto
379 -12 343 -7 304 1  curveto
closepath
fill
		} def

	/.notdef
		{
0 0 moveto
1000 0 lineto
1000 1000 lineto
0 1000 lineto
0 0 lineto
closepath
50 50 moveto
950 50 lineto
950 950 lineto
50 950 lineto
50 50 lineto
closepath
fill
		} def

	end				% close glyph dict. 
	currentdict			% actually put dict on the stack
	end			% close the dictionary now
	/LucidaBright exch definefont pop
/LucidaBright findfont 13.0 scalefont setfont
(0.5) show
Q
5.0 20.0 translate
Q
q
1 209 187 OPL
209 192
-5.0 -20.0 translate
204.0 227.0 moveto
q 1 -1 scale
/LucidaBright findfont 13.0 scalefont setfont
(1.0) show
Q
5.0 20.0 translate
Q
q
1 294 187 OPL
294 192
-5.0 -20.0 translate
289.0 227.0 moveto
q 1 -1 scale
/LucidaBright findfont 13.0 scalefont setfont
(1.5) show
Q
5.0 20.0 translate
Q
q
1 379 187 OPL
379 192
-5.0 -20.0 translate
374.0 227.0 moveto
q 1 -1 scale
/LucidaBright findfont 13.0 scalefont setfont
(2.0) show
Q
5.0 20.0 translate
Q
Q
q
1 39 44 OPL
36 44
1 39 26 OPL
36 26
1 39 62 OPL
36 62
1 39 80 OPL
36 80
1 39 115 OPL
36 115
1 39 133 OPL
36 133
1 39 151 OPL
36 151
1 39 169 OPL
36 169
1 39 205 OPL
36 205
1 39 223 OPL
36 223
1 39 241 OPL
36 241
1 39 259 OPL
36 259
1 39 294 OPL
36 294
1 39 312 OPL
36 312
1 39 348 OPL
36 348
1 39 330 OPL
36 330
1 39 366 OPL
39 8
Q
q
q
1 39 366 OPL
33 366
-5.0 -20.0 translate
q
6 381 7 13 rc
6.0 392.0 moveto
q 1 -1 scale
9 dict begin
/FontType 3 def
/FontMatrix [0.0010 0 0 0.0010 0 0]def
/FontBBox [0 -206 1090 806 ] def
	/Encoding 256 array def
			0 1 255 {Encoding exch /.notdef put}for
		Encoding 32 /space put
		Encoding 33 /exclam put
		Encoding 34 /quotedbl put
		Encoding 35 /numbersign put
		Encoding 36 /dollar put
		Encoding 37 /percent put
		Encoding 38 /ampersand put
		Encoding 39 /quoteright put
		Encoding 40 /parenleft put
		Encoding 41 /parenright put
		Encoding 42 /asterisk put
		Encoding 43 /plus put
		Encoding 44 /comma put
		Encoding 45 /hyphen put
		Encoding 46 /period put
		Encoding 47 /slash put
		Encoding 48 /zero put
		Encoding 49 /one put
		Encoding 50 /two put
		Encoding 51 /three put
		Encoding 52 /four put
		Encoding 53 /five put
		Encoding 54 /six put
		Encoding 55 /seven put
		Encoding 56 /eight put
		Encoding 57 /nine put
		Encoding 58 /colon put
		Encoding 59 /semicolon put
		Encoding 60 /less put
		Encoding 61 /equal put
		Encoding 62 /greater put
		Encoding 63 /question put
		Encoding 64 /at put
		Encoding 65 /A put
		Encoding 66 /B put
		Encoding 67 /C put
		Encoding 68 /D put
		Encoding 69 /E put
		Encoding 70 /F put
		Encoding 71 /G put
		Encoding 72 /H put
		Encoding 73 /I put
		Encoding 74 /J put
		Encoding 75 /K put
		Encoding 76 /L put
		Encoding 77 /M put
		Encoding 78 /N put
		Encoding 79 /O put
		Encoding 80 /P put
		Encoding 81 /Q put
		Encoding 82 /R put
		Encoding 83 /S put
		Encoding 84 /T put
		Encoding 85 /U put
		Encoding 86 /V put
		Encoding 87 /W put
		Encoding 88 /X put
		Encoding 89 /Y put
		Encoding 90 /Z put
		Encoding 91 /bracketleft put
		Encoding 92 /backslash put
		Encoding 93 /bracketright put
		Encoding 94 /asciicircum put
		Encoding 95 /underscore put
		Encoding 96 /quoteleft put
		Encoding 97 /a put
		Encoding 98 /b put
		Encoding 99 /c put
		Encoding 100 /d put
		Encoding 101 /e put
		Encoding 102 /f put
		Encoding 103 /g put
		Encoding 104 /h put
		Encoding 105 /i put
		Encoding 106 /j put
		Encoding 107 /k put
		Encoding 108 /l put
		Encoding 109 /m put
		Encoding 110 /n put
		Encoding 111 /o put
		Encoding 112 /p put
		Encoding 113 /q put
		Encoding 114 /r put
		Encoding 115 /s put
		Encoding 116 /t put
		Encoding 117 /u put
		Encoding 118 /v put
		Encoding 119 /w put
		Encoding 120 /x put
		Encoding 121 /y put
		Encoding 122 /z put
		Encoding 123 /braceleft put
		Encoding 124 /bar put
		Encoding 125 /braceright put
		Encoding 126 /asciitilde put
		Encoding 161 /exclamdown put
		Encoding 162 /cent put
		Encoding 163 /sterling put
		Encoding 164 /fraction put
		Encoding 165 /yen put
		Encoding 166 /florin put
		Encoding 167 /section put
		Encoding 168 /currency put
		Encoding 169 /quotesingle put
		Encoding 170 /quotedblleft put
		Encoding 171 /guillemotleft put
		Encoding 172 /guilsinglleft put
		Encoding 173 /guilsinglright put
		Encoding 174 /fi put
		Encoding 175 /fl put
		Encoding 177 /endash put
		Encoding 178 /dagger put
		Encoding 179 /daggerdbl put
		Encoding 180 /periodcentered put
		Encoding 182 /paragraph put
		Encoding 183 /bullet put
		Encoding 184 /quotesinglbase put
		Encoding 185 /quotedblbase put
		Encoding 186 /quotedblright put
		Encoding 187 /guillemotright put
		Encoding 188 /ellipsis put
		Encoding 189 /perthousand put
		Encoding 191 /questiondown put
		Encoding 193 /grave put
		Encoding 194 /acute put
		Encoding 195 /circumflex put
		Encoding 196 /tilde put
		Encoding 197 /macron put
		Encoding 198 /breve put
		Encoding 199 /dotaccent put
		Encoding 200 /dieresis put
		Encoding 202 /ring put
		Encoding 203 /cedilla put
		Encoding 205 /hungarumlaut put
		Encoding 206 /ogonek put
		Encoding 207 /caron put
		Encoding 208 /emdash put
		Encoding 225 /AE put
		Encoding 227 /ordfeminine put
		Encoding 232 /Lslash put
		Encoding 233 /Oslash put
		Encoding 234 /OE put
		Encoding 235 /ordmasculine put
		Encoding 241 /ae put
		Encoding 245 /dotlessi put
		Encoding 248 /lslash put
		Encoding 249 /oslash put
		Encoding 250 /oe put
		Encoding 251 /germandbls put
	/BuildGlyph
		{ 2 copy exch /Metrics get exch 
			2 copy known {get}{pop pop 1000.0} ifelse
			0
			0 -206 1090 806
			setcachedevice
			exch /CharProcs get exch
			2 copy known not
					{pop /.notdef}
				if
			get exec
		} bind def

	/BuildChar
		{ 1 index /Encoding get exch get
		  1 index /BuildGlyph get exec
	  } bind def
	/Metrics 150 dict def
		Metrics begin
		/.notdef 1000 def
		/space 250.0 def
		/exclam 1000.0 def
		/quotedbl 500.0 def
		/numbersign 792.0 def
		/dollar 450.0 def
		/percent 500.0 def
		/ampersand 1000.0 def
		/quoteright 500.0 def
		/parenleft 1000.0 def
		/parenright 1000.0 def
		/asterisk 1000.0 def
		/plus 1000.0 def
		/comma 660.0 def
		/hyphen 1090.0 def
		/period 1090.0 def
		/slash 1090.0 def
		/zero 1090.0 def
		/one 1090.0 def
		/two 1000.0 def
		/three 1000.0 def
		/four 1000.0 def
		/five 1000.0 def
		/six 950.0 def
		/seven 1000.0 def
		/eight 950.0 def
		/nine 1000.0 def
		/colon 1000.0 def
		/semicolon 1000.0 def
		/less 1000.0 def
		/equal 1000.0 def
		/greater 1000.0 def
		/question 1000.0 def
		/at 1000.0 def
		/A 1000.0 def
		/B 1000.0 def
		/C 1000.0 def
		/D 1000.0 def
		/E 1000.0 def
		/F 1000.0 def
		/G 1000.0 def
		/H 1000.0 def
		/I 1000.0 def
		/J 1000.0 def
		/K 1000.0 def
		/L 1000.0 def
		/M 1000.0 def
		/N 1000.0 def
		/O 1000.0 def
		/P 1000.0 def
		/Q 500.0 def
		/R 1000.0 def
		/S 1000.0 def
		/T 790.0 def
		/U 1000.0 def
		/V 1000.0 def
		/W 1000.0 def
		/X 1000.0 def
		/Y 738.0 def
		/Z 536.0 def
		/bracketleft 430.0 def
		/backslash 500.0 def
		/bracketright 1000.0 def
		/asciicircum 1000.0 def
		/underscore 1000.0 def
		/quoteleft 500.0 def
		/a 750.0 def
		/b 750.0 def
		/c 750.0 def
		/d 1000.0 def
		/e 750.0 def
		/f 750.0 def
		/g 750.0 def
		/h 750.0 def
		/i 750.0 def
		/j 750.0 def
		/k 1000.0 def
		/l 1000.0 def
		/m 624.0 def
		/n 624.0 def
		/o 624.0 def
		/p 624.0 def
		/q 624.0 def
		/r 624.0 def
		/s 624.0 def
		/t 624.0 def
		/u 500.0 def
		/v 500.0 def
		/w 500.0 def
		/x 500.0 def
		/y 500.0 def
		/z 500.0 def
		/braceleft 500.0 def
		/bar 500.0 def
		/braceright 500.0 def
		/asciitilde 500.0 def
		/exclamdown 500.0 def
		/cent 500.0 def
		/sterling 500.0 def
		/fraction 500.0 def
		/yen 500.0 def
		/florin 500.0 def
		/section 500.0 def
		/currency 500.0 def
		/quotesingle 500.0 def
		/quotedblleft 500.0 def
		/guillemotleft 500.0 def
		/guilsinglleft 500.0 def
		/guilsinglright 500.0 def
		/fi 500.0 def
		/fl 500.0 def
		/endash 1090.0 def
		/dagger 500.0 def
		/daggerdbl 500.0 def
		/periodcentered 500.0 def
		/paragraph 500.0 def
		/bullet 500.0 def
		/quotesinglbase 500.0 def
		/quotedblbase 500.0 def
		/quotedblright 500.0 def
		/guillemotright 500.0 def
		/ellipsis 500.0 def
		/perthousand 500.0 def
		/questiondown 500.0 def
		/grave 500.0 def
		/acute 500.0 def
		/circumflex 500.0 def
		/tilde 500.0 def
		/macron 500.0 def
		/breve 500.0 def
		/dotaccent 500.0 def
		/dieresis 500.0 def
		/ring 500.0 def
		/cedilla 500.0 def
		/hungarumlaut 500.0 def
		/ogonek 500.0 def
		/caron 500.0 def
		/emdash 1090.0 def
		/AE 500.0 def
		/ordfeminine 500.0 def
		/Lslash 500.0 def
		/Oslash 500.0 def
		/OE 500.0 def
		/ordmasculine 500.0 def
		/ae 500.0 def
		/dotlessi 500.0 def
		/lslash 500.0 def
		/oslash 500.0 def
		/oe 500.0 def
		/germandbls 500.0 def
	end
	/CharProcs 150 dict def
	CharProcs begin
			%define Glyph dictionary and start filling
	/space
		{
fill
		} def

	/exclam
		{
830 8 moveto
793 -29 lineto
501 263 lineto
207 -29 lineto
170 8 lineto
464 300 lineto
170 593 lineto
207 630 lineto
501 337 lineto
793 630 lineto
830 593 lineto
538 300 lineto
830 8 lineto
closepath
fill
		} def

	/quotedbl
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/numbersign
		{
622 128 moveto
568 74 lineto
396 246 lineto
224 75 lineto
170 129 lineto
342 300 lineto
170 471 lineto
224 525 lineto
396 354 lineto
568 526 lineto
622 472 lineto
450 300 lineto
622 128 lineto
closepath
fill
		} def

	/dollar
		{
281 300 moveto
281 285 275 272 264 260  curveto
252 248 239 243 224 243  curveto
210 243 198 248 186 258  curveto
174 268 168 282 168 300  curveto
168 315 173 328 184 339  curveto
195 350 208 356 224 356  curveto
241 356 255 349 267 337  curveto
276 325 281 313 281 300  curveto
closepath
fill
		} def

	/percent
		{
334 300 moveto
334 277 325 257 308 240  curveto
291 223 271 215 249 215  curveto
229 215 210 222 194 236  curveto
174 252 165 274 165 300  curveto
165 323 173 343 189 359  curveto
205 375 225 384 249 384  curveto
275 384 296 374 313 355  curveto
327 338 334 320 334 300  curveto
closepath
fill
		} def

	/ampersand
		{
830 8 moveto
793 -29 lineto
501 263 lineto
207 -29 lineto
170 8 lineto
170 593 lineto
207 630 lineto
501 337 lineto
793 630 lineto
830 593 lineto
538 300 lineto
830 8 lineto
closepath
464 300 moveto
222 541 lineto
222 60 lineto
464 300 lineto
closepath
fill
		} def

	/quoteright
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/parenleft
		{
830 8 moveto
793 -29 lineto
499 263 lineto
207 -29 lineto
170 8 lineto
462 300 lineto
170 593 lineto
207 630 lineto
499 337 lineto
793 630 lineto
830 593 lineto
830 8 lineto
closepath
778 60 moveto
778 541 lineto
536 300 lineto
778 60 lineto
closepath
fill
		} def

	/parenright
		{
830 8 moveto
793 -29 lineto
499 263 lineto
207 -29 lineto
170 8 lineto
170 593 lineto
207 630 lineto
499 337 lineto
793 630 lineto
830 593 lineto
830 8 lineto
closepath
778 60 moveto
778 541 lineto
536 300 lineto
778 60 lineto
closepath
462 300 moveto
222 541 lineto
222 60 lineto
462 300 lineto
closepath
fill
		} def

	/asterisk
		{
830 8 moveto
793 -29 lineto
501 263 lineto
207 -29 lineto
170 8 lineto
793 630 lineto
830 593 lineto
538 300 lineto
830 8 lineto
closepath
fill
		} def

	/plus
		{
830 8 moveto
793 -29 lineto
499 263 lineto
207 -29 lineto
170 8 lineto
462 300 lineto
170 593 lineto
207 630 lineto
830 8 lineto
closepath
fill
		} def

	/comma
		{
492 12 moveto
466 -30 lineto
387 -2 336 34 314 79  curveto
296 113 287 176 287 267  curveto
287 418 lineto
287 455 282 483 273 501  curveto
264 519 244 538 214 558  curveto
168 588 lineto
194 630 lineto
259 597 lineto
308 572 340 540 356 502  curveto
368 472 374 427 374 365  curveto
374 349 374 325 374 293  curveto
373 261 373 238 373 222  curveto
373 125 397 63 446 36  curveto
453 32 468 24 492 12  curveto
closepath
fill
		} def

	/hyphen
		{
920 300 moveto
920 196 883 108 810 35  curveto
736 -38 648 -75 545 -75  curveto
441 -75 353 -38 280 35  curveto
206 108 170 196 170 300  curveto
170 403 206 491 280 565  curveto
353 638 441 675 545 675  curveto
648 675 736 638 810 565  curveto
883 491 920 403 920 300  curveto
closepath
868 300 moveto
868 389 836 465 773 528  curveto
710 591 634 623 545 623  curveto
455 623 379 591 316 528  curveto
253 465 222 389 222 300  curveto
222 210 253 134 316 71  curveto
379 8 455 -23 545 -23  curveto
634 -23 710 8 773 71  curveto
836 134 868 210 868 300  curveto
closepath
600 474 moveto
600 458 594 445 584 435  curveto
573 424 560 419 545 419  curveto
529 419 516 424 506 435  curveto
495 445 490 458 490 474  curveto
490 489 495 502 506 513  curveto
516 523 529 529 545 529  curveto
560 529 573 523 584 513  curveto
594 502 600 489 600 474  curveto
closepath
816 274 moveto
274 274 lineto
274 326 lineto
816 326 lineto
816 274 lineto
closepath
600 126 moveto
600 110 594 97 584 87  curveto
573 76 560 71 545 71  curveto
529 71 516 76 506 87  curveto
495 97 490 110 490 126  curveto
490 141 495 154 506 165  curveto
516 175 529 181 545 181  curveto
560 181 573 175 584 165  curveto
594 154 600 141 600 126  curveto
closepath
fill
		} def

	/period
		{
920 300 moveto
920 196 883 108 810 35  curveto
736 -38 648 -75 545 -75  curveto
441 -75 353 -38 280 35  curveto
206 108 170 196 170 300  curveto
170 403 206 491 280 565  curveto
353 638 441 675 545 675  curveto
648 675 736 638 810 565  curveto
883 491 920 403 920 300  curveto
closepath
868 300 moveto
868 389 836 465 773 528  curveto
710 591 634 623 545 623  curveto
455 623 379 591 316 528  curveto
253 465 222 389 222 300  curveto
222 210 253 134 316 71  curveto
379 8 455 -23 545 -23  curveto
634 -23 710 8 773 71  curveto
836 134 868 210 868 300  curveto
closepath
678 274 moveto
412 274 lineto
412 326 lineto
678 326 lineto
678 274 lineto
closepath
fill
		} def

	/slash
		{
920 300 moveto
920 196 883 108 810 35  curveto
736 -38 648 -75 545 -75  curveto
441 -75 353 -38 280 35  curveto
206 108 170 196 170 300  curveto
170 403 206 491 280 565  curveto
353 638 441 675 545 675  curveto
648 675 736 638 810 565  curveto
883 491 920 403 920 300  curveto
closepath
868 300 moveto
868 389 836 465 773 528  curveto
710 591 634 623 545 623  curveto
455 623 379 591 316 528  curveto
253 465 222 389 222 300  curveto
222 210 253 134 316 71  curveto
379 8 455 -23 545 -23  curveto
634 -23 710 8 773 71  curveto
836 134 868 210 868 300  curveto
closepath
662 518 moveto
486 82 lineto
428 82 lineto
604 518 lineto
662 518 lineto
closepath
fill
		} def

	/zero
		{
920 300 moveto
920 196 883 108 810 35  curveto
736 -38 648 -75 545 -75  curveto
441 -75 353 -38 280 35  curveto
206 108 170 196 170 300  curveto
170 403 206 491 280 565  curveto
353 638 441 675 545 675  curveto
648 675 736 638 810 565  curveto
883 491 920 403 920 300  curveto
closepath
868 300 moveto
868 389 836 465 773 528  curveto
710 591 634 623 545 623  curveto
455 623 379 591 316 528  curveto
253 465 222 389 222 300  curveto
222 210 253 134 316 71  curveto
379 8 455 -23 545 -23  curveto
634 -23 710 8 773 71  curveto
836 134 868 210 868 300  curveto
closepath
667 300 moveto
667 266 655 238 631 214  curveto
607 190 578 178 545 178  curveto
511 178 483 190 459 214  curveto
435 238 423 266 423 300  curveto
423 333 435 362 459 386  curveto
483 410 511 422 545 422  curveto
578 422 607 410 631 386  curveto
655 362 667 333 667 300  curveto
closepath
615 300 moveto
615 319 608 335 594 349  curveto
580 363 564 370 545 370  curveto
525 370 509 363 495 349  curveto
481 335 475 319 475 300  curveto
475 280 481 264 495 250  curveto
509 236 525 230 545 230  curveto
564 230 580 236 594 250  curveto
608 264 615 280 615 300  curveto
closepath
fill
		} def

	/one
		{
920 300 moveto
920 196 883 108 810 35  curveto
736 -38 648 -75 545 -75  curveto
441 -75 353 -38 280 35  curveto
206 108 170 196 170 300  curveto
170 403 206 491 280 565  curveto
353 638 441 675 545 675  curveto
648 675 736 638 810 565  curveto
883 491 920 403 920 300  curveto
closepath
868 300 moveto
868 389 836 465 773 528  curveto
710 591 634 623 545 623  curveto
455 623 379 591 316 528  curveto
253 465 222 389 222 300  curveto
222 210 253 134 316 71  curveto
379 8 455 -23 545 -23  curveto
634 -23 710 8 773 71  curveto
836 134 868 210 868 300  curveto
closepath
602 323 moveto
602 308 596 295 585 283  curveto
573 271 560 266 545 266  curveto
531 266 519 271 507 281  curveto
495 291 489 305 489 323  curveto
489 338 494 351 505 362  curveto
516 373 529 379 545 379  curveto
562 379 576 372 588 360  curveto
597 348 602 336 602 323  curveto
closepath
fill
		} def

	/two
		{
830 300 moveto
830 208 797 130 733 66  curveto
669 2 591 -30 500 -30  curveto
408 -30 330 2 266 66  curveto
202 130 170 208 170 300  curveto
170 391 202 469 266 533  curveto
330 597 408 630 500 630  curveto
591 630 669 597 733 533  curveto
797 469 830 391 830 300  curveto
closepath
777 326 moveto
770 396 740 456 687 505  curveto
634 553 572 578 500 578  curveto
428 578 365 553 312 505  curveto
259 456 229 396 223 326  curveto
777 326 lineto
closepath
777 274 moveto
223 274 lineto
229 203 259 143 312 95  curveto
365 46 428 22 500 22  curveto
572 22 634 46 687 95  curveto
740 143 770 203 777 274  curveto
closepath
fill
		} def

	/three
		{
830 300 moveto
830 208 797 130 733 66  curveto
669 2 591 -30 500 -30  curveto
408 -30 330 2 266 66  curveto
202 130 170 208 170 300  curveto
170 391 202 469 266 533  curveto
330 597 408 630 500 630  curveto
591 630 669 597 733 533  curveto
797 469 830 391 830 300  curveto
closepath
778 300 moveto
778 372 753 434 705 487  curveto
656 540 596 570 526 577  curveto
526 23 lineto
596 29 656 59 705 112  curveto
753 165 778 228 778 300  curveto
closepath
474 23 moveto
474 577 lineto
403 570 343 540 295 487  curveto
246 434 222 372 222 300  curveto
222 228 246 165 295 112  curveto
343 59 403 29 474 23  curveto
closepath
fill
		} def

	/four
		{
830 300 moveto
830 208 797 130 733 66  curveto
669 2 591 -30 500 -30  curveto
408 -30 330 2 266 66  curveto
202 130 170 208 170 300  curveto
170 391 202 469 266 533  curveto
330 597 408 630 500 630  curveto
591 630 669 597 733 533  curveto
797 469 830 391 830 300  curveto
closepath
777 326 moveto
771 392 744 449 697 497  curveto
649 544 592 571 526 577  curveto
526 326 lineto
777 326 lineto
closepath
474 326 moveto
474 577 lineto
407 571 350 544 303 497  curveto
255 449 229 392 223 326  curveto
474 326 lineto
closepath
777 274 moveto
526 274 lineto
526 23 lineto
592 29 649 55 697 103  curveto
744 150 771 207 777 274  curveto
closepath
474 23 moveto
474 274 lineto
223 274 lineto
229 207 255 150 303 103  curveto
350 55 407 29 474 23  curveto
closepath
fill
		} def

	/five
		{
830 300 moveto
830 208 797 130 733 66  curveto
669 2 591 -30 500 -30  curveto
408 -30 330 2 266 66  curveto
202 130 170 208 170 300  curveto
170 391 202 469 266 533  curveto
330 597 408 630 500 630  curveto
591 630 669 597 733 533  curveto
797 469 830 391 830 300  curveto
closepath
677 514 moveto
625 556 566 578 500 578  curveto
433 578 374 556 323 514  curveto
500 337 lineto
677 514 lineto
closepath
778 300 moveto
778 366 756 425 714 477  curveto
537 300 lineto
714 123 lineto
756 174 778 233 778 300  curveto
closepath
463 300 moveto
286 477 lineto
243 425 222 366 222 300  curveto
222 233 243 174 286 123  curveto
463 300 lineto
closepath
677 86 moveto
500 263 lineto
323 86 lineto
374 43 433 22 500 22  curveto
566 22 625 43 677 86  curveto
closepath
fill
		} def

	/six
		{
782 274 moveto
524 274 lineto
524 -30 lineto
424 -30 340 -1 273 58  curveto
203 120 168 200 168 300  curveto
168 399 203 480 273 542  curveto
339 601 423 630 524 630  curveto
524 326 lineto
782 326 lineto
782 274 lineto
closepath
472 326 moveto
472 577 lineto
406 570 349 543 302 496  curveto
254 448 227 392 221 326  curveto
472 326 lineto
closepath
472 23 moveto
472 274 lineto
221 274 lineto
227 208 254 151 302 104  curveto
349 56 406 29 472 23  curveto
closepath
fill
		} def

	/seven
		{
792 82 moveto
755 45 lineto
540 260 lineto
364 84 lineto
415 42 473 22 538 22  curveto
538 -30 lineto
446 -30 368 2 304 66  curveto
240 130 208 208 208 300  curveto
208 391 240 469 304 533  curveto
368 597 446 630 538 630  curveto
538 578 lineto
471 578 412 556 360 513  curveto
540 333 lineto
755 548 lineto
792 511 lineto
577 296 lineto
792 82 lineto
closepath
503 296 moveto
323 476 lineto
281 424 260 366 260 300  curveto
260 232 282 172 327 120  curveto
503 296 lineto
closepath
fill
		} def

	/eight
		{
782 300 moveto
782 200 747 120 677 58  curveto
610 0 526 -30 426 -30  curveto
426 274 lineto
168 274 lineto
168 326 lineto
426 326 lineto
426 630 lineto
526 630 610 600 677 542  curveto
747 480 782 399 782 300  curveto
closepath
729 326 moveto
722 392 695 448 648 496  curveto
600 543 544 570 478 577  curveto
478 326 lineto
729 326 lineto
closepath
729 274 moveto
478 274 lineto
478 23 lineto
544 29 600 56 648 104  curveto
695 151 722 208 729 274  curveto
closepath
fill
		} def

	/nine
		{
792 300 moveto
792 208 759 130 695 66  curveto
631 2 553 -30 462 -30  curveto
462 22 lineto
526 22 584 42 636 84  curveto
460 260 lineto
245 45 lineto
208 82 lineto
423 296 lineto
208 511 lineto
245 548 lineto
460 333 lineto
640 513 lineto
588 556 528 578 462 578  curveto
462 630 lineto
553 630 631 597 695 533  curveto
759 469 792 391 792 300  curveto
closepath
740 300 moveto
740 366 719 424 677 476  curveto
497 296 lineto
673 120 lineto
717 172 740 232 740 300  curveto
closepath
fill
		} def

	/colon
		{
830 300 moveto
830 209 797 131 733 67  curveto
668 2 590 -30 500 -30  curveto
419 -30 348 -4 287 48  curveto
210 -30 lineto
170 10 lineto
247 88 lineto
195 149 170 220 170 300  curveto
170 390 202 468 267 533  curveto
331 597 409 630 500 630  curveto
580 630 650 604 712 553  curveto
789 630 lineto
829 590 lineto
752 513 lineto
804 451 830 380 830 300  curveto
closepath
778 300 moveto
778 366 757 424 715 476  curveto
324 85 lineto
375 43 434 22 500 22  curveto
576 22 642 49 696 103  curveto
750 157 778 223 778 300  curveto
closepath
675 516 moveto
624 557 566 578 500 578  curveto
423 578 357 550 303 496  curveto
249 442 222 376 222 300  curveto
222 234 242 175 284 125  curveto
675 516 lineto
closepath
fill
		} def

	/semicolon
		{
830 300 moveto
830 208 797 130 733 66  curveto
669 2 591 -30 500 -30  curveto
408 -30 330 2 266 66  curveto
202 130 170 208 170 300  curveto
170 391 202 469 266 533  curveto
330 597 408 630 500 630  curveto
591 630 669 597 733 533  curveto
797 469 830 391 830 300  curveto
closepath
778 300 moveto
778 376 750 442 696 496  curveto
642 550 576 578 500 578  curveto
423 578 357 550 303 496  curveto
249 442 222 376 222 300  curveto
222 223 249 157 303 103  curveto
357 49 423 22 500 22  curveto
576 22 642 49 696 103  curveto
750 157 778 223 778 300  curveto
closepath
672 201 moveto
652 193 635 190 621 190  curveto
608 190 597 192 587 198  curveto
579 202 567 216 551 239  curveto
537 259 522 274 507 285  curveto
508 269 514 249 525 225  curveto
536 200 542 182 542 172  curveto
542 151 527 127 499 101  curveto
469 124 455 148 455 173  curveto
455 181 460 198 472 223  curveto
482 245 488 266 490 284  curveto
474 273 460 258 446 238  curveto
439 228 427 215 410 199  curveto
400 193 388 190 375 190  curveto
361 190 344 193 326 201  curveto
334 238 348 262 367 273  curveto
377 279 394 283 418 285  curveto
442 287 463 292 481 300  curveto
464 307 443 312 419 315  curveto
407 315 389 319 367 325  curveto
346 337 333 362 327 400  curveto
347 406 363 409 376 409  curveto
388 409 400 406 410 401  curveto
417 397 429 383 445 361  curveto
458 342 473 327 489 316  curveto
487 333 480 353 470 377  curveto
460 400 455 417 455 427  curveto
455 451 470 475 500 499  curveto
528 473 542 449 542 427  curveto
542 417 536 400 525 376  curveto
515 354 509 333 507 314  curveto
518 322 531 337 547 359  curveto
563 381 576 395 586 401  curveto
596 407 608 410 622 410  curveto
635 410 651 407 670 401  curveto
664 363 650 338 630 326  curveto
620 320 603 316 578 314  curveto
565 312 545 308 517 300  curveto
535 292 555 287 577 285  curveto
593 283 602 283 604 283  curveto
614 281 622 278 630 274  curveto
649 262 663 238 672 201  curveto
closepath
fill
		} def

	/less
		{
980 274 moveto
829 274 lineto
822 188 787 115 724 57  curveto
660 0 586 -30 500 -30  curveto
414 -30 339 0 276 58  curveto
212 116 177 188 171 274  curveto
20 274 lineto
20 326 lineto
171 326 lineto
177 411 212 483 276 542  curveto
339 600 414 630 500 630  curveto
586 630 660 600 724 542  curveto
787 484 822 412 829 326  curveto
980 326 lineto
980 274 lineto
closepath
777 326 moveto
770 397 740 457 687 505  curveto
633 553 571 578 500 578  curveto
428 578 366 553 313 505  curveto
259 457 229 397 223 326  curveto
777 326 lineto
closepath
777 274 moveto
223 274 lineto
229 202 259 142 313 94  curveto
366 46 428 22 500 22  curveto
571 22 633 46 687 94  curveto
740 142 770 202 777 274  curveto
closepath
fill
		} def

	/equal
		{
980 274 moveto
829 274 lineto
823 193 791 124 733 66  curveto
675 8 606 -23 526 -29  curveto
526 -200 lineto
474 -200 lineto
474 -29 lineto
393 -23 324 8 266 66  curveto
208 124 177 193 171 274  curveto
20 274 lineto
20 326 lineto
171 326 lineto
177 406 208 475 266 533  curveto
324 591 393 623 474 629  curveto
474 800 lineto
526 800 lineto
526 629 lineto
606 622 675 590 733 533  curveto
790 475 822 406 829 326  curveto
980 326 lineto
980 274 lineto
closepath
777 326 moveto
771 392 744 448 696 496  curveto
648 544 592 571 526 577  curveto
526 326 lineto
777 326 lineto
closepath
474 326 moveto
474 577 lineto
408 571 351 544 303 496  curveto
255 448 229 392 223 326  curveto
474 326 lineto
closepath
777 274 moveto
526 274 lineto
526 23 lineto
592 29 648 55 696 103  curveto
744 151 771 208 777 274  curveto
closepath
474 23 moveto
474 274 lineto
223 274 lineto
229 208 255 151 303 103  curveto
351 55 408 29 474 23  curveto
closepath
fill
		} def

	/greater
		{
830 -30 moveto
170 -30 lineto
170 630 lineto
830 630 lineto
830 -30 lineto
closepath
778 326 moveto
778 578 lineto
222 578 lineto
222 326 lineto
778 326 lineto
closepath
778 22 moveto
778 274 lineto
222 274 lineto
222 22 lineto
778 22 lineto
closepath
fill
		} def

	/question
		{
830 -30 moveto
170 -30 lineto
170 630 lineto
830 630 lineto
830 -30 lineto
closepath
778 326 moveto
778 578 lineto
526 578 lineto
526 326 lineto
778 326 lineto
closepath
474 326 moveto
474 578 lineto
222 578 lineto
222 326 lineto
474 326 lineto
closepath
778 22 moveto
778 274 lineto
526 274 lineto
526 22 lineto
778 22 lineto
closepath
474 22 moveto
474 274 lineto
222 274 lineto
222 22 lineto
474 22 lineto
closepath
fill
		} def

	/at
		{
830 -30 moveto
170 -30 lineto
170 630 lineto
830 630 lineto
830 -30 lineto
closepath
778 60 moveto
778 541 lineto
538 300 lineto
778 60 lineto
closepath
741 578 moveto
259 578 lineto
501 337 lineto
741 578 lineto
closepath
464 300 moveto
222 541 lineto
222 60 lineto
464 300 lineto
closepath
742 22 moveto
501 263 lineto
258 22 lineto
742 22 lineto
closepath
fill
		} def

	/A
		{
830 -30 moveto
170 -30 lineto
170 630 lineto
830 630 lineto
830 -30 lineto
closepath
778 22 moveto
778 578 lineto
222 578 lineto
222 22 lineto
778 22 lineto
closepath
fill
		} def

	/B
		{
830 -30 moveto
170 -30 lineto
170 630 lineto
830 630 lineto
830 -30 lineto
closepath
fill
		} def

	/C
		{
830 274 moveto
526 274 lineto
526 -30 lineto
474 -30 lineto
474 274 lineto
170 274 lineto
170 326 lineto
474 326 lineto
474 630 lineto
526 630 lineto
526 326 lineto
830 326 lineto
830 274 lineto
closepath
fill
		} def

	/D
		{
830 261 moveto
539 261 lineto
539 -30 lineto
461 -30 lineto
461 261 lineto
170 261 lineto
170 339 lineto
461 339 lineto
461 630 lineto
539 630 lineto
539 339 lineto
830 339 lineto
830 261 lineto
closepath
fill
		} def

	/E
		{
830 394 moveto
526 394 lineto
526 90 lineto
474 90 lineto
474 394 lineto
170 394 lineto
170 446 lineto
474 446 lineto
474 750 lineto
526 750 lineto
526 446 lineto
830 446 lineto
830 394 lineto
closepath
555 -95 moveto
555 -110 549 -123 539 -134  curveto
528 -144 515 -150 500 -150  curveto
484 -150 471 -144 461 -134  curveto
450 -123 445 -110 445 -95  curveto
445 -79 450 -66 461 -56  curveto
471 -45 484 -40 500 -40  curveto
515 -40 528 -45 539 -56  curveto
549 -66 555 -79 555 -95  curveto
closepath
fill
		} def

	/F
		{
555 695 moveto
555 679 549 666 539 656  curveto
528 645 515 640 500 640  curveto
484 640 471 645 461 656  curveto
450 666 445 679 445 695  curveto
445 710 450 723 461 734  curveto
471 744 484 750 500 750  curveto
515 750 528 744 539 734  curveto
549 723 555 710 555 695  curveto
closepath
830 154 moveto
526 154 lineto
526 -150 lineto
474 -150 lineto
474 154 lineto
170 154 lineto
170 206 lineto
474 206 lineto
474 510 lineto
526 510 lineto
526 206 lineto
830 206 lineto
830 154 lineto
closepath
fill
		} def

	/G
		{
830 337 moveto
526 337 lineto
526 33 lineto
474 33 lineto
474 337 lineto
170 337 lineto
170 389 lineto
474 389 lineto
474 693 lineto
526 693 lineto
526 389 lineto
830 389 lineto
830 337 lineto
closepath
830 -94 moveto
170 -94 lineto
170 -42 lineto
830 -42 lineto
830 -94 lineto
closepath
fill
		} def

	/H
		{
830 641 moveto
170 641 lineto
170 693 lineto
830 693 lineto
830 641 lineto
closepath
830 210 moveto
526 210 lineto
526 -94 lineto
474 -94 lineto
474 210 lineto
170 210 lineto
170 262 lineto
474 262 lineto
474 566 lineto
526 566 lineto
526 262 lineto
830 262 lineto
830 210 lineto
closepath
fill
		} def

	/I
		{
526 404 moveto
474 404 lineto
474 630 lineto
526 630 lineto
526 404 lineto
closepath
830 274 moveto
604 274 lineto
604 326 lineto
830 326 lineto
830 274 lineto
closepath
396 326 moveto
396 274 lineto
170 274 lineto
170 326 lineto
396 326 lineto
closepath
526 -30 moveto
474 -30 lineto
474 196 lineto
526 196 lineto
526 -30 lineto
closepath
fill
		} def

	/J
		{
555 523 moveto
555 507 549 494 539 484  curveto
528 473 515 468 500 468  curveto
484 468 471 473 461 484  curveto
450 494 445 507 445 523  curveto
445 538 450 551 461 562  curveto
471 572 484 578 500 578  curveto
515 578 528 572 539 562  curveto
549 551 555 538 555 523  curveto
closepath
830 8 moveto
793 -30 lineto
501 263 lineto
207 -30 lineto
170 8 lineto
438 274 lineto
170 274 lineto
170 326 lineto
438 326 lineto
170 593 lineto
207 630 lineto
501 337 lineto
793 630 lineto
830 593 lineto
564 326 lineto
830 326 lineto
830 274 lineto
564 274 lineto
830 8 lineto
closepath
555 78 moveto
555 62 549 49 539 39  curveto
528 28 515 23 500 23  curveto
484 23 471 28 461 39  curveto
450 49 445 62 445 78  curveto
445 93 450 106 461 117  curveto
471 127 484 133 500 133  curveto
515 133 528 127 539 117  curveto
549 106 555 93 555 78  curveto
closepath
fill
		} def

	/K
		{
830 274 moveto
170 274 lineto
170 326 lineto
830 326 lineto
830 274 lineto
closepath
fill
		} def

	/L
		{
830 261 moveto
170 261 lineto
170 339 lineto
830 339 lineto
830 261 lineto
closepath
fill
		} def

	/M
		{
830 274 moveto
170 274 lineto
170 326 lineto
830 326 lineto
830 274 lineto
closepath
555 115 moveto
555 99 549 86 539 76  curveto
528 65 515 60 500 60  curveto
484 60 471 65 461 76  curveto
450 86 445 99 445 115  curveto
445 130 450 143 461 154  curveto
471 164 484 170 500 170  curveto
515 170 528 164 539 154  curveto
549 143 555 130 555 115  curveto
closepath
fill
		} def

	/N
		{
555 485 moveto
555 469 549 456 539 446  curveto
528 435 515 430 500 430  curveto
484 430 471 435 461 446  curveto
450 456 445 469 445 485  curveto
445 500 450 513 461 524  curveto
471 534 484 540 500 540  curveto
515 540 528 534 539 524  curveto
549 513 555 500 555 485  curveto
closepath
830 274 moveto
170 274 lineto
170 326 lineto
830 326 lineto
830 274 lineto
closepath
fill
		} def

	/O
		{
555 485 moveto
555 469 549 456 539 446  curveto
528 435 515 430 500 430  curveto
484 430 471 435 461 446  curveto
450 456 445 469 445 485  curveto
445 500 450 513 461 524  curveto
471 534 484 540 500 540  curveto
515 540 528 534 539 524  curveto
549 513 555 500 555 485  curveto
closepath
830 274 moveto
170 274 lineto
170 326 lineto
830 326 lineto
830 274 lineto
closepath
555 115 moveto
555 99 549 86 539 76  curveto
528 65 515 60 500 60  curveto
484 60 471 65 461 76  curveto
450 86 445 99 445 115  curveto
445 130 450 143 461 154  curveto
471 164 484 170 500 170  curveto
515 170 528 164 539 154  curveto
549 143 555 130 555 115  curveto
closepath
fill
		} def

	/P
		{
778 485 moveto
778 469 772 456 762 446  curveto
751 435 738 430 723 430  curveto
707 430 694 435 684 446  curveto
673 456 668 469 668 485  curveto
668 500 673 513 684 524  curveto
694 534 707 540 723 540  curveto
738 540 751 534 762 524  curveto
772 513 778 500 778 485  curveto
closepath
778 115 moveto
778 99 772 86 762 76  curveto
751 65 738 60 723 60  curveto
707 60 694 65 684 76  curveto
673 86 668 99 668 115  curveto
668 130 673 143 684 154  curveto
694 164 707 170 723 170  curveto
738 170 751 164 762 154  curveto
772 143 778 130 778 115  curveto
closepath
830 274 moveto
170 274 lineto
170 326 lineto
830 326 lineto
830 274 lineto
closepath
332 485 moveto
332 469 326 456 316 446  curveto
305 435 292 430 277 430  curveto
261 430 248 435 238 446  curveto
227 456 222 469 222 485  curveto
222 500 227 513 238 524  curveto
248 534 261 540 277 540  curveto
292 540 305 534 316 524  curveto
326 513 332 500 332 485  curveto
closepath
332 115 moveto
332 99 326 86 316 76  curveto
305 65 292 60 277 60  curveto
261 60 248 65 238 76  curveto
227 86 222 99 222 115  curveto
222 130 227 143 238 154  curveto
248 164 261 170 277 170  curveto
292 170 305 164 316 154  curveto
326 143 332 130 332 115  curveto
closepath
fill
		} def

	/Q
		{
500 201 moveto
0 201 lineto
0 250 lineto
500 250 lineto
500 201 lineto
closepath
fill
		} def

	/R
		{
1000 201 moveto
0 201 lineto
0 250 lineto
1000 250 lineto
1000 201 lineto
closepath
fill
		} def

	/S
		{
726 446 moveto
654 446 lineto
500 597 lineto
346 446 lineto
274 446 lineto
500 668 lineto
726 446 lineto
closepath
830 274 moveto
170 274 lineto
170 326 lineto
830 326 lineto
830 274 lineto
closepath
fill
		} def

	/T
		{
621 479 moveto
621 463 615 450 605 440  curveto
594 429 581 424 566 424  curveto
550 424 537 429 527 440  curveto
516 450 511 463 511 479  curveto
511 494 516 507 527 518  curveto
537 528 550 534 566 534  curveto
581 534 594 528 605 518  curveto
615 507 621 494 621 479  curveto
closepath
278 479 moveto
278 463 272 450 262 440  curveto
251 429 238 424 223 424  curveto
207 424 194 429 184 440  curveto
173 450 168 463 168 479  curveto
168 494 173 507 184 518  curveto
194 528 207 534 223 534  curveto
238 534 251 528 262 518  curveto
272 507 278 494 278 479  curveto
closepath
621 121 moveto
621 105 615 92 605 82  curveto
594 71 581 66 566 66  curveto
550 66 537 71 527 82  curveto
516 92 511 105 511 121  curveto
511 136 516 149 527 160  curveto
537 170 550 176 566 176  curveto
581 176 594 170 605 160  curveto
615 149 621 136 621 121  curveto
closepath
278 121 moveto
278 105 272 92 262 82  curveto
251 71 238 66 223 66  curveto
207 66 194 71 184 82  curveto
173 92 168 105 168 121  curveto
168 136 173 149 184 160  curveto
194 170 207 176 223 176  curveto
238 176 251 170 262 160  curveto
272 149 278 136 278 121  curveto
closepath
fill
		} def

	/U
		{
830 25 moveto
170 300 lineto
830 575 lineto
830 25 lineto
closepath
830 -100 moveto
170 -100 lineto
170 -48 lineto
830 -48 lineto
830 -100 lineto
closepath
778 103 moveto
778 497 lineto
305 300 lineto
778 103 lineto
closepath
fill
		} def

	/V
		{
830 300 moveto
170 25 lineto
170 575 lineto
830 300 lineto
closepath
830 -100 moveto
170 -100 lineto
170 -48 lineto
830 -48 lineto
830 -100 lineto
closepath
695 300 moveto
222 497 lineto
222 103 lineto
695 300 lineto
closepath
fill
		} def

	/W
		{
830 -100 moveto
426 -100 lineto
386 -205 lineto
329 -205 lineto
370 -100 lineto
170 -100 lineto
170 -48 lineto
390 -48 lineto
475 173 lineto
170 300 lineto
592 476 lineto
666 667 lineto
721 667 lineto
658 503 lineto
830 575 lineto
830 25 lineto
523 153 lineto
446 -48 lineto
830 -48 lineto
830 -100 lineto
closepath
778 103 moveto
778 497 lineto
632 436 lineto
542 201 lineto
778 103 lineto
closepath
566 409 moveto
305 300 lineto
494 221 lineto
566 409 lineto
closepath
fill
		} def

	/X
		{
830 -100 moveto
346 -100 lineto
306 -204 lineto
249 -204 lineto
289 -100 lineto
170 -100 lineto
170 -48 lineto
310 -48 lineto
370 109 lineto
170 25 lineto
170 575 lineto
498 438 lineto
568 617 lineto
623 617 lineto
546 418 lineto
830 300 lineto
437 136 lineto
366 -48 lineto
830 -48 lineto
830 -100 lineto
closepath
695 300 moveto
528 370 lineto
463 204 lineto
695 300 lineto
closepath
480 390 moveto
222 497 lineto
222 103 lineto
397 176 lineto
480 390 lineto
closepath
fill
		} def

	/Y
		{
697 148 moveto
671 100 632 59 580 27  curveto
528 -5 476 -22 426 -22  curveto
315 -22 230 11 172 77  curveto
116 138 87 223 83 333  curveto
5 333 lineto
5 373 lineto
84 373 lineto
88 449 118 520 173 585  curveto
231 653 297 688 371 688  curveto
413 688 454 681 492 668  curveto
528 655 553 649 568 649  curveto
595 649 615 662 629 688  curveto
647 688 lineto
695 476 lineto
668 476 lineto
587 596 493 657 386 657  curveto
319 657 266 628 228 572  curveto
194 522 177 461 177 391  curveto
177 385 177 379 177 373  curveto
326 373 lineto
326 333 lineto
180 333 lineto
190 249 218 181 265 129  curveto
316 71 383 42 466 42  curveto
544 42 612 77 668 148  curveto
697 148 lineto
closepath
fill
		} def

	/Z
		{
516 154 moveto
444 51 390 0 353 0  curveto
337 0 323 6 312 18  curveto
300 30 295 45 295 61  curveto
295 69 299 91 308 125  curveto
319 163 331 202 343 242  curveto
359 296 367 333 367 353  curveto
367 372 361 382 351 382  curveto
316 382 273 341 222 260  curveto
182 197 153 140 135 88  curveto
130 70 125 52 121 34  curveto
113 11 101 0 85 0  curveto
62 0 51 8 51 24  curveto
51 26 56 50 66 97  curveto
142 453 lineto
56 410 lineto
56 457 lineto
154 506 lineto
163 549 lineto
170 583 174 605 174 617  curveto
174 627 172 634 169 639  curveto
161 647 138 651 98 653  curveto
98 675 lineto
257 675 lineto
229 544 lineto
323 591 lineto
323 544 lineto
218 491 lineto
155 190 lineto
247 352 324 433 385 433  curveto
420 433 438 408 438 358  curveto
438 342 430 307 414 253  curveto
404 221 394 190 385 160  curveto
372 118 366 87 366 67  curveto
366 55 372 49 384 49  curveto
406 49 444 88 498 168  curveto
516 154 lineto
closepath
fill
		} def

	/bracketleft
		{
402 25 moveto
381 -1 354 -14 321 -14  curveto
277 -14 226 24 168 101  curveto
143 74 104 35 51 -16  curveto
28 7 lineto
147 139 lineto
126 171 108 216 93 274  curveto
78 331 71 380 71 421  curveto
71 480 83 534 107 584  curveto
137 645 179 676 233 676  curveto
278 676 313 654 339 610  curveto
360 572 371 529 371 481  curveto
371 434 353 378 319 314  curveto
299 278 267 228 223 164  curveto
224 144 236 117 259 83  curveto
283 46 304 28 322 28  curveto
346 28 364 37 374 56  curveto
402 25 lineto
closepath
319 481 moveto
319 515 313 545 303 572  curveto
288 608 266 626 238 626  curveto
182 626 155 561 155 432  curveto
155 358 172 285 206 214  curveto
233 240 259 281 283 338  curveto
307 394 319 442 319 481  curveto
closepath
fill
		} def

	/backslash
		{
476 331 moveto
476 248 461 175 432 113  curveto
392 28 331 -14 250 -14  curveto
219 -14 191 -7 166 5  curveto
134 -92 lineto
90 -92 lineto
129 29 lineto
92 61 64 109 46 174  curveto
31 224 24 276 24 331  curveto
24 413 38 485 68 548  curveto
108 633 168 676 250 676  curveto
280 676 308 669 334 657  curveto
366 754 lineto
410 754 lineto
370 633 lineto
407 600 435 551 454 487  curveto
468 437 476 385 476 331  curveto
closepath
320 615 moveto
302 638 278 650 250 650  curveto
163 650 120 543 120 331  curveto
120 227 130 148 151 95  curveto
320 615 lineto
closepath
380 331 moveto
380 431 369 509 348 565  curveto
179 46 lineto
198 23 222 12 250 12  curveto
336 12 380 118 380 331  curveto
closepath
fill
		} def

	/bracketright
		{
950 365 moveto
50 365 lineto
50 417 lineto
950 417 lineto
950 365 lineto
closepath
950 183 moveto
50 183 lineto
50 235 lineto
950 235 lineto
950 183 lineto
closepath
fill
		} def

	/asciicircum
		{
950 456 moveto
50 456 lineto
50 508 lineto
950 508 lineto
950 456 lineto
closepath
950 274 moveto
50 274 lineto
50 326 lineto
950 326 lineto
950 274 lineto
closepath
950 92 moveto
50 92 lineto
50 144 lineto
950 144 lineto
950 92 lineto
closepath
fill
		} def

	/underscore
		{
950 547 moveto
50 547 lineto
50 599 lineto
950 599 lineto
950 547 lineto
closepath
950 365 moveto
50 365 lineto
50 417 lineto
950 417 lineto
950 365 lineto
closepath
950 183 moveto
50 183 lineto
50 235 lineto
950 235 lineto
950 183 lineto
closepath
950 1 moveto
50 1 lineto
50 53 lineto
950 53 lineto
950 1 lineto
closepath
fill
		} def

	/quoteleft
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/a
		{
700 365 moveto
50 365 lineto
50 417 lineto
700 417 lineto
700 365 lineto
closepath
700 183 moveto
50 183 lineto
50 235 lineto
700 235 lineto
700 183 lineto
closepath
fill
		} def

	/b
		{
700 456 moveto
50 456 lineto
50 508 lineto
700 508 lineto
700 456 lineto
closepath
700 274 moveto
50 274 lineto
50 326 lineto
700 326 lineto
700 274 lineto
closepath
700 92 moveto
50 92 lineto
50 144 lineto
700 144 lineto
700 92 lineto
closepath
fill
		} def

	/c
		{
700 547 moveto
50 547 lineto
50 599 lineto
700 599 lineto
700 547 lineto
closepath
700 365 moveto
50 365 lineto
50 417 lineto
700 417 lineto
700 365 lineto
closepath
700 183 moveto
50 183 lineto
50 235 lineto
700 235 lineto
700 183 lineto
closepath
700 1 moveto
50 1 lineto
50 53 lineto
700 53 lineto
700 1 lineto
closepath
fill
		} def

	/d
		{
950 274 moveto
50 274 lineto
50 326 lineto
950 326 lineto
950 274 lineto
closepath
fill
		} def

	/e
		{
700 274 moveto
50 274 lineto
50 326 lineto
700 326 lineto
700 274 lineto
closepath
fill
		} def

	/f
		{
700 365 moveto
550 365 lineto
550 417 lineto
700 417 lineto
700 365 lineto
closepath
450 365 moveto
300 365 lineto
300 417 lineto
450 417 lineto
450 365 lineto
closepath
700 183 moveto
50 183 lineto
50 235 lineto
700 235 lineto
700 183 lineto
closepath
200 417 moveto
200 365 lineto
50 365 lineto
50 417 lineto
200 417 lineto
closepath
fill
		} def

	/g
		{
700 183 moveto
550 183 lineto
550 235 lineto
700 235 lineto
700 183 lineto
closepath
700 365 moveto
50 365 lineto
50 417 lineto
700 417 lineto
700 365 lineto
closepath
450 235 moveto
450 183 lineto
300 183 lineto
300 235 lineto
450 235 lineto
closepath
200 183 moveto
50 183 lineto
50 235 lineto
200 235 lineto
200 183 lineto
closepath
fill
		} def

	/h
		{
700 456 moveto
550 456 lineto
550 508 lineto
700 508 lineto
700 456 lineto
closepath
450 456 moveto
300 456 lineto
300 508 lineto
450 508 lineto
450 456 lineto
closepath
700 274 moveto
50 274 lineto
50 326 lineto
700 326 lineto
700 274 lineto
closepath
200 508 moveto
200 456 lineto
50 456 lineto
50 508 lineto
200 508 lineto
closepath
700 92 moveto
50 92 lineto
50 144 lineto
700 144 lineto
700 92 lineto
closepath
fill
		} def

	/i
		{
700 456 moveto
50 456 lineto
50 508 lineto
700 508 lineto
700 456 lineto
closepath
700 92 moveto
550 92 lineto
550 144 lineto
700 144 lineto
700 92 lineto
closepath
700 274 moveto
50 274 lineto
50 326 lineto
700 326 lineto
700 274 lineto
closepath
450 144 moveto
450 92 lineto
300 92 lineto
300 144 lineto
450 144 lineto
closepath
200 92 moveto
50 92 lineto
50 144 lineto
200 144 lineto
200 92 lineto
closepath
fill
		} def

	/j
		{
700 379 moveto
700 365 696 353 687 343  curveto
677 333 666 328 652 328  curveto
638 327 626 331 616 341  curveto
606 351 600 363 600 377  curveto
599 391 603 402 613 412  curveto
623 422 635 427 649 428  curveto
663 428 674 424 684 414  curveto
694 404 699 393 700 379  curveto
closepath
425 379 moveto
425 365 421 353 412 343  curveto
402 333 391 328 377 328  curveto
363 327 351 331 341 341  curveto
331 351 325 363 325 377  curveto
324 391 328 402 338 412  curveto
348 422 360 427 374 428  curveto
388 428 399 424 409 414  curveto
419 404 424 393 425 379  curveto
closepath
700 172 moveto
50 172 lineto
50 224 lineto
700 224 lineto
700 172 lineto
closepath
150 379 moveto
150 365 146 353 137 343  curveto
127 333 116 328 102 328  curveto
88 327 76 331 66 341  curveto
56 351 50 363 50 377  curveto
49 391 53 402 63 412  curveto
73 422 85 427 99 428  curveto
113 428 124 424 134 414  curveto
144 404 149 393 150 379  curveto
closepath
fill
		} def

	/k
		{
868 435 moveto
730 0 lineto
269 0 lineto
132 435 lineto
500 702 lineto
868 435 lineto
closepath
807 415 moveto
500 638 lineto
193 415 lineto
307 52 lineto
692 52 lineto
807 415 lineto
closepath
fill
		} def

	/l
		{
906 351 moveto
703 0 lineto
297 0 lineto
94 351 lineto
297 702 lineto
703 702 lineto
906 351 lineto
closepath
846 351 moveto
673 650 lineto
327 650 lineto
154 351 lineto
327 52 lineto
673 52 lineto
846 351 lineto
closepath
fill
		} def

	/m
		{
574 781 moveto
67 439 lineto
50 464 lineto
557 806 lineto
574 781 lineto
closepath
568 285 moveto
60 285 lineto
60 315 lineto
568 315 lineto
568 285 lineto
closepath
574 -181 moveto
557 -206 lineto
50 136 lineto
67 161 lineto
574 -181 lineto
closepath
fill
		} def

	/n
		{
574 464 moveto
557 439 lineto
50 781 lineto
67 806 lineto
574 464 lineto
closepath
564 285 moveto
56 285 lineto
56 315 lineto
564 315 lineto
564 285 lineto
closepath
574 136 moveto
67 -206 lineto
50 -181 lineto
557 161 lineto
574 136 lineto
closepath
fill
		} def

	/o
		{
574 781 moveto
67 439 lineto
50 464 lineto
557 806 lineto
574 781 lineto
closepath
574 -181 moveto
557 -206 lineto
50 136 lineto
67 161 lineto
574 -181 lineto
closepath
fill
		} def

	/p
		{
574 464 moveto
557 439 lineto
50 781 lineto
67 806 lineto
574 464 lineto
closepath
574 136 moveto
67 -206 lineto
50 -181 lineto
557 161 lineto
574 136 lineto
closepath
fill
		} def

	/q
		{
574 464 moveto
557 439 lineto
50 781 lineto
67 806 lineto
574 464 lineto
closepath
574 304 moveto
557 279 lineto
50 621 lineto
67 646 lineto
574 304 lineto
closepath
574 136 moveto
67 -206 lineto
50 -181 lineto
557 161 lineto
574 136 lineto
closepath
fill
		} def

	/r
		{
574 464 moveto
557 439 lineto
50 781 lineto
67 806 lineto
574 464 lineto
closepath
574 296 moveto
67 -46 lineto
50 -21 lineto
557 321 lineto
574 296 lineto
closepath
574 136 moveto
67 -206 lineto
50 -181 lineto
557 161 lineto
574 136 lineto
closepath
fill
		} def

	/s
		{
574 781 moveto
67 439 lineto
50 464 lineto
557 806 lineto
574 781 lineto
closepath
574 621 moveto
67 279 lineto
50 304 lineto
557 646 lineto
574 621 lineto
closepath
574 -181 moveto
557 -206 lineto
50 136 lineto
67 161 lineto
574 -181 lineto
closepath
fill
		} def

	/t
		{
574 781 moveto
67 439 lineto
50 464 lineto
557 806 lineto
574 781 lineto
closepath
574 -21 moveto
557 -46 lineto
50 296 lineto
67 321 lineto
574 -21 lineto
closepath
574 -181 moveto
557 -206 lineto
50 136 lineto
67 161 lineto
574 -181 lineto
closepath
fill
		} def

	/u
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/v
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/w
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/x
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/y
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/z
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/braceleft
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/bar
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/braceright
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/asciitilde
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/exclamdown
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/cent
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/sterling
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/fraction
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/yen
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/florin
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/section
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/currency
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/quotesingle
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/quotedblleft
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/guillemotleft
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/guilsinglleft
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/guilsinglright
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/fi
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/fl
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/endash
		{
920 300 moveto
920 196 883 108 810 35  curveto
736 -38 648 -75 545 -75  curveto
441 -75 353 -38 280 35  curveto
206 108 170 196 170 300  curveto
170 403 206 491 280 565  curveto
353 638 441 675 545 675  curveto
648 675 736 638 810 565  curveto
883 491 920 403 920 300  curveto
closepath
868 300 moveto
868 389 836 465 773 528  curveto
710 591 634 623 545 623  curveto
455 623 379 591 316 528  curveto
253 465 222 389 222 300  curveto
222 210 253 134 316 71  curveto
379 8 455 -23 545 -23  curveto
634 -23 710 8 773 71  curveto
836 134 868 210 868 300  curveto
closepath
600 474 moveto
600 458 594 445 584 435  curveto
573 424 560 419 545 419  curveto
529 419 516 424 506 435  curveto
495 445 490 458 490 474  curveto
490 489 495 502 506 513  curveto
516 523 529 529 545 529  curveto
560 529 573 523 584 513  curveto
594 502 600 489 600 474  curveto
closepath
816 274 moveto
274 274 lineto
274 326 lineto
816 326 lineto
816 274 lineto
closepath
600 126 moveto
600 110 594 97 584 87  curveto
573 76 560 71 545 71  curveto
529 71 516 76 506 87  curveto
495 97 490 110 490 126  curveto
490 141 495 154 506 165  curveto
516 175 529 181 545 181  curveto
560 181 573 175 584 165  curveto
594 154 600 141 600 126  curveto
closepath
fill
		} def

	/dagger
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/daggerdbl
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/periodcentered
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/paragraph
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/bullet
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/quotesinglbase
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/quotedblbase
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/quotedblright
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/guillemotright
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/ellipsis
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/perthousand
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/questiondown
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/grave
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/acute
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/circumflex
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/tilde
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/macron
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/breve
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/dotaccent
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/dieresis
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/ring
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/cedilla
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/hungarumlaut
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/ogonek
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/caron
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/emdash
		{
920 300 moveto
920 196 883 108 810 35  curveto
736 -38 648 -75 545 -75  curveto
441 -75 353 -38 280 35  curveto
206 108 170 196 170 300  curveto
170 403 206 491 280 565  curveto
353 638 441 675 545 675  curveto
648 675 736 638 810 565  curveto
883 491 920 403 920 300  curveto
closepath
868 300 moveto
868 389 836 465 773 528  curveto
710 591 634 623 545 623  curveto
455 623 379 591 316 528  curveto
253 465 222 389 222 300  curveto
222 210 253 134 316 71  curveto
379 8 455 -23 545 -23  curveto
634 -23 710 8 773 71  curveto
836 134 868 210 868 300  curveto
closepath
600 474 moveto
600 458 594 445 584 435  curveto
573 424 560 419 545 419  curveto
529 419 516 424 506 435  curveto
495 445 490 458 490 474  curveto
490 489 495 502 506 513  curveto
516 523 529 529 545 529  curveto
560 529 573 523 584 513  curveto
594 502 600 489 600 474  curveto
closepath
816 274 moveto
274 274 lineto
274 326 lineto
816 326 lineto
816 274 lineto
closepath
600 126 moveto
600 110 594 97 584 87  curveto
573 76 560 71 545 71  curveto
529 71 516 76 506 87  curveto
495 97 490 110 490 126  curveto
490 141 495 154 506 165  curveto
516 175 529 181 545 181  curveto
560 181 573 175 584 165  curveto
594 154 600 141 600 126  curveto
closepath
fill
		} def

	/AE
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/ordfeminine
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/Lslash
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/Oslash
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/OE
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/ordmasculine
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/ae
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/dotlessi
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/lslash
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/oslash
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/oe
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/germandbls
		{
63 0 moveto
63 803 lineto
438 803 lineto
438 0 lineto
63 0 lineto
closepath
125 63 moveto
375 63 lineto
375 741 lineto
125 741 lineto
125 63 lineto
closepath
fill
		} def

	/.notdef
		{
0 0 moveto
1000 0 lineto
1000 1000 lineto
0 1000 lineto
0 0 lineto
closepath
50 50 moveto
950 50 lineto
950 950 lineto
50 950 lineto
50 50 lineto
closepath
fill
		} def

	end				% close glyph dict. 
	currentdict			% actually put dict on the stack
	end			% close the dictionary now
	/ESSTIXFive exch definefont pop
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
15.0 392.0 moveto
q 1 -1 scale
/LucidaBright findfont 13.0 scalefont setfont
(1.0) show
Q
5.0 20.0 translate
Q
q
1 39 277 OPL
33 277
-5.0 -20.0 translate
q
6 291 7 13 rc
6.0 302.0 moveto
q 1 -1 scale
/ESSTIXFive findfont 13.0 scalefont setfont
(K) show
Q
Q
15.0 302.0 moveto
q 1 -1 scale
/LucidaBright findfont 13.0 scalefont setfont
(0.5) show
Q
5.0 20.0 translate
Q
q
1 39 187 OPL
33 187
-5.0 -20.0 translate
26.0 213.0 moveto
q 1 -1 scale
/LucidaBright findfont 13.0 scalefont setfont
(0) show
Q
5.0 20.0 translate
Q
q
1 39 98 OPL
33 98
-5.0 -20.0 translate
15.0 123.0 moveto
q 1 -1 scale
/LucidaBright findfont 13.0 scalefont setfont
(0.5) show
Q
5.0 20.0 translate
Q
q
1 39 8 OPL
33 8
-5.0 -20.0 translate
15.0 34.0 moveto
q 1 -1 scale
/LucidaBright findfont 13.0 scalefont setfont
(1.0) show
Q
5.0 20.0 translate
Q
Q
Q
Q
0 0 400 400 rc
0.0 0.0 translate
0.0 0.0 translate
q
5 5 391 16 rc
5.0 5.0 translate
q
[ 1.0 0.0 0.0 1.0 0.0 0.0 ] concat
q
0 0 392 15 rc
186.0 13.0 moveto
q 1 -1 scale
/LucidaBright findfont 13.0 scalefont setfont
(f\(x\)) show
Q
Q
newpath
0.0 0.0 m
0.0 16.0 l
391.0 16.0 l
391.0 0.0 l
h
W
Q
[ 1.0 0.0 0.0 1.0 5.0 5.0 ] defaultmatrix matrix concatmatrix setmatrix
-5.0 -5.0 translate
Q
2 J
0 j
end end restore showpage

%%Trailer
%%EOF
